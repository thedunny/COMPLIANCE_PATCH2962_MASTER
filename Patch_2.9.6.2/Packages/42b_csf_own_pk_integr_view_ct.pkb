create or replace package body csf_own.pk_integr_view_ct is

-------------------------------------------------------------------------------------------------------
-- Corpo do pacote de integração de Conhecimento de Transportes a partir de leitura de views
-------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
--| Procedimento de limpeza do array
-------------------------------------------------------------------------------------------------------
procedure pkb_limpa_array
is
begin
   --
   vt_tab_csf_ct_tomador.delete;
   vt_tab_csf_conhec_transp_compl.delete;
   vt_tab_csf_ct_compl_pass.delete;
   vt_tab_csf_ct_compl_obs.delete;
   vt_tab_csf_conhec_transp_emit.delete;
   vt_tab_csf_conhec_transp_rem.delete;
   vt_tab_csf_ctrem_inf_nf.delete;
   vt_tab_csf_ctrem_inf_nf_locret.delete;
   vt_tab_csf_ctrem_inf_nfe.delete;
   vt_tab_csf_ctrem_inf_outro.delete;
   vt_tab_csf_conhec_transp_exped.delete;
   vt_tab_csf_conhec_transp_receb.delete;
   vt_tab_csf_conhec_transp_dest.delete;
   vt_tab_csf_ctdest_locent.delete;
   vt_tab_csf_ct_vlprest.delete;
   vt_tab_csf_ctvlprest_comp.delete;
   vt_tab_csf_conhec_transp_imp.delete;
   vt_tab_csf_ct_infcarga.delete;
   vt_tab_csf_ctinfcarga_qtde.delete;
   vt_tab_csf_conhec_transp_cont.delete;
   vt_tab_csf_ctcont_lacre.delete;
   vt_tab_csf_ct_docant.delete;
   vt_tab_csf_ctdocant_papel.delete;
   vt_tab_csf_ctdocant_eletr.delete;
   vt_tab_csf_conhec_transp_seg.delete;
   vt_tab_csf_conhec_transp_rodo.delete;
   vt_tab_csf_ctrodo_occ.delete;
   vt_tab_csf_ctrodo_inf_valeped.delete;
   vt_tab_csf_ctrodo_valeped.delete;
   vt_tab_csf_ctrodo_valeped_disp.delete;
   vt_tab_csf_ctrodo_veic.delete;
   vt_tab_csf_ctrodo_veic_prop.delete;
   vt_tab_csf_ctrodo_lacre.delete;
   vt_tab_csf_ctrodo_moto.delete;
   vt_tab_csf_ct_rodo_os.delete;          --Atualização CTe 3.0
   vt_tab_csf_conhec_transp_aereo.delete;
   vt_tab_csf_conhec_transp_aquav.delete;
   vt_tab_csf_ctaquav_lacre.delete;
   vt_tab_csf_ct_ferrov.delete;
   vt_tab_csf_ctferrov_subst.delete;
   vt_tab_csf_ctferrov_dcl.delete;
   vt_tab_csf_ctferrovdcl_detvag.delete;
   vt_tab_csf_ctferdetvag_lacre.delete;
   vt_tab_csf_ctferdetvag_cont.delete;
   vt_tab_csf_conhec_transp_duto.delete;
   vt_tab_csf_conhec_transp_peri.delete;
   vt_tab_csf_conhec_transp_veic.delete;
   vt_tab_csf_conhec_transp_subst.delete;
   vt_tab_csf_ct_compltado.delete;
   vt_tab_csf_ctcompltado_comp.delete;
   vt_tab_csf_ctcompltado_imp.delete;
   vt_tab_csf_conhec_transp_anul.delete;
   vt_tab_csf_ct_aereo_dimen.delete;
   vt_tab_csf_ct_aereo_inf_man.delete;
   vt_tab_csf_ct_aereo_peri.delete;      --Atualização CTe 3.0
   vt_tab_csf_ct_aereo_carg_esp.delete;
   vt_tab_csf_ct_aquav_balsa.delete;
   vt_tab_csf_ct_aquav_cont.delete;
   vt_tab_csf_ct_aquav_cont_lacre.delete;
   vt_tab_csf_ct_ferrov_detvag.delete;
   vt_tab_csf_ct_fer_detvag_lacre.delete;
   vt_tab_csf_ct_fer_detvag_cont.delete;
   vt_tab_csf_ct_ferrov_detvag_nf.delete;
   vt_tab_csf_ct_fer_detvag_nfe.delete;
   --vt_tab_csf_conhec_transp_canc.delete;
   vt_tab_csf_ct_email.delete;
   vt_tab_csf_ct_impr.delete;
   vt_tab_csf_ct_aquav_cont_nf.delete;
   vt_tab_csf_ct_aquav_cont_nfe.delete;
   vt_tab_csf_ct_fat.delete;
   vt_tab_csf_ct_dup.delete;
   vt_tab_csf_ct_aut_xml.delete;
   vt_tab_csf_ctrem_loc_colet.delete;
   vt_tab_csf_ct_multimodal.delete;
   vt_tab_csf_ct_inf_nfe.delete;
   vt_tab_csf_ct_inf_nfe.delete;
   vt_tab_csf_ct_inf_outro.delete;
   vt_tab_csf_ct_inf_unid_transp.delete;
   vt_tab_csf_ct_unid_transp_lacr.delete;
   vt_tab_csf_ct_unid_transp_carg.delete;
   vt_tab_csf_ct_iut_carga_lacre.delete;
   vt_tab_csf_ct_inf_unid_carga.delete;
   vt_tab_csf_ct_unid_carga_lacre.delete;
   vt_tab_csf_r_nf_infunidtransp.delete;
   vt_tab_csf_r_nf_infunidcarga.delete;
   vt_tab_csf_ct_part_icms.delete;       --Atualização CTe 3.0
   vt_tab_csf_ct_inf_vinc_mult.delete;   --Atualização CTe 3.0
   vt_tab_csf_ct_transp_percurso.delete; --Atualização CTe 3.0
   vt_tab_csf_ct_doc_ref_os.delete;      --Atualização CTe 3.0
   vt_tab_csf_r_nfe_infunidtransp.delete;
   vt_tab_csf_r_nfe_infunidcarga.delete;
   vt_tab_csf_r_outr_ctunidtransp.delete;
   vt_tab_csf_r_outr_ctunidcarga.delete;
   vt_tab_csf_evento_cte.delete;
   vt_tab_csf_evento_cte_multimod.delete;
   vt_tab_csf_evento_cte_cce.delete;
   vt_tab_csf_evento_cte_gtv.delete;     --Atualização CTe 3.0
   vt_tab_csf_evento_cte_gtv_esp.delete; --Atualização CTe 3.0
   vt_tab_csf_evento_cte_desac.delete;   --Atualização CTe 3.0
   vt_tab_csf_evento_cte_epec.delete;
   --
end pkb_limpa_array;
-------------------------------------------------------------------------------------------------------
-- Função para monatgem do FROM
-------------------------------------------------------------------------------------------------------
function fkg_monta_from ( ev_obj in varchar2 )
         return varchar2
is
   --
   vv_from  varchar2(4000) := null;
   vv_obj   varchar2(4000) := null;
   --
begin
   --
   vv_obj := ev_obj || gn_dm_ind_emit; -- para difenciar view de tabelas
   --
   if GV_NOME_DBLINK is not null then
      --
      vv_from := vv_from || GV_ASPAS || vv_obj || GV_ASPAS || '@' || GV_NOME_DBLINK;
      --
   else
      --
      vv_from := vv_from || GV_ASPAS || vv_obj || GV_ASPAS;
      --
   end if;
   --
   if trim(GV_OWNER_OBJ) is not null then
      vv_from := trim(GV_OWNER_OBJ) || '.' || vv_from;
   end if;
   --
   vv_from := ' from ' || vv_from;
   --
   return vv_from;
   --
end fkg_monta_from;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de informações de envio de Impressoras de CTe
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_impr ( est_log_generico          in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id        in             conhec_transp_impr.conhectransp_id%TYPE
                                     --| parâmetros de chave
                                     , ev_cpf_cnpj_emit          in             varchar2
                                     , en_dm_ind_emit            in             number
                                     , en_dm_ind_oper            in             number
                                     , ev_cod_part               in             varchar2
                                     , ev_cod_mod                in             varchar2
                                     , ev_serie                  in             varchar2
                                     , en_nro_ct                 in             number
                                     )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_IMPR') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO_IMPR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_IMPR' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_IMPR');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || trim(ev_cod_part) || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_IMPR' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_impr;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_impr fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if nvl(vt_tab_csf_ct_impr.count,0) > 0 then
      --
      for i in vt_tab_csf_ct_impr.first..vt_tab_csf_ct_impr.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_impr := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_impr.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_impr.DM_TIPO_IMPR     := vt_tab_csf_ct_impr(i).DM_TIPO_IMPR;
         pk_csf_api_ct.gt_row_conhec_transp_impr.DESCR_IMPR       := vt_tab_csf_ct_impr(i).DESCR_IMPR;
         --
         vn_fase := 8;
         --
         pk_csf_api_ct.pkb_integr_conhec_transp_impr ( est_log_generico   => est_log_generico
                                                     , est_row_ct_impr    => pk_csf_api_ct.gt_row_conhec_transp_impr
                                                     );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_impr fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_impr;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de informações de envio de E-mail de CTe
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_email ( est_log_generico          in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id        in             conhec_transp_anul.conhectransp_id%TYPE
                                     --| parâmetros de chave
                                      , ev_cpf_cnpj_emit          in             varchar2
                                      , en_dm_ind_emit            in             number
                                      , en_dm_ind_oper            in             number
                                      , ev_cod_part               in             varchar2
                                      , ev_cod_mod                in             varchar2
                                      , ev_serie                  in             varchar2
                                      , en_nro_ct                 in             number
                                      )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_EMAIL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMAIL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO_ANEXO' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_EMAIL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_EMAIL' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_email;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_email fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if nvl(vt_tab_csf_ct_email.count,0) > 0 then
      --
      for i in vt_tab_csf_ct_email.first..vt_tab_csf_ct_email.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_email := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_email.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_email.dm_origem        := 8; -- Integração
         pk_csf_api_ct.gt_row_conhec_transp_email.email            := vt_tab_csf_ct_email(i).email;
         pk_csf_api_ct.gt_row_conhec_transp_email.dm_tipo_anexo    := vt_tab_csf_ct_email(i).dm_tipo_anexo;
         pk_csf_api_ct.gt_row_conhec_transp_email.dm_st_email      := 0; -- Não enviado
         --
         vn_fase := 8;
         --
         pk_csf_api_ct.pkb_integr_conhec_transp_email ( est_log_generico   => est_log_generico
                                                      , est_row_ct_email   => pk_csf_api_ct.gt_row_conhec_transp_email
                                                      );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_email fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_email;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de informações de Detalhamento do CT-e do tipo Anulação de Valores.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_anul ( est_log_generico          in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id        in             conhec_transp_anul.conhectransp_id%TYPE
                                    --| parâmetros de chave
                                     , ev_cpf_cnpj_emit          in             varchar2
                                     , en_dm_ind_emit            in             number
                                     , en_dm_ind_oper            in             number
                                     , ev_cod_part               in             varchar2
                                     , ev_cod_mod                in             varchar2
                                     , ev_serie                  in             varchar2
                                     , en_nro_ct                 in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_ANUL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_ANUL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_ANUL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where  
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_ANUL' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_anul;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_anul fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_anul.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_anul.first..vt_tab_csf_conhec_transp_anul.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_anul := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_anul.conhectransp_id     := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_anul.nro_chave_cte_anul  :=(vt_tab_csf_conhec_transp_anul(i).nro_chave_cte_anul);
         pk_csf_api_ct.gt_row_conhec_transp_anul.dt_emissao          := vt_tab_csf_conhec_transp_anul(i).dt_emissao;
         --
         vn_fase := 8;
         --
         ---- Chama procedimento que integra as informações de Detalhamento do CT-e do tipo Anulação de Valores
         pk_csf_api_ct.pkb_integr_conhec_transp_anul ( est_log_generico     => est_log_generico
                                                     , est_row_ct_anul      => pk_csf_api_ct.gt_row_conhec_transp_anul
                                                     , en_conhectransp_id   => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_anul fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_anul;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura com informações relativas aos Impostos de complemento.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctcompltado_imp ( est_log_generico            in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id          in             conhec_transp_compltado.conhectransp_id%TYPE
                                  , en_conhectranspcompltado_id in             conhec_transp_compltado.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit            in             varchar2
                                  , en_dm_ind_emit              in             number
                                  , en_dm_ind_oper              in             number
                                  , ev_cod_part                 in             varchar2
                                  , ev_cod_mod                  in             varchar2
                                  , ev_serie                    in             varchar2
                                  , en_nro_ct                   in             number
                                  , ev_nro_chave_cte_comp       in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTCOMPLTADO_IMP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_COMP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_IMPOSTO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_ST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BASE_CALC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ALIQ_APLI' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_IMP_TRIB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PERC_REDUC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_CRED' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_INF_IMP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTCOMPLTADO_IMP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CHAVE_CTE_COMP' || GV_ASPAS || ' = ' || '''' || ev_nro_chave_cte_comp || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTCOMPLTADO_IMP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctcompltado_imp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctcompltado_imp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctcompltado_imp.count > 0 then
      --
      for i in vt_tab_csf_ctcompltado_imp.first..vt_tab_csf_ctcompltado_imp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctcompltado_imp := null;
         --
         pk_csf_api_ct.gt_row_ctcompltado_imp.conhectranspcompltado_id  := en_conhectranspcompltado_id;
         pk_csf_api_ct.gt_row_ctcompltado_imp.vl_base_calc              := vt_tab_csf_ctcompltado_imp(i).vl_base_calc;
         pk_csf_api_ct.gt_row_ctcompltado_imp.aliq_apli                 := vt_tab_csf_ctcompltado_imp(i).aliq_apli;
         pk_csf_api_ct.gt_row_ctcompltado_imp.vl_imp_trib               := vt_tab_csf_ctcompltado_imp(i).vl_imp_trib;
         pk_csf_api_ct.gt_row_ctcompltado_imp.perc_reduc                := vt_tab_csf_ctcompltado_imp(i).perc_reduc;
         pk_csf_api_ct.gt_row_ctcompltado_imp.vl_cred                   := vt_tab_csf_ctcompltado_imp(i).vl_cred;
         pk_csf_api_ct.gt_row_ctcompltado_imp.dm_inf_imp                := nvl(vt_tab_csf_ctcompltado_imp(i).dm_inf_imp,0);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações relativas aos Impostos de complemento.
         pk_csf_api_ct.pkb_integr_ctcompltado_imp ( est_log_generico    => est_log_generico
                                                  , est_row_Imp_ComCt   => pk_csf_api_ct.gt_row_ctcompltado_imp
                                                  , en_cd_imp           => vt_tab_csf_ctcompltado_imp(i).cod_imposto
                                                  , ev_cod_st           =>(vt_tab_csf_ctcompltado_imp(i).cod_st)
                                                  , en_conhectransp_id  => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctcompltado_imp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctcompltado_imp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura com informações de Componentes do Valor da Prestação de complemento.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctcompltado_comp ( est_log_generico            in out nocopy  dbms_sql.number_table
                                   , en_conhectransp_id          in             conhec_transp_compltado.conhectransp_id%TYPE
                                   , en_conhectranspcompltado_id in             conhec_transp_compltado.id%TYPE
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit            in             varchar2
                                   , en_dm_ind_emit              in             number
                                   , en_dm_ind_oper              in             number
                                   , ev_cod_part                 in             varchar2
                                   , ev_cod_mod                  in             varchar2
                                   , ev_serie                    in             varchar2
                                   , en_nro_ct                   in             number
                                   , ev_nro_chave_cte_comp       in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTCOMPLTADO_COMP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'DM_IND_EMIT' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'DM_IND_OPER' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'COD_PART' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'COD_MOD' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'SERIE' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'NRO_CT' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'NRO_CHAVE_CTE_COMP' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'NOME' ||GV_ASPAS;
   gv_sql := gv_sql || ', ' ||GV_ASPAS || 'VALOR' ||GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTCOMPLTADO_COMP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||GV_ASPAS || 'CPF_CNPJ_EMIT' ||GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' ||GV_ASPAS || 'DM_IND_EMIT' ||GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' ||GV_ASPAS || 'DM_IND_OPER' ||GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' ||GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CHAVE_CTE_COMP' || GV_ASPAS || ' = ' || '''' || ev_nro_chave_cte_comp || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTCOMPLTADO_COMP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctcompltado_comp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctcompltado_comp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctcompltado_comp.count > 0 then
      --
      for i in vt_tab_csf_ctcompltado_comp.first..vt_tab_csf_ctcompltado_comp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctcompltado_comp := null;
         --
         pk_csf_api_ct.gt_row_ctcompltado_comp.conhectranspcompltado_id  := en_conhectranspcompltado_id;
         pk_csf_api_ct.gt_row_ctcompltado_comp.nome                      := trim(vt_tab_csf_ctcompltado_comp(i).nome);
         pk_csf_api_ct.gt_row_ctcompltado_comp.valor                     := vt_tab_csf_ctcompltado_comp(i).valor;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Componentes do Valor da Prestação de complemento
         pk_csf_api_ct.pkb_integr_ctcompltado_comp ( est_log_generico    => est_log_generico
                                                   , est_row_Comp_Ct     => pk_csf_api_ct.gt_row_ctcompltado_comp
                                                   , en_conhectransp_id  => en_conhectransp_id);
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctcompltado_comp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctcompltado_comp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura com informações de Detalhamento do CT-e complemento.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_compltado  ( est_log_generico         in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id       in             conhec_transp_compltado.conhectransp_id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit         in             varchar2
                                , en_dm_ind_emit           in             number
                                , en_dm_ind_oper           in             number
                                , ev_cod_part              in             varchar2
                                , ev_cod_mod               in             varchar2
                                , ev_serie                 in             varchar2
                                , en_nro_ct                in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_COMPLTADO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_COMP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_PREST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'INF_AD_FISCAL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_COMPLTADO');
   --
   vn_fase := 2;
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_COMPLTADO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_compltado;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_compltado fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_compltado.count > 0 then
      --
      for i in vt_tab_csf_ct_compltado.first..vt_tab_csf_ct_compltado.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_compltado := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_compltado.conhectransp_id       := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_compltado.nro_chave_cte_comp    := vt_tab_csf_ct_compltado(i).nro_chave_cte_comp;
         pk_csf_api_ct.gt_row_conhec_transp_compltado.vl_total_prest        := vt_tab_csf_ct_compltado(i).vl_total_prest;
         pk_csf_api_ct.gt_row_conhec_transp_compltado.inf_ad_fiscal         := vt_tab_csf_ct_compltado(i).inf_ad_fiscal;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Detalhamento do CT-e complemento
         pk_csf_api_ct.pkb_integr_ct_compltado ( est_log_generico     => est_log_generico
                                               , est_row_ct_compltado => pk_csf_api_ct.gt_row_conhec_transp_compltado
                                               , en_conhectransp_id   => en_conhectransp_id);
         vn_fase := 9;
         --
         -- Leitura das informações relativas aos Impostos de complemento
         pkb_ler_ctcompltado_imp ( est_log_generico            => est_log_generico
                                 , en_conhectransp_id          => en_conhectransp_id
                                 , en_conhectranspcompltado_id => pk_csf_api_ct.gt_row_conhec_transp_compltado.id
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit            => ev_cpf_cnpj_emit
                                 , en_dm_ind_emit              => en_dm_ind_emit
                                 , en_dm_ind_oper              => en_dm_ind_oper
                                 , ev_cod_part                 => ev_cod_part
                                 , ev_cod_mod                  => ev_cod_mod
                                 , ev_serie                    => ev_serie
                                 , en_nro_ct                   => en_nro_ct
                                 , ev_nro_chave_cte_comp       => pk_csf_api_ct.gt_row_conhec_transp_compltado.nro_chave_cte_comp );
         --
         vn_fase := 10;
         --
         -- Leitura das informações dos Componentes do Valor da Prestação de complemento
         pkb_ler_ctcompltado_comp ( est_log_generico            => est_log_generico
                                  , en_conhectransp_id          => en_conhectransp_id
                                  , en_conhectranspcompltado_id => pk_csf_api_ct.gt_row_conhec_transp_compltado.id
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit            => ev_cpf_cnpj_emit
                                  , en_dm_ind_emit              => en_dm_ind_emit
                                  , en_dm_ind_oper              => en_dm_ind_oper
                                  , ev_cod_part                 => ev_cod_part
                                  , ev_cod_mod                  => ev_cod_mod
                                  , ev_serie                    => ev_serie
                                  , en_nro_ct                   => en_nro_ct
                                  , ev_nro_chave_cte_comp       => pk_csf_api_ct.gt_row_conhec_transp_compltado.nro_chave_cte_comp );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_compltado fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_compltado;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura com informações do CT-e de substituição
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_subst ( est_log_generico         in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id       in             conhec_transp_subst.conhectransp_id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit         in             varchar2
                                      , en_dm_ind_emit           in             number
                                      , en_dm_ind_oper           in             number
                                      , ev_cod_part              in             varchar2
                                      , ev_cod_mod               in             varchar2
                                      , ev_serie                 in             varchar2
                                      , en_nro_ct                in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_SUBST') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'              || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_SUB'  || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE_TOM'  || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ'               || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD_SUB'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_SUB'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SUBSERIE'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO'                || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DOC_FISCAL'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_TOM'  || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_ANUL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_ALT_TOMA'    || GV_ASPAS;  --Atualização CTe 3.0
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF'                || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_SUBST');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE'   || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT'  || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_SUBST' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_subst;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_subst fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_subst.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_subst.first..vt_tab_csf_conhec_transp_subst.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_subst := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_subst.conhectransp_id      := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_subst.nro_chave_cte_sub    := vt_tab_csf_conhec_transp_subst(i).nro_chave_cte_sub;
         pk_csf_api_ct.gt_row_conhec_transp_subst.nro_chave_nfe_tom    := vt_tab_csf_conhec_transp_subst(i).nro_chave_nfe_tom;
         pk_csf_api_ct.gt_row_conhec_transp_subst.cnpj                 := trim(vt_tab_csf_conhec_transp_subst(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_subst.cod_mod              := trim(vt_tab_csf_conhec_transp_subst(i).cod_mod);
         pk_csf_api_ct.gt_row_conhec_transp_subst.serie                := trim(vt_tab_csf_conhec_transp_subst(i).serie);
         pk_csf_api_ct.gt_row_conhec_transp_subst.subserie             := trim(vt_tab_csf_conhec_transp_subst(i).subserie);
         pk_csf_api_ct.gt_row_conhec_transp_subst.nro                  := trim(vt_tab_csf_conhec_transp_subst(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_subst.vl_doc_fiscal        := vt_tab_csf_conhec_transp_subst(i).vl_doc_fiscal;
         pk_csf_api_ct.gt_row_conhec_transp_subst.dt_emissao           := vt_tab_csf_conhec_transp_subst(i).dt_emissao;
         pk_csf_api_ct.gt_row_conhec_transp_subst.nro_chave_cte_tom    := vt_tab_csf_conhec_transp_subst(i).nro_chave_cte_tom;
         pk_csf_api_ct.gt_row_conhec_transp_subst.nro_chave_cte_anul   := vt_tab_csf_conhec_transp_subst(i).nro_chave_cte_anul;
         pk_csf_api_ct.gt_row_conhec_transp_subst.dm_ind_alt_toma      := vt_tab_csf_conhec_transp_subst(i).dm_ind_alt_toma;  --Atualização CTe 3.0
         pk_csf_api_ct.gt_row_conhec_transp_subst.cpf                  := trim(vt_tab_csf_conhec_transp_subst(i).cpf);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do CT-e de substituição
         pk_csf_api_ct.pkb_integr_conhec_transp_subst ( est_log_generico    => est_log_generico
                                                      , est_row_ct_subst    => pk_csf_api_ct.gt_row_conhec_transp_subst
                                                      , en_conhectransp_id  => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_subst fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_subst;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos veículos transportados
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_veic ( est_log_generico         in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id       in             conhec_transp_veic.conhectransp_id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit         in             varchar2
                                     , en_dm_ind_emit           in             number
                                     , en_dm_ind_oper           in             number
                                     , ev_cod_part              in             varchar2
                                     , ev_cod_mod               in             varchar2
                                     , ev_serie                 in             varchar2
                                     , en_nro_ct                in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_VEIC') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CHASSI' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_COD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_COR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MODELO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_UNIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_FRETE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_VEIC');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_VEIC' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_veic;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_veic fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_veic.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_veic.first..vt_tab_csf_conhec_transp_veic.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_veic := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_veic.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_veic.chassi           := vt_tab_csf_conhec_transp_veic(i).chassi;
         pk_csf_api_ct.gt_row_conhec_transp_veic.cod_cod          := vt_tab_csf_conhec_transp_veic(i).cod_cod;
         pk_csf_api_ct.gt_row_conhec_transp_veic.descr_cor        := vt_tab_csf_conhec_transp_veic(i).descr_cor;
         pk_csf_api_ct.gt_row_conhec_transp_veic.cod_modelo       := vt_tab_csf_conhec_transp_veic(i).cod_modelo;
         pk_csf_api_ct.gt_row_conhec_transp_veic.vl_unit          := vt_tab_csf_conhec_transp_veic(i).vl_unit;
         pk_csf_api_ct.gt_row_conhec_transp_veic.vl_frete         := vt_tab_csf_conhec_transp_veic(i).vl_frete;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos veículos transportados.
         pk_csf_api_ct.pkb_integr_conhec_transp_veic ( est_log_generico    => est_log_generico
                                                     , est_row_ct_veic     => pk_csf_api_ct.gt_row_conhec_transp_veic
                                                     , en_conhectransp_id  => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_veic fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_veic;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de transporte de produtos classificados pela ONU como perigosos.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_peri ( est_log_generico         in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id       in             conhec_transp_peri.conhectransp_id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit         in             varchar2
                                     , en_dm_ind_emit           in             number
                                     , en_dm_ind_oper           in             number
                                     , ev_cod_part              in             varchar2
                                     , ev_cod_mod               in             varchar2
                                     , ev_serie                 in             varchar2
                                     , en_nro_ct                in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_PERI') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_ONU' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_APROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CLASSE_RISCO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'GRUPO_EMB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_TOTAL_PROD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_VOL_TIPO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PONTO_FULGOR' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_PERI');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_PERI' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_peri;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_peri fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_peri.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_peri.first..vt_tab_csf_conhec_transp_peri.last loop
         --                                               
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_peri := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_peri.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_peri.nro_onu          := vt_tab_csf_conhec_transp_peri(i).nro_onu;
         pk_csf_api_ct.gt_row_conhec_transp_peri.nome_aprop       := vt_tab_csf_conhec_transp_peri(i).nome_aprop;
         pk_csf_api_ct.gt_row_conhec_transp_peri.classe_risco     := vt_tab_csf_conhec_transp_peri(i).classe_risco;
         pk_csf_api_ct.gt_row_conhec_transp_peri.grupo_emb        := vt_tab_csf_conhec_transp_peri(i).grupo_emb;
         pk_csf_api_ct.gt_row_conhec_transp_peri.qtde_total_prod  := vt_tab_csf_conhec_transp_peri(i).qtde_total_prod;
         pk_csf_api_ct.gt_row_conhec_transp_peri.qtde_vol_tipo    := vt_tab_csf_conhec_transp_peri(i).qtde_vol_tipo;
         pk_csf_api_ct.gt_row_conhec_transp_peri.ponto_fulgor     := vt_tab_csf_conhec_transp_peri(i).ponto_fulgor;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de transporte de produtos classificados pela ONU como perigosos.
         pk_csf_api_ct.pkb_integr_conhec_transp_peri ( est_log_generico   => est_log_generico
                                                     , est_row_ct_peri    => pk_csf_api_ct.gt_row_conhec_transp_peri
                                                     , en_conhectransp_id => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_peri fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_peri;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de transporte de produtos classificados pela ONU como perigosos.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_duto ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp_duto.conhectransp_id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_DUTO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TARIFA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_INI' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_FIN' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_DUTO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_DUTO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_duto;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_duto fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_duto.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_duto.first..vt_tab_csf_conhec_transp_duto.last loop
         --                                               
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_duto := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_duto.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_duto.vl_tarifa        := vt_tab_csf_conhec_transp_duto(i).vl_tarifa;
         pk_csf_api_ct.gt_row_conhec_transp_duto.dt_ini           := vt_tab_csf_conhec_transp_duto(i).dt_ini;
         pk_csf_api_ct.gt_row_conhec_transp_duto.dt_fin           := vt_tab_csf_conhec_transp_duto(i).dt_fin;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do modal Dutoviário.
         pk_csf_api_ct.pkb_integr_conhec_transp_duto ( est_log_generico    => est_log_generico
                                                     , est_row_ct_duto     => pk_csf_api_ct.gt_row_conhec_transp_duto
                                                     , en_conhectransp_id  => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --                                                                                        
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_duto fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_duto;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos containeres contidos no vagão com DCL.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctferrovdcldetvag_cont ( est_log_generico           in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id         in             conhec_transp_ferrov.conhectransp_id%TYPE
                                         , en_ctferrovdcldetvag_id    in             ctferrovdcl_detvag.id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit           in             varchar2
                                         , en_dm_ind_emit             in             number
                                         , en_dm_ind_oper             in             number
                                         , ev_cod_part                in             varchar2
                                         , ev_cod_mod                 in             varchar2
                                         , ev_serie                   in             varchar2
                                         , en_nro_ct                  in             number
                                         , ev_serie_dcl               in             varchar2
                                         , en_nro_dcl                 in             number
                                         , ed_dt_emissao              in             date
                                         , en_nro_vagao               in             number)

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTFERROVDCLDETVAG_CONT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CONT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTFERROVDCLDETVAG_CONT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS || ' = ' || '''' || ev_serie_dcl || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS || ' = ' || en_nro_dcl;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS || ' = ' || '''' || ed_dt_emissao  || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS || ' = ' || en_nro_vagao;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTFERROVDCLDETVAG_CONT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctferdetvag_cont;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrovdcldetvag_cont fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctferdetvag_cont.count > 0 then
      --
      for i in vt_tab_csf_ctferdetvag_cont.first..vt_tab_csf_ctferdetvag_cont.last loop
         --                                               
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_cont := null;
         --
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_cont.ctferrovdcldetvag_id := en_ctferrovdcldetvag_id;
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_cont.nro_cont             := vt_tab_csf_ctferdetvag_cont(i).nro_cont;
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_cont.dt_prev              := vt_tab_csf_ctferdetvag_cont(i).dt_prev;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos containeres contidos no vagão com DCL
         pk_csf_api_ct.pkb_integr_ctferr_cont ( est_log_generico     => est_log_generico
                                              , est_row_ctferr_cont  => pk_csf_api_ct.gt_row_ctferrovdcldetvag_cont
                                              , en_conhectransp_id   => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrovdcldetvag_cont fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctferrovdcldetvag_cont;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos containeres contidos no vagão.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_ferrov_detvag_cont ( est_log_generico           in out nocopy  dbms_sql.number_table
                                        , en_conhectransp_id         in             ct_ferrov_detvag_cont.ctferrovdetvag_id%TYPE
                                        , en_ctferrovdetvag_id       in             ct_ferrov_detvag.id%TYPE
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           in             varchar2
                                        , en_dm_ind_emit             in             number
                                        , en_dm_ind_oper             in             number
                                        , ev_cod_part                in             varchar2
                                        , ev_cod_mod                 in             varchar2
                                        , ev_serie                   in             varchar2
                                        , en_nro_ct                  in             number
                                        , en_nro_vagao               in             number)

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_FERROV_DETVAG_CONT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CONT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_FERROV_DETVAG_CONT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS || ' = ' || en_nro_vagao;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_FERROV_DETVAG_CONT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_fer_detvag_cont;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_cont fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_fer_detvag_cont.count > 0 then
      --
      for i in vt_tab_csf_ct_fer_detvag_cont.first..vt_tab_csf_ct_fer_detvag_cont.last loop
         --                                               
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_cont := null;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_cont.ctferrovdetvag_id := en_ctferrovdetvag_id;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_cont.nro_cont          := vt_tab_csf_ct_fer_detvag_cont(i).nro_cont;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_cont.dt_prev           := vt_tab_csf_ct_fer_detvag_cont(i).dt_prev;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que valida das informações dos containeres contidos no vagão.
         pk_csf_api_ct.pkb_integr_ct_fer_detvag_cont( est_log_generico    => est_log_generico
                                                    , est_row_ct_ferrov_detvag_cont => pk_csf_api_ct.gt_row_ct_ferrov_detvag_cont
                                                    , en_conhectransp_id  => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_cont fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_ferrov_detvag_cont;
--------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de carga especial do modal Aéreo.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aereo_carg_esp     ( est_log_generico           in out nocopy  dbms_sql.number_table
                                        , en_conhectransp_id         in             Conhec_Transp_aereo.conhectransp_id%TYPE
                                        , en_conhectranspaereo_id    in             conhec_transp_aereo.id%TYPE
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           in             varchar2
                                        , en_dm_ind_emit             in             number
                                        , en_dm_ind_oper             in             number
                                        , ev_cod_part                in             varchar2
                                        , ev_cod_mod                 in             varchar2
                                        , ev_serie                   in             varchar2
                                        , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AEREO_CARG_ESP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_IMP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AEREO_CARG_ESP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AEREO_CARG_ESP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aereo_carg_esp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_carg_esp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aereo_carg_esp.count > 0 then
      --
      for i in vt_tab_csf_ct_aereo_carg_esp.first..vt_tab_csf_ct_aereo_carg_esp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aereo_carg_esp := null;
         --
         pk_csf_api_ct.gt_row_ct_aereo_carg_esp.conhectranspaereo_id := en_conhectranspaereo_id;
         pk_csf_api_ct.gt_row_ct_aereo_carg_esp.cod_imp              := trim(vt_tab_csf_ct_aereo_carg_esp(i).cod_imp);
         --
         vn_fase := 8;
         --
         --Chama procedimento que valida as Informações do modal Aéreo
         pk_csf_api_ct.pkb_integr_ct_aereo_carg_esp ( est_log_generico   => est_log_generico
                                                    , est_row_ct_aereo_carg_esp   => pk_csf_api_ct.gt_row_ct_aereo_carg_esp
                                                    , en_conhectransp_id => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_carg_esp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aereo_carg_esp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Lacres de Conteiners do modal Aquaviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aquav_cont_lacre ( est_log_generico            in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id          in             Conhec_Transp.id%TYPE
                                      , en_ctaquavcont_id           in             ct_aquav_cont.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit            in             varchar2
                                      , en_dm_ind_emit              in             number
                                      , en_dm_ind_oper              in             number
                                      , ev_cod_part                 in             varchar2
                                      , ev_cod_mod                  in             varchar2
                                      , ev_serie                    in             varchar2
                                      , en_nro_ct                   in             number
                                      , ev_conteiner                in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AQUAV_CONT_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AQUAV_CONT_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS || ' = ' || '''' || ev_conteiner || '''';
--   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'LACRE' || GV_ASPAS || ' = ' || '''' || ev_lacre || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AQUAV_CONT_LACRE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aquav_cont_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aquav_cont_lacre.count > 0 then
      --
      for i in vt_tab_csf_ct_aquav_cont_lacre.first..vt_tab_csf_ct_aquav_cont_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont_lacre := null;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont_lacre.ctaquavcont_id := en_ctaquavcont_id;
         pk_csf_api_ct.gt_row_ct_aquav_cont_lacre.lacre          := trim(vt_tab_csf_ct_aquav_cont_lacre(i).lacre);
         --
         vn_fase := 8;
         --
       -- Chama procedimento que valida as informações dos lacres dos cointainers da qtde da carga
      pk_csf_api_ct.pkb_integr_ct_aquav_cont_lacre( est_log_generico      => est_log_generico
                                                  , est_row_ct_aquav_cont_lacre => pk_csf_api_ct.gt_row_ct_aquav_cont_lacre
                                                  , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aquav_cont_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Notas fiscais eletronicas de Conteiners do modal Aquaviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aquav_cont_nfe ( est_log_generico            in out nocopy  dbms_sql.number_table
                                    , en_conhectransp_id          in             Conhec_Transp.id%TYPE
                                    , en_ctaquavcont_id           in             ct_aquav_cont.id%TYPE
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit            in             varchar2
                                    , en_dm_ind_emit              in             number
                                    , en_dm_ind_oper              in             number
                                    , ev_cod_part                 in             varchar2
                                    , ev_cod_mod                  in             varchar2
                                    , ev_serie                    in             varchar2
                                    , en_nro_ct                   in             number
                                    , ev_conteiner                in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AQUAV_CONT_NFE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UNID_MED_RAT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AQUAV_CONT_NFE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS || ' = ' || '''' || ev_conteiner || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AQUAV_CONT_NFE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aquav_cont_nfe;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont_nfe fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aquav_cont_nfe.count > 0 then
      --
      for i in vt_tab_csf_ct_aquav_cont_nfe.first..vt_tab_csf_ct_aquav_cont_nfe.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont_nfe := null;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont_nfe.ctaquavcont_id := en_ctaquavcont_id;
         pk_csf_api_ct.gt_row_ct_aquav_cont_nfe.nro_chave_nfe  := trim(vt_tab_csf_ct_aquav_cont_nfe(i).nro_chave_nfe);
         pk_csf_api_ct.gt_row_ct_aquav_cont_nfe.unid_med_rat   := vt_tab_csf_ct_aquav_cont_nfe(i).unid_med_rat;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que valida as informações das notas dos cointainers da qtde da carga
         pk_csf_api_ct.pkb_integr_ct_aquav_cont_nfe ( est_log_generico          => est_log_generico
                                                    , est_row_ct_aquav_cont_nfe => pk_csf_api_ct.gt_row_ct_aquav_cont_nfe
                                                    , en_conhectransp_id        => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont_nfe fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aquav_cont_nfe;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Notas de Conteiners do modal Aquaviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aquav_cont_nf ( est_log_generico            in out nocopy  dbms_sql.number_table
                                   , en_conhectransp_id          in             Conhec_Transp.id%TYPE
                                   , en_ctaquavcont_id           in             ct_aquav_cont.id%TYPE
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit            in             varchar2
                                   , en_dm_ind_emit              in             number
                                   , en_dm_ind_oper              in             number
                                   , ev_cod_part                 in             varchar2
                                   , ev_cod_mod                  in             varchar2
                                   , ev_serie                    in             varchar2
                                   , en_nro_ct                   in             number
                                   , ev_conteiner                in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AQUAV_CONT_NF') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UNID_MED_RAT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AQUAV_CONT_NF');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS || ' = ' || '''' || ev_conteiner || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AQUAV_CONT_NF' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aquav_cont_nf;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont_nf fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aquav_cont_nf.count > 0 then
      --
      for i in vt_tab_csf_ct_aquav_cont_nf.first..vt_tab_csf_ct_aquav_cont_nf.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont_nf := null;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont_nf.ctaquavcont_id := en_ctaquavcont_id;
         pk_csf_api_ct.gt_row_ct_aquav_cont_nf.serie          := trim(vt_tab_csf_ct_aquav_cont_nf(i).serie_nf);
         pk_csf_api_ct.gt_row_ct_aquav_cont_nf.nro_nf         := vt_tab_csf_ct_aquav_cont_nf(i).nro_nf;
         pk_csf_api_ct.gt_row_ct_aquav_cont_nf.unid_med_rat   := vt_tab_csf_ct_aquav_cont_nf(i).unid_med_rat;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que valida as informações das notas dos cointainers da qtde da carga
         pk_csf_api_ct.pkb_integr_ct_aquav_cont_nf ( est_log_generico         => est_log_generico
                                                   , est_row_ct_aquav_cont_nf => pk_csf_api_ct.gt_row_ct_aquav_cont_nf
                                                   , en_conhectransp_id       => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont_nf fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aquav_cont_nf;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos Conteiners do modal Aquaviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aquav_cont ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             Conhec_Transp_aquav.conhectransp_id%TYPE
                                , en_conhectranspaquav_id    in             Conhec_Transp_aquav.id%TYPE
                                --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
                               -- , ev_conteiner               in             varchar2)

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AQUAV_CONT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CONTEINER' || GV_ASPAS;

   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AQUAV_CONT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AQUAV_CONT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aquav_cont;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aquav_cont.count > 0 then
      --
      for i in vt_tab_csf_ct_aquav_cont.first..vt_tab_csf_ct_aquav_cont.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont := null;
         --
         pk_csf_api_ct.gt_row_ct_aquav_cont.conhectranspaquav_id     := en_conhectranspaquav_id;
         pk_csf_api_ct.gt_row_ct_aquav_cont.conteiner                := trim(vt_tab_csf_ct_aquav_cont(i).conteiner);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que valida as informações dos cointainers da qtde da carga
         pk_csf_api_ct.pkb_integr_ct_aquav_cont( est_log_generico      => est_log_generico
                                               , est_row_ct_aquav_cont => pk_csf_api_ct.gt_row_ct_Aquav_Cont
                                               , en_conhectransp_id    => en_conhectransp_id );
         --
         pkb_ler_ct_aquav_cont_lacre ( est_log_generico     => est_log_generico
                                     , en_conhectransp_id   => en_conhectransp_id
                                     , en_ctaquavcont_id    => pk_csf_api_ct.gt_row_ct_Aquav_Cont.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit     => ev_cpf_cnpj_emit
                                     , en_dm_ind_emit       => en_dm_ind_emit
                                     , en_dm_ind_oper       => en_dm_ind_oper
                                     , ev_cod_part          => ev_cod_part
                                     , ev_cod_mod           => ev_cod_mod
                                     , ev_serie             => ev_serie
                                     , en_nro_ct            => en_nro_ct
                                     , ev_conteiner         => trim(vt_tab_csf_ct_aquav_cont(i).conteiner));
         --
         pkb_ler_ct_aquav_cont_nf ( est_log_generico      => est_log_generico
                                  , en_conhectransp_id    => en_conhectransp_id                   
                                  , en_ctaquavcont_id     => pk_csf_api_ct.gt_row_ct_Aquav_Cont.id
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit      => ev_cpf_cnpj_emit
                                  , en_dm_ind_emit        => en_dm_ind_emit
                                  , en_dm_ind_oper        => en_dm_ind_oper
                                  , ev_cod_part           => ev_cod_part
                                  , ev_cod_mod            => ev_cod_mod
                                  , ev_serie              => ev_serie
                                  , en_nro_ct             => en_nro_ct
                                  , ev_conteiner          => trim(vt_tab_csf_ct_aquav_cont(i).conteiner));
         --
         pkb_ler_ct_aquav_cont_nfe ( est_log_generico      => est_log_generico
                                   , en_conhectransp_id    => en_conhectransp_id
                                   , en_ctaquavcont_id     => pk_csf_api_ct.gt_row_ct_Aquav_Cont.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit      => ev_cpf_cnpj_emit
                                   , en_dm_ind_emit        => en_dm_ind_emit
                                   , en_dm_ind_oper        => en_dm_ind_oper
                                   , ev_cod_part           => ev_cod_part
                                   , ev_cod_mod            => ev_cod_mod
                                   , ev_serie              => ev_serie
                                   , en_nro_ct             => en_nro_ct
                                   , ev_conteiner          => trim(vt_tab_csf_ct_aquav_cont(i).conteiner));
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_cont fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aquav_cont;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Balsas do modal Aquaviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aquav_balsa ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             Conhec_Transp_aquav.conhectransp_id%TYPE
                                 , en_conhectranspaquav_id    in             Conhec_Transp.id%TYPE
                                 --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number )
                               --  , ev_balsa                   in             varchar2

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AQUAV_BALSA') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BALSA' || GV_ASPAS;

   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AQUAV_BALSA');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AQUAV_BALSA' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aquav_balsa;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_balsa fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aquav_balsa.count > 0 then
      --
      for i in vt_tab_csf_ct_aquav_balsa.first..vt_tab_csf_ct_aquav_balsa.last loop
         --                                               
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aquav_balsa := null;
         --
         pk_csf_api_ct.gt_row_ct_aquav_balsa.CONHECTRANSPAQUAV_ID := en_conhectranspaquav_id;
         pk_csf_api_ct.gt_row_ct_aquav_balsa.balsa                := trim(vt_tab_csf_ct_aquav_balsa(i).balsa);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que valida as informações da balsa
           pk_csf_api_ct.pkb_integr_ct_aquav_balsa( est_log_generico      => est_log_generico
                                                  , est_row_ct_aquav_balsa => pk_csf_api_ct.gt_row_ct_Aquav_Balsa
                                                  , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aquav_balsa fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aquav_balsa;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Lacres dos vagões do DCL
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctferdetvag_lacre ( est_log_generico           in out nocopy  dbms_sql.number_table
                                    , en_conhectransp_id         in             conhec_transp_ferrov.conhectransp_id%TYPE
                                    , en_ctferrovdcldetvag_id    in             ctferrovdcl_detvag.id%TYPE
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit           in             varchar2
                                    , en_dm_ind_emit             in             number
                                    , en_dm_ind_oper             in             number
                                    , ev_cod_part                in             varchar2
                                    , ev_cod_mod                 in             varchar2
                                    , ev_serie                   in             varchar2
                                    , en_nro_ct                  in             number
                                    , ev_serie_dcl               in             varchar2
                                    , en_nro_dcl                 in             number
                                    , ed_dt_emissao              in             date
                                    , en_nro_vagao               in             number)

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTFERROVDCLDETVAG_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTFERROVDCLDETVAG_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS || ' = ' || '''' || ev_serie_dcl || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS || ' = ' || en_nro_dcl;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS || ' = ' || '''' || ed_dt_emissao  || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS || ' = ' || en_nro_vagao;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTFERROVDCLDETVAG_LACRE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctferdetvag_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferdetvag_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctferdetvag_lacre.count > 0 then
      --
      for i in vt_tab_csf_ctferdetvag_lacre.first..vt_tab_csf_ctferdetvag_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_lacre := null;
         --
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_lacre.ctferrovdcldetvag_id  := en_ctferrovdcldetvag_id;
         pk_csf_api_ct.gt_row_ctferrovdcldetvag_lacre.nro_lacre             := trim(vt_tab_csf_ctferdetvag_lacre(i).nro_lacre);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos containeres contidos no vagão com DCL
         pk_csf_api_ct.pkb_integr_ctferr_lacre ( est_log_generico     => est_log_generico
                                               , est_row_ctferr_lacre => pk_csf_api_ct.gt_row_ctferrovdcldetvag_lacre
                                               , en_conhectransp_id   => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferdetvag_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctferdetvag_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Lacres dos vagões do DCL
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_ferrov_detvag_lacre ( est_log_generico                  in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id                in             Conhec_Transp_ferrov.conhectransp_id%TYPE
                                         , en_ctferrovdetvag_id              in             Conhec_Transp.id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit                  in             varchar2
                                         , en_dm_ind_emit                    in             number
                                         , en_dm_ind_oper                    in             number
                                         , ev_cod_part                       in             varchar2
                                         , ev_cod_mod                        in             varchar2
                                         , ev_serie                          in             varchar2
                                         , en_nro_ct                         in             number
                                         , en_nro_vagao                      in             number)

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_FERROV_DETVAG_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_FERROV_DETVAG_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS || ' = ' || en_nro_vagao;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_FERROV_DETVAG_LACRE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_fer_detvag_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_fer_detvag_lacre.count > 0 then
      --
      for i in vt_tab_csf_ct_fer_detvag_lacre.first..vt_tab_csf_ct_fer_detvag_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_lacre := null;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_lacre.ctferrovdetvag_id  := en_ctferrovdetvag_id;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_lacre.nro_lacre          := trim(vt_tab_csf_ct_fer_detvag_lacre(i).nro_lacre);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos lacres contidos no vagão.
         pk_csf_api_ct.pkb_integr_ct_fer_detvag_lacre( est_log_generico    => est_log_generico
                                                     , est_row_ct_ferrov_detvag_lacre => pk_csf_api_ct.gt_row_ct_ferrov_detvag_lacre
                                                     , en_conhectransp_id  => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrov_detvag_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_ferrov_detvag_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do detalhes dos Vagões
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctferrovdcl_detvag ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp_ferrov.conhectransp_id%TYPE
                                     , en_ctferrovdcl_id          in             ctferrov_dcl.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number
                                     , ev_serie_dcl               in             varchar2
                                     , en_nro_dcl                 in             number
                                     , ed_dt_emissao              in             date )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTFERROVDCL_DETVAG') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CAP_TON' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TIPO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_REAL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_BC_FRETE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTFERROVDCL_DETVAG');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS || ' = ' || '''' || ev_serie_dcl || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS || ' = ' || en_nro_dcl;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS || ' = ' || '''' || ed_dt_emissao  || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTFERROVDCL_DETVAG' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctferrovdcl_detvag;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrovdcl_detvag fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctferrovdcl_detvag.count > 0 then
      --
      for i in vt_tab_csf_ctferrovdcl_detvag.first..vt_tab_csf_ctferrovdcl_detvag.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag := null;
         --
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag.ctferrovdcl_id  := en_ctferrovdcl_id;
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag.nro_vagao       := vt_tab_csf_ctferrovdcl_detvag(i).nro_vagao;
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag.cap_ton         := vt_tab_csf_ctferrovdcl_detvag(i).cap_ton;
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag.tipo_vagao      := vt_tab_csf_ctferrovdcl_detvag(i).tipo_vagao;
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag.peso_real       := vt_tab_csf_ctferrovdcl_detvag(i).peso_real;
         pk_csf_api_ct.gt_row_ctferrovdcl_detvag.peso_bc_frete   := vt_tab_csf_ctferrovdcl_detvag(i).peso_bc_frete;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos detalhes dos Vagões
         pk_csf_api_ct.pkb_integr_ctferrovdcl_detvag ( est_log_generico        => est_log_generico
                                                     , est_row_ctferr_detvag   => pk_csf_api_ct.gt_row_ctferrovdcl_detvag
                                                     , en_conhectransp_id      => en_conhectransp_id);
         --
         vn_fase := 9;
         --
         --Chama procedimento de leitura das informações dos containeres contidos no vagão com DCL.
         pkb_ler_ctferrovdcldetvag_cont ( est_log_generico           => est_log_generico
                                        , en_conhectransp_id         => en_conhectransp_id
                                        , en_ctferrovdcldetvag_id    => pk_csf_api_ct.gt_row_ctferrovdcl_detvag.id
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                        , en_dm_ind_emit             => en_dm_ind_emit
                                        , en_dm_ind_oper             => en_dm_ind_oper
                                        , ev_cod_part                => ev_cod_part
                                        , ev_cod_mod                 => ev_cod_mod
                                        , ev_serie                   => ev_serie
                                        , en_nro_ct                  => en_nro_ct
                                        , ev_serie_dcl               => ev_serie_dcl
                                        , en_nro_dcl                 => en_nro_dcl
                                        , ed_dt_emissao              => ed_dt_emissao
                                        , en_nro_vagao               => pk_csf_api_ct.gt_row_ctferrovdcl_detvag.nro_vagao );
         vn_fase := 10;
         --
         --Chama procedimento de leitura das informações dos Lacres dos vagões do DCL.
         pkb_ler_ctferdetvag_lacre ( est_log_generico           => est_log_generico
                                   , en_conhectransp_id         => en_conhectransp_id
                                   , en_ctferrovdcldetvag_id    => pk_csf_api_ct.gt_row_ctferrovdcl_detvag.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                   , en_dm_ind_emit             => en_dm_ind_emit
                                   , en_dm_ind_oper             => en_dm_ind_oper
                                   , ev_cod_part                => ev_cod_part
                                   , ev_cod_mod                 => ev_cod_mod
                                   , ev_serie                   => ev_serie
                                   , en_nro_ct                  => en_nro_ct
                                   , ev_serie_dcl               => ev_serie_dcl
                                   , en_nro_dcl                 => en_nro_dcl
                                   , ed_dt_emissao              => ed_dt_emissao
                                   , en_nro_vagao               => pk_csf_api_ct.gt_row_ctferrovdcl_detvag.nro_vagao );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrovdcl_detvag fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctferrovdcl_detvag;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Rateio das NFe de Vagões.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_ferrov_detvag_nfe ( est_log_generico             in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id           in             Conhec_Transp.id%TYPE
                                       , en_ctferrovdetvag_id         in             ct_ferrov_detvag.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit             in             varchar2
                                       , en_dm_ind_emit               in             number
                                       , en_dm_ind_oper               in             number
                                       , ev_cod_part                  in             varchar2
                                       , ev_cod_mod                   in             varchar2
                                       , ev_serie                     in             varchar2
                                       , en_nro_ct                    in             number
                                       , en_nro_vagao                 in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_FERROV_DETVAG_NFE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_RAT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_FERROV_DETVAG_NFE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS || ' = ' || en_nro_vagao;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_FERROV_DETVAG_NFE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_fer_detvag_nfe;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_nfe fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_fer_detvag_nfe.count > 0 then
      --
      for i in vt_tab_csf_ct_fer_detvag_nfe.first..vt_tab_csf_ct_fer_detvag_nfe.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nfe := null;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nfe.ctferrovdetvag_id  := en_ctferrovdetvag_id;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nfe.nro_chave_nfe      := trim(vt_tab_csf_ct_fer_detvag_nfe(i).nro_chave_nfe);
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nfe.peso_rat           := vt_tab_csf_ct_fer_detvag_nfe(i).peso_rat;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que valida as Informações da NFe do remetente
         pk_csf_api_ct.pkb_integr_ct_fer_detvag_nfe( est_log_generico      => est_log_generico
                                                   , est_row_ct_ferrov_detvag_nfe => pk_csf_api_ct.gt_row_ct_ferrov_detvag_nfe
                                                   , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_nfe fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_ferrov_detvag_nfe;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Rateio das NF de Vagões.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_ferrov_detvag_nf  ( est_log_generico            in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id          in             Conhec_Transp.id%TYPE
                                       , en_ctferrovdetvag_id        in             Conhec_Transp_Rem.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit            in             varchar2
                                       , en_dm_ind_emit              in             number
                                       , en_dm_ind_oper              in             number
                                       , ev_cod_part                 in             varchar2
                                       , ev_cod_mod                  in             varchar2
                                       , ev_serie                    in             varchar2
                                       , en_nro_ct                   in             number
                                       , en_nro_vagao                in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_FERROV_DETVAG_NF') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_RAT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_FERROV_DETVAG_NF');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS || ' = ' || en_nro_vagao;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_FERROV_DETVAG_NF' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_ferrov_detvag_nf;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_nf fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_ferrov_detvag_nf.count > 0 then
      --
      for i in vt_tab_csf_ct_ferrov_detvag_nf.first..vt_tab_csf_ct_ferrov_detvag_nf.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nf := null;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nf.ctferrovdetvag_id    := en_ctferrovdetvag_id;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nf.nro_nf               := trim(vt_tab_csf_ct_ferrov_detvag_nf(i).nro_nf);
         pk_csf_api_ct.gt_row_ct_ferrov_detvag_nf.peso_rat             := trim(vt_tab_csf_ct_ferrov_detvag_nf(i).peso_rat);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações das Notas Fiscais NÃO eletrônicas do remetente
         pk_csf_api_ct.pkb_integr_ct_ferrov_detvag_nf( est_log_generico            => est_log_generico
                                                     , est_row_ct_ferrov_detvag_nf => pk_csf_api_ct.gt_row_ct_ferrov_detvag_nf
                                                     , en_conhectransp_id          => en_conhectransp_id
                                                     );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag_nf fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
            

      end;
      --
end pkb_ler_ct_ferrov_detvag_nf;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do detalhes dos Vagões
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_ferrov_detvag ( est_log_generico           in out nocopy  dbms_sql.number_table
                                   , en_conhectransp_id         in             Conhec_Transp.id%TYPE
                                   , en_conhectranspferrov_id   in             conhec_transp_ferrov.id%TYPE
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           in             varchar2
                                   , en_dm_ind_emit             in             number
                                   , en_dm_ind_oper             in             number
                                   , ev_cod_part                in             varchar2
                                   , ev_cod_mod                 in             varchar2
                                   , ev_serie                   in             varchar2
                                   , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_FERROV_DETVAG') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CAP_TON' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TIPO_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_REAL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_BC_FRETE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_FERROV_DETVAG');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_FERROV_DETVAG' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_ferrov_detvag;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_ferrov_detvag.count > 0 then
      --
      for i in vt_tab_csf_ct_ferrov_detvag.first..vt_tab_csf_ct_ferrov_detvag.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag := null;
         --
         pk_csf_api_ct.gt_row_ct_ferrov_detvag.conhectranspferrov_id     := en_conhectranspferrov_id;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag.nro_vagao                 := vt_tab_csf_ct_ferrov_detvag(i).nro_vagao;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag.cap_ton                   := vt_tab_csf_ct_ferrov_detvag(i).cap_ton;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag.tipo_vagao                := vt_tab_csf_ct_ferrov_detvag(i).tipo_vagao;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag.peso_real                 := vt_tab_csf_ct_ferrov_detvag(i).peso_real;
         pk_csf_api_ct.gt_row_ct_ferrov_detvag.peso_bc_frete             := vt_tab_csf_ct_ferrov_detvag(i).peso_bc_frete;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos detalhes dos Vagões
         pk_csf_api_ct.pkb_integr_ct_ferrov_detvag( est_log_generico    => est_log_generico
                                                  , est_row_ct_ferrov_detvag => pk_csf_api_ct.gt_row_ct_ferrov_detvag
                                                  , en_conhectransp_id  => en_conhectransp_id);
         --
         pkb_ler_ct_ferrov_detvag_cont ( est_log_generico         => est_log_generico
                                       , en_conhectransp_id       => en_conhectransp_id
                                       , en_ctferrovdetvag_id     => pk_csf_api_ct.gt_row_ct_ferrov_detvag.id
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit         => ev_cpf_cnpj_emit
                                       , en_dm_ind_emit           => en_dm_ind_emit
                                       , en_dm_ind_oper           => en_dm_ind_oper
                                       , ev_cod_part              => ev_cod_part
                                       , ev_cod_mod               => ev_cod_mod
                                       , ev_serie                 => ev_serie
                                       , en_nro_ct                => en_nro_ct
                                       , en_nro_vagao             => vt_tab_csf_ct_ferrov_detvag(i).nro_vagao );
         --
         pkb_ler_ct_ferrov_detvag_lacre ( est_log_generico         => est_log_generico
                                        , en_conhectransp_id       => en_conhectransp_id
                                        , en_ctferrovdetvag_id     => pk_csf_api_ct.gt_row_ct_ferrov_detvag.id
                                      --| parâmetros de chave                                                    
                                        , ev_cpf_cnpj_emit         => ev_cpf_cnpj_emit                           
                                        , en_dm_ind_emit           => en_dm_ind_emit                             
                                        , en_dm_ind_oper           => en_dm_ind_oper                             
                                        , ev_cod_part              => ev_cod_part                                
                                        , ev_cod_mod               => ev_cod_mod                                 
                                        , ev_serie                 => ev_serie
                                        , en_nro_ct                => en_nro_ct                                  
                                        , en_nro_vagao             => vt_tab_csf_ct_ferrov_detvag(i).nro_vagao );
         --
         pkb_ler_ct_ferrov_detvag_nfe ( est_log_generico           => est_log_generico
                                      , en_conhectransp_id         => en_conhectransp_id                         
                                      , en_ctferrovdetvag_id       => pk_csf_api_ct.gt_row_ct_ferrov_detvag.id
                                    --| parâmetros de chave                                                      
                                      , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                      , en_dm_ind_emit             => en_dm_ind_emit                             
                                      , en_dm_ind_oper             => en_dm_ind_oper
                                      , ev_cod_part                => ev_cod_part                                
                                      , ev_cod_mod                 => ev_cod_mod
                                      , ev_serie                   => ev_serie                                   
                                      , en_nro_ct                  => en_nro_ct                                  
                                      , en_nro_vagao               => vt_tab_csf_ct_ferrov_detvag(i).nro_vagao );
         --
         pkb_ler_ct_ferrov_detvag_nf  ( est_log_generico           => est_log_generico
                                      , en_conhectransp_id         => en_conhectransp_id
                                      , en_ctferrovdetvag_id       => pk_csf_api_ct.gt_row_ct_ferrov_detvag.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit                           
                                      , en_dm_ind_emit             => en_dm_ind_emit
                                      , en_dm_ind_oper             => en_dm_ind_oper                             
                                      , ev_cod_part                => ev_cod_part                                
                                      , ev_cod_mod                 => ev_cod_mod                                 
                                      , ev_serie                   => ev_serie                                   
                                      , en_nro_ct                  => en_nro_ct
                                      , en_nro_vagao               => vt_tab_csf_ct_ferrov_detvag(i).nro_vagao );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_ferrov_detvag fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_ferrov_detvag;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações da DCL
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctferrov_dcl ( est_log_generico           in out nocopy  dbms_sql.number_table
                               , en_conhectransp_id         in             conhec_transp_ferrov.conhectransp_id%TYPE
                               , en_conhectranspferrov_id   in             conhec_transp_ferrov.id%TYPE
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           in             varchar2
                               , en_dm_ind_emit             in             number
                               , en_dm_ind_oper             in             number
                               , ev_cod_part                in             varchar2
                               , ev_cod_mod                 in             varchar2
                               , ev_serie                   in             varchar2
                               , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTFERROV_DCL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DCL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_VAGAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_CALC_TON' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TARIFA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_FRETE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_SERV_ACES' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_SERV' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ID_TREM' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTFERROV_DCL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTFERROV_DCL' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctferrov_dcl;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrov_dcl fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctferrov_dcl.count > 0 then
      --
      for i in vt_tab_csf_ctferrov_dcl.first..vt_tab_csf_ctferrov_dcl.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctferrov_dcl := null;
         --
         pk_csf_api_ct.gt_row_ctferrov_dcl.conhectranspferrov_id := en_conhectranspferrov_id;
         pk_csf_api_ct.gt_row_ctferrov_dcl.serie                 := trim(vt_tab_csf_ctferrov_dcl(i).serie_dcl);
         pk_csf_api_ct.gt_row_ctferrov_dcl.nro_dcl               := vt_tab_csf_ctferrov_dcl(i).nro_dcl;
         pk_csf_api_ct.gt_row_ctferrov_dcl.dt_emissao            := vt_tab_csf_ctferrov_dcl(i).dt_emissao;
         pk_csf_api_ct.gt_row_ctferrov_dcl.qtde_vagao            := vt_tab_csf_ctferrov_dcl(i).qtde_vagao;
         pk_csf_api_ct.gt_row_ctferrov_dcl.peso_calc_ton         := vt_tab_csf_ctferrov_dcl(i).peso_calc_ton;
         pk_csf_api_ct.gt_row_ctferrov_dcl.vl_tarifa             := vt_tab_csf_ctferrov_dcl(i).vl_tarifa;
         pk_csf_api_ct.gt_row_ctferrov_dcl.vl_frete              := vt_tab_csf_ctferrov_dcl(i).vl_frete;
         pk_csf_api_ct.gt_row_ctferrov_dcl.vl_serv_aces          := vt_tab_csf_ctferrov_dcl(i).vl_serv_aces;
         pk_csf_api_ct.gt_row_ctferrov_dcl.vl_total_serv         := vt_tab_csf_ctferrov_dcl(i).vl_total_serv;
         pk_csf_api_ct.gt_row_ctferrov_dcl.id_trem               := vt_tab_csf_ctferrov_dcl(i).id_trem;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra a DCL.
         pk_csf_api_ct.pkb_integr_ctferrov_dcl ( est_log_generico    => est_log_generico
                                               , est_row_ctferr_dcl  => pk_csf_api_ct.gt_row_ctferrov_dcl
                                               , en_conhectransp_id  => en_conhectransp_id);
         --
         vn_fase := 9;
         --
         --Chama procedimento de leitura das informações de detalhes dos Vagões.
         pkb_ler_ctferrovdcl_detvag ( est_log_generico          => est_log_generico
                                    , en_conhectransp_id        => en_conhectransp_id
                                    , en_ctferrovdcl_id         => pk_csf_api_ct.gt_row_ctferrov_dcl.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit          => ev_cpf_cnpj_emit
                                    , en_dm_ind_emit            => en_dm_ind_emit
                                    , en_dm_ind_oper            => en_dm_ind_oper
                                    , ev_cod_part               => ev_cod_part
                                    , ev_cod_mod                => ev_cod_mod
                                    , ev_serie                  => ev_serie
                                    , en_nro_ct                 => en_nro_ct
                                    , ev_serie_dcl              => pk_csf_api_ct.gt_row_ctferrov_dcl.serie
                                    , en_nro_dcl                => pk_csf_api_ct.gt_row_ctferrov_dcl.nro_dcl
                                    , ed_dt_emissao             => pk_csf_api_ct.gt_row_ctferrov_dcl.dt_emissao );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrov_dcl fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctferrov_dcl;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações com Dados do endereço da ferrovia substituída
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctferrov_subst ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             conhec_transp_ferrov.conhectransp_id%TYPE
                                 , en_conhectranspferrov_id   in             conhec_transp_ferrov.id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTFERROV_SUBST') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_INT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTFERROV_SUBST');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTFERROV_SUBST' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctferrov_subst;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrov_subst fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctferrov_subst.count > 0 then
      --
      for i in vt_tab_csf_ctferrov_subst.first..vt_tab_csf_ctferrov_subst.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctferrov_subst := null;
         --
         pk_csf_api_ct.gt_row_ctferrov_subst.conhectranspferrov_id := en_conhectranspferrov_id;
         pk_csf_api_ct.gt_row_ctferrov_subst.cnpj                  := trim(vt_tab_csf_ctferrov_subst(i).cnpj);
         pk_csf_api_ct.gt_row_ctferrov_subst.cod_int               := vt_tab_csf_ctferrov_subst(i).cod_int;
         pk_csf_api_ct.gt_row_ctferrov_subst.ie                    := trim(vt_tab_csf_ctferrov_subst(i).ie);
         pk_csf_api_ct.gt_row_ctferrov_subst.nome                  := trim(vt_tab_csf_ctferrov_subst(i).nome);
         pk_csf_api_ct.gt_row_ctferrov_subst.lograd                := trim(vt_tab_csf_ctferrov_subst(i).lograd);
         pk_csf_api_ct.gt_row_ctferrov_subst.nro                   := trim(vt_tab_csf_ctferrov_subst(i).nro);
         pk_csf_api_ct.gt_row_ctferrov_subst.compl                 := trim(vt_tab_csf_ctferrov_subst(i).compl);
         pk_csf_api_ct.gt_row_ctferrov_subst.bairro                := trim(vt_tab_csf_ctferrov_subst(i).bairro);
         pk_csf_api_ct.gt_row_ctferrov_subst.ibge_cidade           := trim(vt_tab_csf_ctferrov_subst(i).ibge_cidade);
         pk_csf_api_ct.gt_row_ctferrov_subst.descr_cidade          := vt_tab_csf_ctferrov_subst(i).descr_cidade;
         pk_csf_api_ct.gt_row_ctferrov_subst.cep                   := trim(vt_tab_csf_ctferrov_subst(i).cep);
         pk_csf_api_ct.gt_row_ctferrov_subst.uf                    := upper(trim(vt_tab_csf_ctferrov_subst(i).uf));
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações com Dados do endereço da ferrovia substituída.
         pk_csf_api_ct.pkb_integr_ctferrov_subst ( est_log_generico      => est_log_generico
                                                 , est_row_ctferr_subst  => pk_csf_api_ct.gt_row_ctferrov_subst
                                                 , en_conhectransp_id    => en_conhectransp_id);
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctferrov_subst fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctferrov_subst;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do modal Ferroviário
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_ferrov ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp_ferrov.conhectransp_id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_FERROV') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_TRAF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FLUXO_FERROV' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ID_TREM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_FRETE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_RESP_FAT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_FERR_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE_ORIG' || GV_ASPAS; --Atualização CTe 3.0
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_FERROV');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_FERROV' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_ferrov;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_ferrov fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_ferrov.count > 0 then
      --
      for i in vt_tab_csf_ct_ferrov.first..vt_tab_csf_ct_ferrov.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_ferrov := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.conhectransp_id    := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.dm_tp_traf         := vt_tab_csf_ct_ferrov(i).dm_tp_traf;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.fluxo_ferrov       := vt_tab_csf_ct_ferrov(i).fluxo_ferrov;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.id_trem            := vt_tab_csf_ct_ferrov(i).id_trem;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.vl_frete           := vt_tab_csf_ct_ferrov(i).vl_frete;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.dm_resp_fat        := vt_tab_csf_ct_ferrov(i).dm_resp_fat;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.dm_ferr_emit       := vt_tab_csf_ct_ferrov(i).dm_ferr_emit;
         pk_csf_api_ct.gt_row_conhec_transp_ferrov.nro_chave_cte_orig := vt_tab_csf_ct_ferrov(i).nro_chave_cte_orig; --Atualização CTe 3.0
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do modal Ferroviário.
         pk_csf_api_ct.pkb_integr_ct_ferrov ( est_log_generico    => est_log_generico
                                            , est_row_ct_ferrov   => pk_csf_api_ct.gt_row_conhec_transp_ferrov
                                            , en_conhectransp_id  => en_conhectransp_id);
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações do Dados do endereço da ferrovia substituída.
         pkb_ler_ctferrov_subst ( est_log_generico           => est_log_generico
                                , en_conhectransp_id         => en_conhectransp_id
                                , en_conhectranspferrov_id   => pk_csf_api_ct.gt_row_conhec_transp_ferrov.id
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                , en_dm_ind_emit             => en_dm_ind_emit
                                , en_dm_ind_oper             => en_dm_ind_oper
                                , ev_cod_part                => ev_cod_part
                                , ev_cod_mod                 => ev_cod_mod
                                , ev_serie                   => ev_serie
                                , en_nro_ct                  => en_nro_ct );
         vn_fase := 10;
         --
         -- Chama procedimento que lê as informações da DCL.
         pkb_ler_ctferrov_dcl ( est_log_generico           => est_log_generico
                              , en_conhectransp_id         => en_conhectransp_id
                              , en_conhectranspferrov_id   => pk_csf_api_ct.gt_row_conhec_transp_ferrov.id
                            --| parâmetros de chave
                              , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                              , en_dm_ind_emit             => en_dm_ind_emit
                              , en_dm_ind_oper             => en_dm_ind_oper
                              , ev_cod_part                => ev_cod_part
                              , ev_cod_mod                 => ev_cod_mod
                              , ev_serie                   => ev_serie
                              , en_nro_ct                  => en_nro_ct );
      --
      pkb_ler_ct_ferrov_detvag ( est_log_generico         => est_log_generico
                               , en_conhectransp_id       => en_conhectransp_id
                               , en_conhectranspferrov_id => pk_csf_api_ct.gt_row_conhec_transp_ferrov.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit         => ev_cpf_cnpj_emit
                               , en_dm_ind_emit           => en_dm_ind_emit  
                               , en_dm_ind_oper           => en_dm_ind_oper                              
                               , ev_cod_part              => ev_cod_part                                 
                               , ev_cod_mod               => ev_cod_mod      
                               , ev_serie                 => ev_serie                                    
                               , en_nro_ct                => en_nro_ct );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_ferrov fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_ferrov;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos lacres dos cointainers da qtde da carga.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctaquav_lacre ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_aquav.conhectransp_id%TYPE
                                , en_conhectranspaquav_id    in             conhec_transp_aquav.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTAQUAV_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTAQUAV_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTAQUAV_LACRE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctaquav_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctaquav_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctaquav_lacre.count > 0 then
      --
      for i in vt_tab_csf_ctaquav_lacre.first..vt_tab_csf_ctaquav_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctaquav_lacre := null;
         --
         pk_csf_api_ct.gt_row_ctaquav_lacre.conhectranspaquav_id := en_conhectranspaquav_id;
         pk_csf_api_ct.gt_row_ctaquav_lacre.nro_lacre            := trim(vt_tab_csf_ctaquav_lacre(i).nro_lacre);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos lacres dos cointainers da qtde da carga.
         pk_csf_api_ct.pkb_integr_ctaquav_lacre ( est_log_generico   => est_log_generico
                                                , est_row_ctaquav_lacre  => pk_csf_api_ct.gt_row_ctaquav_lacre
                                                , en_conhectransp_id     => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctaquav_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctaquav_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do modal Aquaviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_aquav ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp_aquav.conhectransp_id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_AQUAV') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_PREST_BC_AFRMM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_AFRMM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_BOOKING' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CTRL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_NAVIO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_VIAGEM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_DIRECAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PORT_EMB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PORT_TRANSB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PORT_DEST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_NAV' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IRIN' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_AQUAV');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_AQUAV' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_aquav;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_aquav fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_aquav.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_aquav.first..vt_tab_csf_conhec_transp_aquav.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_aquav := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_aquav.conhectransp_id    := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.vl_prest_bc_afrmm  := vt_tab_csf_conhec_transp_aquav(i).vl_prest_bc_afrmm;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.vl_afrmm           := vt_tab_csf_conhec_transp_aquav(i).vl_afrmm;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.nro_booking        := vt_tab_csf_conhec_transp_aquav(i).nro_booking;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.nro_ctrl           := vt_tab_csf_conhec_transp_aquav(i).nro_ctrl;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.ident_navio        := vt_tab_csf_conhec_transp_aquav(i).ident_navio;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.nro_viagem         := vt_tab_csf_conhec_transp_aquav(i).nro_viagem;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.dm_direcao         := vt_tab_csf_conhec_transp_aquav(i).dm_direcao;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.port_emb           := vt_tab_csf_conhec_transp_aquav(i).port_emb;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.port_transb        := vt_tab_csf_conhec_transp_aquav(i).port_transb;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.port_dest          := vt_tab_csf_conhec_transp_aquav(i).port_dest;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.dm_tp_nav          := vt_tab_csf_conhec_transp_aquav(i).dm_tp_nav;
         pk_csf_api_ct.gt_row_conhec_transp_aquav.irin               := vt_tab_csf_conhec_transp_aquav(i).irin;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do modal Aquaviário.
         pk_csf_api_ct.pkb_integr_conhec_transp_aquav ( est_log_generico    => est_log_generico
                                                      , est_row_ct_aquav    => pk_csf_api_ct.gt_row_conhec_transp_aquav
                                                      , en_conhectransp_id  => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que Lê as informações dos lacres dos cointainers da qtde da carga.
         pkb_ler_ctaquav_lacre ( est_log_generico         => est_log_generico
                               , en_conhectransp_id       => en_conhectransp_id
                               , en_conhectranspaquav_id  => pk_csf_api_ct.gt_row_conhec_transp_aquav.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit         => ev_cpf_cnpj_emit
                               , en_dm_ind_emit           => en_dm_ind_emit
                               , en_dm_ind_oper           => en_dm_ind_oper
                               , ev_cod_part              => ev_cod_part
                               , ev_cod_mod               => ev_cod_mod
                               , ev_serie                 => ev_serie
                               , en_nro_ct                => en_nro_ct);
        --
        pkb_ler_ct_aquav_cont ( est_log_generico        => est_log_generico
                              , en_conhectransp_id      => en_conhectransp_id
                              , en_conhectranspaquav_id => pk_csf_api_ct.gt_row_conhec_transp_aquav.id
                            --| parâmetros de chave
                              , ev_cpf_cnpj_emit        => ev_cpf_cnpj_emit
                              , en_dm_ind_emit          => en_dm_ind_emit
                              , en_dm_ind_oper          => en_dm_ind_oper
                              , ev_cod_part             => ev_cod_part
                              , ev_cod_mod              => ev_cod_mod
                              , ev_serie                => ev_serie
                              , en_nro_ct               => en_nro_ct );
        --
        pkb_ler_ct_aquav_balsa ( est_log_generico         => est_log_generico
                               , en_conhectransp_id       => en_conhectransp_id
                               , en_conhectranspaquav_id  => pk_csf_api_ct.gt_row_conhec_transp_aquav.id
                               --| parâmetros de chave  
                               , ev_cpf_cnpj_emit         => ev_cpf_cnpj_emit
                               , en_dm_ind_emit           => en_dm_ind_emit
                               , en_dm_ind_oper           => en_dm_ind_oper  
                               , ev_cod_part              => ev_cod_part     
                               , ev_cod_mod               => ev_cod_mod      
                               , ev_serie                 => ev_serie        
                               , en_nro_ct                => en_nro_ct );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_aquav fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_aquav;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações das dimensões da carga do modal Aéreo.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aereo_dimen ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectranspaereo_id    in out nocopy  conhec_transp_aereo.id%TYPE
                                 , en_conhectransp_id         in             Conhec_Transp.id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number)
                               --  , ev_dimen                   in             varchar2 )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AEREO_DIMEN') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DIMENSAO' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AEREO_DIMEN');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AEREO_DIMEN' || chr(10);
   --
   -- recupera as informações das dimensões da carga do modal Aéreo não integradas
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aereo_dimen;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_dimen fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aereo_dimen.count > 0 then
      --
      for i in vt_tab_csf_ct_aereo_dimen.first..vt_tab_csf_ct_aereo_dimen.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aereo_dimen := null;
         --
         pk_csf_api_ct.gt_row_ct_aereo_dimen.conhectranspaereo_id   := en_conhectranspaereo_id;
         pk_csf_api_ct.gt_row_ct_aereo_dimen.dimensao               := trim(vt_tab_csf_ct_aereo_dimen(i).dimensao);
         --
         -- Chama procedimento que integra as informações do modal Aéreo.
         pk_csf_api_ct.pkb_integr_ct_aereo_dimen ( est_log_generico   => est_log_generico
                                                 , est_row_ct_aereo_dimen   => pk_csf_api_ct.gt_row_ct_aereo_dimen
                                                 , en_conhectransp_id => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_dimen fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aereo_dimen;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de manuseio da carga do modal Aéreo.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aereo_inf_man ( est_log_generico           in out nocopy  dbms_sql.number_table
                                   , en_conhectranspaereo_id    in out nocopy  conhec_transp_aereo.id%TYPE
                                   , en_conhectransp_id         in             Conhec_Transp.id%TYPE
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           in             varchar2
                                   , en_dm_ind_emit             in             number
                                   , en_dm_ind_oper             in             number
                                   , ev_cod_part                in             varchar2
                                   , ev_cod_mod                 in             varchar2
                                   , ev_serie                   in             varchar2
                                   , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AEREO_INF_MAN') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_MANUSEIO' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AEREO_INF_MAN');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AEREO_INF_MAN' || chr(10);
   --
   -- recupera as informações das dimensões da carga do modal Aéreo não integradas
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aereo_inf_man;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_inf_man fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aereo_inf_man.count > 0 then
      --
      for i in vt_tab_csf_ct_aereo_inf_man.first..vt_tab_csf_ct_aereo_inf_man.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aereo_inf_man := null;
         --
         pk_csf_api_ct.gt_row_ct_aereo_inf_man.conhectranspaereo_id := en_conhectranspaereo_id;
         pk_csf_api_ct.gt_row_ct_aereo_inf_man.dm_manuseio          := vt_tab_csf_ct_aereo_inf_man(i).dm_manuseio;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do modal Aéreo.
         pk_csf_api_ct.pkb_integr_ct_aereo_inf_man( est_log_generico   => est_log_generico
                                                  , est_row_ct_aereo_inf_man   => pk_csf_api_ct.gt_row_ct_aereo_inf_man
                                                  , en_conhectransp_id => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_inf_man fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aereo_inf_man;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de Transporte de produtos classificados pela ONU como perigosos. - Atualização 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aereo_peri ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectranspaereo_id    in out nocopy  ct_aereo_peri.id%TYPE
                                , en_conhectransp_id         in             Conhec_Transp.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AEREO_PERI') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_ONU' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_TOT_EMB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_TOT_ATR_PERI' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_UNID_MED' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AEREO_PERI');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AEREO_PERI' || chr(10);
   --
   -- recupera as informações das dimensões da carga do modal Aéreo não integradas
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aereo_peri;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_peri fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aereo_peri.count > 0 then
      --
      for i in vt_tab_csf_ct_aereo_peri.first..vt_tab_csf_ct_aereo_peri.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aereo_peri := null;
         --
         pk_csf_api_ct.gt_row_ct_aereo_peri.conhectranspaereo_id := en_conhectranspaereo_id;
         pk_csf_api_ct.gt_row_ct_aereo_peri.nro_onu              := vt_tab_csf_ct_aereo_peri(i).nro_onu;
         pk_csf_api_ct.gt_row_ct_aereo_peri.qtde_tot_emb         := vt_tab_csf_ct_aereo_peri(i).qtde_tot_emb;
         pk_csf_api_ct.gt_row_ct_aereo_peri.qtde_tot_atr_peri    := vt_tab_csf_ct_aereo_peri(i).qtde_tot_atr_peri;
         pk_csf_api_ct.gt_row_ct_aereo_peri.dm_unid_med          := vt_tab_csf_ct_aereo_peri(i).dm_unid_med;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Transporte de produtos classificados pela ONU como perigosos.
         pk_csf_api_ct.pkb_integr_ct_aereo_peri( est_log_generico        => est_log_generico
                                               , est_row_ct_aereo_peri   => pk_csf_api_ct.gt_row_ct_aereo_peri
                                               , en_conhectransp_id      => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aereo_peri fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aereo_peri;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do modal Aéreo.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_aereo ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp_aereo.conhectransp_id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_AEREO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_MINUTA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV_ENTR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOJA_AG_EMISS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_IATA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TRECHO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_TARIFA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TARIFA' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_AEREO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_AEREO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_aereo;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_aereo fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_aereo.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_aereo.first..vt_tab_csf_conhec_transp_aereo.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_aereo := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_aereo.conhectransp_id   := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.nro_minuta        := vt_tab_csf_conhec_transp_aereo(i).nro_minuta;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.nro_oper          := vt_tab_csf_conhec_transp_aereo(i).nro_oper;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.dt_prev_entr      := vt_tab_csf_conhec_transp_aereo(i).dt_prev_entr;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.loja_ag_emiss     := vt_tab_csf_conhec_transp_aereo(i).loja_ag_emiss;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.cod_iata          := vt_tab_csf_conhec_transp_aereo(i).cod_iata;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.trecho            := vt_tab_csf_conhec_transp_aereo(i).trecho;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.cl                := vt_tab_csf_conhec_transp_aereo(i).cl;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.cod_tarifa        := vt_tab_csf_conhec_transp_aereo(i).cod_tarifa;
         pk_csf_api_ct.gt_row_conhec_transp_aereo.vl_tarifa         := vt_tab_csf_conhec_transp_aereo(i).vl_tarifa;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do modal Aéreo.
         pk_csf_api_ct.pkb_integr_conhec_transp_aereo ( est_log_generico   => est_log_generico
                                                      , est_row_ct_aereo   => pk_csf_api_ct.gt_row_conhec_transp_aereo
                                                      , en_conhectransp_id => en_conhectransp_id );
         --
         pkb_ler_ct_aereo_carg_esp ( est_log_generico           => est_log_generico
                                   , en_conhectransp_id         => en_conhectransp_id
                                   , en_conhectranspaereo_id    => pk_csf_api_ct.gt_row_conhec_transp_aereo.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                   , en_dm_ind_emit             => en_dm_ind_emit
                                   , en_dm_ind_oper             => en_dm_ind_oper
                                   , ev_cod_part                => ev_cod_part
                                   , ev_cod_mod                 => ev_cod_mod
                                   , ev_serie                   => ev_serie
                                   , en_nro_ct                  => en_nro_ct );
         --
         pkb_ler_ct_aereo_dimen ( est_log_generico           => est_log_generico
                                , en_conhectranspaereo_id    => pk_csf_api_ct.gt_row_conhec_transp_aereo.id
                                , en_conhectransp_id         => en_conhectransp_id
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit                           
                                , en_dm_ind_emit             => en_dm_ind_emit                             
                                , en_dm_ind_oper             => en_dm_ind_oper                             
                                , ev_cod_part                => ev_cod_part                                
                                , ev_cod_mod                 => ev_cod_mod                                 
                                , ev_serie                   => ev_serie                                   
                                , en_nro_ct                  => en_nro_ct );
         --
         pkb_ler_ct_aereo_inf_man ( est_log_generico          => est_log_generico
                                  , en_conhectranspaereo_id   => pk_csf_api_ct.gt_row_conhec_transp_aereo.id
                                  , en_conhectransp_id        => en_conhectransp_id                         
                                --| parâmetros de chave                                                     
                                  , ev_cpf_cnpj_emit          => ev_cpf_cnpj_emit                           
                                  , en_dm_ind_emit            => en_dm_ind_emit                             
                                  , en_dm_ind_oper            => en_dm_ind_oper                             
                                  , ev_cod_part               => ev_cod_part                                
                                  , ev_cod_mod                => ev_cod_mod                                 
                                  , ev_serie                  => ev_serie                                   
                                  , en_nro_ct                 => en_nro_ct );
         --
         pkb_ler_ct_aereo_peri ( est_log_generico          => est_log_generico
                               , en_conhectranspaereo_id   => pk_csf_api_ct.gt_row_conhec_transp_aereo.id
                               , en_conhectransp_id        => en_conhectransp_id                         
                             --| parâmetros de chave                                                     
                               , ev_cpf_cnpj_emit          => ev_cpf_cnpj_emit                           
                               , en_dm_ind_emit            => en_dm_ind_emit                             
                               , en_dm_ind_oper            => en_dm_ind_oper                             
                               , ev_cod_part               => ev_cod_part                                
                               , ev_cod_mod                => ev_cod_mod                                 
                               , ev_serie                  => ev_serie                                   
                               , en_nro_ct                 => en_nro_ct );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_aereo fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_aereo;
-----------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do(s) Motorista(s).
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_moto  ( est_log_generico           in out nocopy  dbms_sql.number_table
                               , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                               , en_conhectransprodo_id     in             conhec_transp_rodo.id%TYPE
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           in             varchar2
                               , en_dm_ind_emit             in             number
                               , en_dm_ind_oper             in             number
                               , ev_cod_part                in             varchar2
                               , ev_cod_mod                 in             varchar2
                               , ev_serie                   in             varchar2
                               , en_nro_ct                  in             number )

is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_MOTO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_MOTO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_MOTO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_moto;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_moto fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_moto.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_moto.first..vt_tab_csf_ctrodo_moto.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_moto := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_moto.conhectransprodo_id := en_conhectransprodo_id;
         pk_csf_api_ct.gt_row_ctrodo_moto.nome                := trim(vt_tab_csf_ctrodo_moto(i).nome);
         pk_csf_api_ct.gt_row_ctrodo_moto.cpf                 := trim(vt_tab_csf_ctrodo_moto(i).cpf);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do(s) Motorista(s)..
         pk_csf_api_ct.pkb_integr_ctrodo_moto ( est_log_generico      => est_log_generico
                                              , est_row_ctrodo_moto   => pk_csf_api_ct.gt_row_ctrodo_moto
                                              , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_moto fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_moto;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Dados dos Veículos.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_lacre  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                                , en_conhectransprodo_id     in             conhec_transp_rodo.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_LACRE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_lacre.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_lacre.first..vt_tab_csf_ctrodo_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_lacre := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_lacre.conhectransprodo_id := en_conhectransprodo_id;
         pk_csf_api_ct.gt_row_ctrodo_lacre.nro_lacre           := trim(vt_tab_csf_ctrodo_lacre(i).nro_lacre);

         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Dados dos Veículos.
         pk_csf_api_ct.pkb_integr_ctrodo_lacre ( est_log_generico        => est_log_generico
                                               , est_row_ctrodo_lacre    => pk_csf_api_ct.gt_row_ctrodo_lacre
                                               , en_conhectransp_id      => en_conhectransp_id );

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Proprietários do Veículo.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_veic_prop  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                    , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                                    , en_ctrodoveic_id           in             ctrodo_veic.id%TYPE
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit           in             varchar2
                                    , en_dm_ind_emit             in             number
                                    , en_dm_ind_oper             in             number
                                    , ev_cod_part                in             varchar2
                                    , ev_cod_mod                 in             varchar2
                                    , ev_serie                   in             varchar2
                                    , en_nro_ct                  in             number
                                    , ev_placa                   in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_VEIC_PROP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PLACA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'RNTRC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_PROP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_VEIC_PROP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'PLACA' || GV_ASPAS || ' = ' || '''' || ev_placa || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_VEIC_PROP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_veic_prop;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_veic_prop fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_veic_prop.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_veic_prop.first..vt_tab_csf_ctrodo_veic_prop.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_veic_prop := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.ctrodoveic_id := en_ctrodoveic_id;
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.cpf           := trim(vt_tab_csf_ctrodo_veic_prop(i).cpf);
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.cnpj          := trim(vt_tab_csf_ctrodo_veic_prop(i).cnpj);
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.rntrc         := trim(vt_tab_csf_ctrodo_veic_prop(i).rntrc);
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.nome          := trim(vt_tab_csf_ctrodo_veic_prop(i).nome);
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.ie            := trim(vt_tab_csf_ctrodo_veic_prop(i).ie);
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.uf            := upper(trim(vt_tab_csf_ctrodo_veic_prop(i).uf));
         pk_csf_api_ct.gt_row_ctrodo_veic_prop.dm_tp_prop    := vt_tab_csf_ctrodo_veic_prop(i).dm_tp_prop;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Proprietários do Veículo.
         pk_csf_api_ct.pkb_integr_ctrodo_veic_prop ( est_log_generico         => est_log_generico
                                                   , est_row_ctrodo_veic_prop => pk_csf_api_ct.gt_row_ctrodo_veic_prop
                                                   , en_conhectransp_id       => en_conhectransp_id );

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_veic_prop fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_veic_prop;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Dados dos Veículos.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_veic  ( est_log_generico           in out nocopy  dbms_sql.number_table
                               , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                               , en_conhectransprodo_id     in             conhec_transp_rodo.id%TYPE
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           in             varchar2
                               , en_dm_ind_emit             in             number
                               , en_dm_ind_oper             in             number
                               , ev_cod_part                in             varchar2
                               , ev_cod_mod                 in             varchar2
                               , ev_serie                   in             varchar2
                               , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_VEIC') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PLACA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_INT_VEIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'RENAVAM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TARA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CAP_KG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CAP_M3' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_VEIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_ROD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_CAR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_VEIC');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_VEIC' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_veic;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_veic fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_veic.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_veic.first..vt_tab_csf_ctrodo_veic.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_veic := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_veic.conhectransprodo_id := en_conhectransprodo_id;
         pk_csf_api_ct.gt_row_ctrodo_veic.cod_int_veic        := vt_tab_csf_ctrodo_veic(i).cod_int_veic;
         pk_csf_api_ct.gt_row_ctrodo_veic.renavam             := vt_tab_csf_ctrodo_veic(i).renavam;
         pk_csf_api_ct.gt_row_ctrodo_veic.placa               := trim(vt_tab_csf_ctrodo_veic(i).placa);
         pk_csf_api_ct.gt_row_ctrodo_veic.tara                := vt_tab_csf_ctrodo_veic(i).tara;
         pk_csf_api_ct.gt_row_ctrodo_veic.cap_kg              := vt_tab_csf_ctrodo_veic(i).cap_kg;
         pk_csf_api_ct.gt_row_ctrodo_veic.cap_m3              := vt_tab_csf_ctrodo_veic(i).cap_m3;
         pk_csf_api_ct.gt_row_ctrodo_veic.dm_tp_prop          := vt_tab_csf_ctrodo_veic(i).dm_tp_prop;
         pk_csf_api_ct.gt_row_ctrodo_veic.dm_tp_veic          := vt_tab_csf_ctrodo_veic(i).dm_tp_veic;
         pk_csf_api_ct.gt_row_ctrodo_veic.dm_tp_rod           := vt_tab_csf_ctrodo_veic(i).dm_tp_rod;
         pk_csf_api_ct.gt_row_ctrodo_veic.dm_tp_car           := vt_tab_csf_ctrodo_veic(i).dm_tp_car;
         pk_csf_api_ct.gt_row_ctrodo_veic.uf                  := upper(trim(vt_tab_csf_ctrodo_veic(i).uf));
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Dados dos Veículos.
         pk_csf_api_ct.pkb_integr_ctrodo_veic ( est_log_generico    => est_log_generico
                                              , est_row_ctrodo_veic => pk_csf_api_ct.gt_row_ctrodo_veic
                                              , en_conhectransp_id  => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações Proprietários do Veículo.
         pkb_ler_ctrodo_veic_prop  ( est_log_generico           => est_log_generico
                                   , en_conhectransp_id         => en_conhectransp_id
                                   , en_ctrodoveic_id           => pk_csf_api_ct.gt_row_ctrodo_veic.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                   , en_dm_ind_emit             => en_dm_ind_emit
                                   , en_dm_ind_oper             => en_dm_ind_oper
                                   , ev_cod_part                => ev_cod_part
                                   , ev_cod_mod                 => ev_cod_mod
                                   , ev_serie                   => ev_serie
                                   , en_nro_ct                  => en_nro_ct
                                   , ev_placa                   => pk_csf_api_ct.gt_row_ctrodo_veic.placa );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_veic fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_veic;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos dispositivos do Vale Pedágio.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_valeped_disp ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                                      , en_ctrodovaleped_id        in             ctrodo_valeped.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number
                                      , en_dm_resp_pagto           in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_VALEPED_DISP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_RESP_PAGTO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_DISP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMPR_FORN' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_VIG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DISP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_COMP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_VALEPED_DISP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
      if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_RESP_PAGTO' || GV_ASPAS || ' = ' || en_dm_resp_pagto;   
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_VALEPED_DISP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_valeped_disp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_valeped_disp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_valeped_disp.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_valeped_disp.first..vt_tab_csf_ctrodo_valeped_disp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp.ctrodovaleped_id := en_ctrodovaleped_id;
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp.dm_tp_disp       := vt_tab_csf_ctrodo_valeped_disp(i).dm_tp_disp;
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp.empr_forn        := vt_tab_csf_ctrodo_valeped_disp(i).empr_forn;
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp.dt_vig           := vt_tab_csf_ctrodo_valeped_disp(i).dt_vig;
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp.nro_disp         := vt_tab_csf_ctrodo_valeped_disp(i).nro_disp;
         pk_csf_api_ct.gt_row_ctrodo_valeped_disp.nro_comp         := vt_tab_csf_ctrodo_valeped_disp(i).nro_comp;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos dispositivos do Vale Pedágio.
         pk_csf_api_ct.pkb_integr_ctrodo_valeped_disp ( est_log_generico            => est_log_generico
                                                      , est_row_ctrodo_valeped_disp => pk_csf_api_ct.gt_row_ctrodo_valeped_disp
                                                      , en_conhectransp_id          => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_valeped_disp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_valeped_disp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Vale Pedágio.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_valeped ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                                 , en_conhectransprodo_id     in             conhec_transp_rodo.id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_VALEPED') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_RESP_PAGTO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_REG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_VALEPED' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_VALEPED');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_VALEPED' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_valeped;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_valeped fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_valeped.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_valeped.first..vt_tab_csf_ctrodo_valeped.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_valeped := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_valeped.conhectransprodo_id := en_conhectransprodo_id;
         pk_csf_api_ct.gt_row_ctrodo_valeped.nro_reg             := vt_tab_csf_ctrodo_valeped(i).nro_reg;
         pk_csf_api_ct.gt_row_ctrodo_valeped.vl_total_valeped    := vt_tab_csf_ctrodo_valeped(i).vl_total_valeped;
         pk_csf_api_ct.gt_row_ctrodo_valeped.dm_resp_pagto       := vt_tab_csf_ctrodo_valeped(i).dm_resp_pagto;

         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Vale Pedágio.
         pk_csf_api_ct.pkb_integr_ctrodo_valeped ( est_log_generico       => est_log_generico
                                                 , est_row_ctrodo_valeped => pk_csf_api_ct.gt_row_ctrodo_valeped
                                                 , en_conhectransp_id     => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que integra as informações dos dispositivos do Vale Pedágio.
         pkb_ler_ctrodo_valeped_disp ( est_log_generico           => est_log_generico
                                     , en_conhectransp_id         => en_conhectransp_id
                                     , en_ctrodovaleped_id        => pk_csf_api_ct.gt_row_ctrodo_valeped.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                     , en_dm_ind_emit             => en_dm_ind_emit
                                     , en_dm_ind_oper             => en_dm_ind_oper
                                     , ev_cod_part                => ev_cod_part
                                     , ev_cod_mod                 => ev_cod_mod
                                     , ev_serie                   => ev_serie
                                     , en_nro_ct                  => en_nro_ct
                                     , en_dm_resp_pagto           => pk_csf_api_ct.gt_row_ctrodo_valeped.dm_resp_pagto );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_valeped fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_valeped;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Vale Pedágio.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_inf_valeped ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                                     , en_conhectransprodo_id     in             conhec_transp_rodo.id%TYPE
                                     --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_INF_VALEPED') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ_FORN' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_COMPRA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ_PGTO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_VALE_PED' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_INF_VALEPED');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' ||(ev_cod_part) || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_INF_VALEPED' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_inf_valeped;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_inf_valeped fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_inf_valeped.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_inf_valeped.first..vt_tab_csf_ctrodo_inf_valeped.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_inf_valeped := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_inf_valeped.conhectransprodo_id := en_conhectransprodo_id;
         pk_csf_api_ct.gt_row_ctrodo_inf_valeped.cnpj_forn           := trim(vt_tab_csf_ctrodo_inf_valeped(i).cnpj_forn);
         pk_csf_api_ct.gt_row_ctrodo_inf_valeped.nro_compra          := trim(vt_tab_csf_ctrodo_inf_valeped(i).nro_compra);
         pk_csf_api_ct.gt_row_ctrodo_inf_valeped.cnpj_pgto           := trim(vt_tab_csf_ctrodo_inf_valeped(i).cnpj_pgto);
         pk_csf_api_ct.gt_row_ctrodo_inf_valeped.vl_vale_ped         := vt_tab_csf_ctrodo_inf_valeped(i).vl_vale_ped;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Vale Pedágio.
         pk_csf_api_ct.pkb_integr_ctrodo_inf_valeped ( est_log_generico               => est_log_generico
                                                     , est_row_ctrodo_inf_valeped     => pk_csf_api_ct.gt_row_ctrodo_inf_valeped
                                                     , en_conhectransp_id             => en_conhectransp_id );
        --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_inf_valeped fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_inf_valeped;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Ordens de Coleta associados.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrodo_occ ( est_log_generico           in out nocopy  dbms_sql.number_table
                             , en_conhectransp_id         in             conhec_transp_rodo.conhectransp_id%TYPE
                             , en_conhectransprodo_id     in             conhec_transp_rodo.id%TYPE
                           --| parâmetros de chave
                             , ev_cpf_cnpj_emit           in             varchar2
                             , en_dm_ind_emit             in             number
                             , en_dm_ind_oper             in             number
                             , ev_cod_part                in             varchar2
                             , ev_cod_mod                 in             varchar2
                             , ev_serie                   in             varchar2
                             , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTRODO_OCC') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_OCC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_OCC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_INT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTRODO_OCC');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTRODO_OCC' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrodo_occ;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_occ fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrodo_occ.count > 0 then
      --
      for i in vt_tab_csf_ctrodo_occ.first..vt_tab_csf_ctrodo_occ.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrodo_occ := null;
         --
         pk_csf_api_ct.gt_row_ctrodo_occ.conhectransprodo_id := en_conhectransprodo_id;
         pk_csf_api_ct.gt_row_ctrodo_occ.serie               := trim(vt_tab_csf_ctrodo_occ(i).serie);
         pk_csf_api_ct.gt_row_ctrodo_occ.nro_occ             := vt_tab_csf_ctrodo_occ(i).nro_occ;
         pk_csf_api_ct.gt_row_ctrodo_occ.dt_emissao          := vt_tab_csf_ctrodo_occ(i).dt_emissao;
         pk_csf_api_ct.gt_row_ctrodo_occ.cnpj                := trim(vt_tab_csf_ctrodo_occ(i).cnpj);
         pk_csf_api_ct.gt_row_ctrodo_occ.cod_int             := vt_tab_csf_ctrodo_occ(i).cod_int;
         pk_csf_api_ct.gt_row_ctrodo_occ.ie                  := trim(vt_tab_csf_ctrodo_occ(i).ie);
         pk_csf_api_ct.gt_row_ctrodo_occ.uf                  := upper(trim(vt_tab_csf_ctrodo_occ(i).uf));
         pk_csf_api_ct.gt_row_ctrodo_occ.fone                := trim(vt_tab_csf_ctrodo_occ(i).fone);

         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Ordens de Coleta associados.
         pk_csf_api_ct.pkb_integr_ctrodo_occ ( est_log_generico      => est_log_generico
                                             , est_row_ctrodo_occ    => pk_csf_api_ct.gt_row_ctrodo_occ
                                             , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrodo_occ fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrodo_occ;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do modal Rodoviário.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_rodo ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := null;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_RODO') = 0 then
      --
      return;
      --
   end if;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'RNTRC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV_ENTR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_LOTACAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_CTRB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CTRB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CIOT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_RODO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_RODO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_rodo;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_rodo fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_rodo.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_rodo.first..vt_tab_csf_conhec_transp_rodo.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_rodo := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_rodo.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_rodo.rntrc           := trim(vt_tab_csf_conhec_transp_rodo(i).rntrc);
         pk_csf_api_ct.gt_row_conhec_transp_rodo.dt_prev_entr    := vt_tab_csf_conhec_transp_rodo(i).dt_prev_entr;
         pk_csf_api_ct.gt_row_conhec_transp_rodo.dm_lotacao      := vt_tab_csf_conhec_transp_rodo(i).dm_lotacao;
         pk_csf_api_ct.gt_row_conhec_transp_rodo.serie_ctrb      := vt_tab_csf_conhec_transp_rodo(i).serie_ctrb;
         pk_csf_api_ct.gt_row_conhec_transp_rodo.nro_ctrb        := vt_tab_csf_conhec_transp_rodo(i).nro_ctrb;
         pk_csf_api_ct.gt_row_conhec_transp_rodo.ciot            := vt_tab_csf_conhec_transp_rodo(i).ciot;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do modal Rodoviário.
         pk_csf_api_ct.pkb_integr_conhec_transp_rodo ( est_log_generico           => est_log_generico
                                                     , est_row_conhec_transp_rodo => pk_csf_api_ct.gt_row_conhec_transp_rodo
                                                     , en_conhectransp_id         => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações de Ordens de Coleta associados
         pkb_ler_ctrodo_occ ( est_log_generico        => est_log_generico
                            , en_conhectransp_id      => en_conhectransp_id
                            , en_conhectransprodo_id  => pk_csf_api_ct.gt_row_conhec_transp_rodo.id
                          --| parâmetros de chave
                            , ev_cpf_cnpj_emit        => ev_cpf_cnpj_emit
                            , en_dm_ind_emit          => en_dm_ind_emit
                            , en_dm_ind_oper          => en_dm_ind_oper
                            , ev_cod_part             => ev_cod_part
                            , ev_cod_mod              => ev_cod_mod
                            , ev_serie                => ev_serie
                            , en_nro_ct               => en_nro_ct );

         --
         vn_fase := 10;
         --
         --Leitura das informações de Vale Pedágio.
         pkb_ler_ctrodo_inf_valeped ( est_log_generico           => est_log_generico
                                    , en_conhectransp_id         => en_conhectransp_id
                                    , en_conhectransprodo_id     => pk_csf_api_ct.gt_row_conhec_transp_rodo.id
                                    --| parâmetros de chave
                                    , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                    , en_dm_ind_emit             => en_dm_ind_emit
                                    , en_dm_ind_oper             => en_dm_ind_oper
                                    , ev_cod_part                => ev_cod_part
                                    , ev_cod_mod                 => ev_cod_mod
                                    , ev_serie                   => ev_serie
                                    , en_nro_ct                  => en_nro_ct
                                    );
         --
         vn_fase := 11;
         --
         -- Chama procedimento que lê as informações dos Dados dos Veículos
         pkb_ler_ctrodo_veic  ( est_log_generico        => est_log_generico
                              , en_conhectransp_id      => en_conhectransp_id
                              , en_conhectransprodo_id  => pk_csf_api_ct.gt_row_conhec_transp_rodo.id
                            --| parâmetros de chave
                              , ev_cpf_cnpj_emit        => ev_cpf_cnpj_emit
                              , en_dm_ind_emit          => en_dm_ind_emit
                              , en_dm_ind_oper          => en_dm_ind_oper
                              , ev_cod_part             => ev_cod_part
                              , ev_cod_mod              => ev_cod_mod
                              , ev_serie                => ev_serie
                              , en_nro_ct               => en_nro_ct );
         --
         vn_fase := 12;
         --
         -- Chama procedimento que lê as informações de Dados dos Veículos - Lacre
         pkb_ler_ctrodo_lacre  ( est_log_generico       => est_log_generico
                               , en_conhectransp_id     => en_conhectransp_id
                               , en_conhectransprodo_id => pk_csf_api_ct.gt_row_conhec_transp_rodo.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit       => ev_cpf_cnpj_emit
                               , en_dm_ind_emit         => en_dm_ind_emit
                               , en_dm_ind_oper         => en_dm_ind_oper
                               , ev_cod_part            => ev_cod_part
                               , ev_cod_mod             => ev_cod_mod
                               , ev_serie               => ev_serie
                               , en_nro_ct              => en_nro_ct );
         --
         vn_fase := 13;
         --
         -- Chama procedimento que lê as informações do(s) Motorista(s)
         pkb_ler_ctrodo_moto  ( est_log_generico       => est_log_generico
                              , en_conhectransp_id     => en_conhectransp_id
                              , en_conhectransprodo_id => pk_csf_api_ct.gt_row_conhec_transp_rodo.id
                            --| parâmetros de chave
                              , ev_cpf_cnpj_emit       => ev_cpf_cnpj_emit
                              , en_dm_ind_emit         => en_dm_ind_emit
                              , en_dm_ind_oper         => en_dm_ind_oper
                              , ev_cod_part            => ev_cod_part
                              , ev_cod_mod             => ev_cod_mod
                              , ev_serie               => ev_serie
                              , en_nro_ct              => en_nro_ct );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_rodo fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_rodo;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos documentos referenciados CTe Outros Serviços - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_rodo_os ( est_log_generico           in out nocopy  dbms_sql.number_table
                             , en_conhectransp_id         in             ct_rodo_os.conhectransp_id%TYPE
                           --| parâmetros de chave
                             , ev_cpf_cnpj_emit           in             varchar2
                             , en_dm_ind_emit             in             number
                             , en_dm_ind_oper             in             number
                             , ev_cod_part                in             varchar2
                             , ev_cod_mod                 in             varchar2
                             , ev_serie                   in             varchar2
                             , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_RODO_OS') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TAF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_REG_REST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PLACA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF_PLACA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF_CNPJ_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TAF_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_REG_REST_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF_PROP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_PROP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_RODO_OS');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_RODO_OS' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_rodo_os;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_rodo_os fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_rodo_os.count > 0 then
      --
      for i in vt_tab_csf_ct_rodo_os.first..vt_tab_csf_ct_rodo_os.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_rodo_os := null;
         --
         pk_csf_api_ct.gt_row_ct_rodo_os.conhectransp_id     := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_rodo_os.taf                 := vt_tab_csf_ct_rodo_os(i).taf;
         pk_csf_api_ct.gt_row_ct_rodo_os.nro_reg_rest        := vt_tab_csf_ct_rodo_os(i).nro_reg_rest;
         pk_csf_api_ct.gt_row_ct_rodo_os.placa               := vt_tab_csf_ct_rodo_os(i).placa;
         pk_csf_api_ct.gt_row_ct_rodo_os.uf_placa            := vt_tab_csf_ct_rodo_os(i).uf_placa;
         pk_csf_api_ct.gt_row_ct_rodo_os.cpf_cnpj_prop       := vt_tab_csf_ct_rodo_os(i).cpf_cnpj_prop;
         pk_csf_api_ct.gt_row_ct_rodo_os.taf_prop            := vt_tab_csf_ct_rodo_os(i).taf_prop;
         pk_csf_api_ct.gt_row_ct_rodo_os.nro_reg_rest_prop   := vt_tab_csf_ct_rodo_os(i).nro_reg_rest_prop;
         pk_csf_api_ct.gt_row_ct_rodo_os.nome_prop           := vt_tab_csf_ct_rodo_os(i).nome_prop;
         pk_csf_api_ct.gt_row_ct_rodo_os.ie_prop             := vt_tab_csf_ct_rodo_os(i).ie_prop;
         pk_csf_api_ct.gt_row_ct_rodo_os.uf_prop             := vt_tab_csf_ct_rodo_os(i).uf_prop;
         pk_csf_api_ct.gt_row_ct_rodo_os.dm_tp_prop          := vt_tab_csf_ct_rodo_os(i).dm_tp_prop;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações dos documentos referenciados CTe Outros Serviços.
         pk_csf_api_ct.pkb_integr_ct_rodo_os ( est_log_generico    => est_log_generico
                                             , est_row_ct_rodo_os  => pk_csf_api_ct.gt_row_ct_rodo_os
                                             , en_conhectransp_id  => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_rodo_os fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_rodo_os;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Seguro da Carga.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_seg  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_SEG') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_RESP_SEG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_SEGURADORA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_APOLICE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_AVERB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_MERC' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_SEG');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_SEG' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_seg;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_seg fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_seg.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_seg.first..vt_tab_csf_conhec_transp_seg.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_seg := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_seg.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_seg.dm_resp_seg      := vt_tab_csf_conhec_transp_seg(i).dm_resp_seg;
         pk_csf_api_ct.gt_row_conhec_transp_seg.descr_seguradora := vt_tab_csf_conhec_transp_seg(i).descr_seguradora;
         pk_csf_api_ct.gt_row_conhec_transp_seg.nro_apolice      := vt_tab_csf_conhec_transp_seg(i).nro_apolice;
         pk_csf_api_ct.gt_row_conhec_transp_seg.nro_averb        := vt_tab_csf_conhec_transp_seg(i).nro_averb;
         pk_csf_api_ct.gt_row_conhec_transp_seg.vl_merc          := vt_tab_csf_conhec_transp_seg(i).vl_merc;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Seguro da Carga.
         pk_csf_api_ct.pkb_integr_conhec_transp_seg ( est_log_generico          => est_log_generico
                                                    , est_row_conhec_transp_seg => pk_csf_api_ct.gt_row_conhec_transp_seg
                                                    , en_conhectransp_id        => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_seg fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_seg;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Documentos de Transporte Anterior - Modelo de documento Eletronico.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctdocant_eletr  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp_docant.conhectransp_id%TYPE
                                  , en_conhectranspdocant_id   in             conhec_transp_docant.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number
                                  , ev_cnpj                    in             varchar2
                                  , ev_cpf                     in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTDOCANT_ELETR') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTDOCANT_ELETR');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   if ev_cnpj is not null then
      --
      gv_sql := gv_sql || ' and(' || GV_ASPAS || 'CNPJ' || GV_ASPAS || ') = ' || '''' || ev_cnpj || '''';
      --
   end if;
   --
   vn_fase := 6;
   --
   if ev_cpf is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'CPF' || GV_ASPAS || ' = ' || '''' || ev_cpf || '''';
      --
   end if;
   --
   vn_fase := 7;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTDOCANT_ELETR' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctdocant_eletr;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctdocant_eletr fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 8;
   --
   if vt_tab_csf_ctdocant_eletr.count > 0 then
      --
      for i in vt_tab_csf_ctdocant_eletr.first..vt_tab_csf_ctdocant_eletr.last loop
         --
         vn_fase := 9;
         --
         pk_csf_api_ct.gt_row_ctdocant_eletr := null;
         --
         pk_csf_api_ct.gt_row_ctdocant_eletr.conhectranspdocant_id  := en_conhectranspdocant_id;
         pk_csf_api_ct.gt_row_ctdocant_eletr.nro_chave_cte          := trim(vt_tab_csf_ctdocant_eletr(i).nro_chave_cte);
         --
         vn_fase := 10;
         --
         -- Chama procedimento que integra as informações de Documentos de Transporte Anterior.
         pk_csf_api_ct.pkb_integr_ctdocant_eletr ( est_log_generico       => est_log_generico
                                                 , est_row_ctdocant_eletr => pk_csf_api_ct.gt_row_ctdocant_eletr
                                                 , en_conhectransp_id     => en_conhectransp_id );

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctdocant_eletr fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctdocant_eletr;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Documentos de Transporte Anterior - Modelo de documento NÃO Eletronico.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctdocant_papel  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp_docant.conhectransp_id%TYPE
                                  , en_conhectranspdocant_id   in             conhec_transp_docant.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number
                                  , ev_cnpj                    in             varchar2
                                  , ev_cpf                     in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTDOCANT_PAPEL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SUB_SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOCTO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTDOCANT_PAPEL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   if ev_cnpj is not null then
      --
      gv_sql := gv_sql || ' and(' || GV_ASPAS || 'CNPJ' || GV_ASPAS || ') = ' || '''' || ev_cnpj || '''';
      --
   end if;
   --
   vn_fase := 6;
   --
   if ev_cpf is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'CPF' || GV_ASPAS || ' = ' || '''' || ev_cpf || '''';
      --
   end if;
   --
   vn_fase := 7;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTDOCANT_PAPEL' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctdocant_papel;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctdocant_papel fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 8;
   --
   if vt_tab_csf_ctdocant_papel.count > 0 then
      --
      for i in vt_tab_csf_ctdocant_papel.first..vt_tab_csf_ctdocant_papel.last loop
         --
         vn_fase := 9;
         --
         pk_csf_api_ct.gt_row_ctdocant_papel := null;
         --
         pk_csf_api_ct.gt_row_ctdocant_papel.conhectranspdocant_id  := en_conhectranspdocant_id;
         pk_csf_api_ct.gt_row_ctdocant_papel.dm_tp_doc              := vt_tab_csf_ctdocant_papel(i).dm_tp_doc;
         pk_csf_api_ct.gt_row_ctdocant_papel.serie                  := trim(vt_tab_csf_ctdocant_papel(i).serie);
         pk_csf_api_ct.gt_row_ctdocant_papel.sub_serie              := vt_tab_csf_ctdocant_papel(i).sub_serie;
         pk_csf_api_ct.gt_row_ctdocant_papel.nro_docto              := vt_tab_csf_ctdocant_papel(i).nro_docto;
         pk_csf_api_ct.gt_row_ctdocant_papel.dt_emissao             := vt_tab_csf_ctdocant_papel(i).dt_emissao;
         --
         vn_fase := 10;
         --
         -- Chama procedimento que integra as informações de Documentos de Transporte Anterior.
         pk_csf_api_ct.pkb_integr_ctdocant_papel ( est_log_generico       => est_log_generico
                                                 , est_row_ctdocant_papel => pk_csf_api_ct.gt_row_ctdocant_papel
                                                 , en_conhectransp_id     => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctdocant_papel fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctdocant_papel;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Documentos de Transporte Anterior
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_docant   ( est_log_generico           in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id         in             conhec_transp_docant.conhectransp_id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit           in             varchar2
                                         , en_dm_ind_emit             in             number
                                         , en_dm_ind_oper             in             number
                                         , ev_cod_part                in             varchar2
                                         , ev_cod_mod                 in             varchar2
                                         , ev_serie                   in             varchar2
                                         , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_DOCANT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_DOCANT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_DOCANT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_docant;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_docant fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_docant.count > 0 then
      --
      for i in vt_tab_csf_ct_docant.first..vt_tab_csf_ct_docant.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_docant := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_docant.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_docant.cnpj             := trim(vt_tab_csf_ct_docant(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_docant.cpf              := trim(vt_tab_csf_ct_docant(i).cpf);
         pk_csf_api_ct.gt_row_conhec_transp_docant.ie               := trim(vt_tab_csf_ct_docant(i).ie);
         pk_csf_api_ct.gt_row_conhec_transp_docant.uf               := upper(trim(vt_tab_csf_ct_docant(i).uf));
         pk_csf_api_ct.gt_row_conhec_transp_docant.nome             := trim(vt_tab_csf_ct_docant(i).nome);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Documentos de Transporte Anterior.
         pk_csf_api_ct.pkb_integr_conhectransp_docant ( est_log_generico            => est_log_generico
                                                      , est_row_conhectransp_docant => pk_csf_api_ct.gt_row_conhec_transp_docant
                                                      , en_conhectransp_id          => en_conhectransp_id );
         --                                             
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações de documentos de transp. anterior modelo documento Não eletronico
         pkb_ler_ctdocant_papel  ( est_log_generico           => est_log_generico
                                 , en_conhectransp_id         => en_conhectransp_id
                                 , en_conhectranspdocant_id   => pk_csf_api_ct.gt_row_conhec_transp_docant.id
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                 , en_dm_ind_emit             => en_dm_ind_emit
                                 , en_dm_ind_oper             => en_dm_ind_oper
                                 , ev_cod_part                => ev_cod_part
                                 , ev_cod_mod                 => ev_cod_mod
                                 , ev_serie                   => ev_serie
                                 , en_nro_ct                  => en_nro_ct
                                 , ev_cnpj                    => pk_csf_api_ct.gt_row_conhec_transp_docant.cnpj
                                 , ev_cpf                     => pk_csf_api_ct.gt_row_conhec_transp_docant.cpf );
         --
         vn_fase := 10;
         --
         -- Chama procedimento que lê as informações de documentos de transp. anterior modelo documento eletronico
         pkb_ler_ctdocant_eletr  ( est_log_generico           => est_log_generico
                                 , en_conhectransp_id         => en_conhectransp_id
                                 , en_conhectranspdocant_id   => pk_csf_api_ct.gt_row_conhec_transp_docant.id
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                 , en_dm_ind_emit             => en_dm_ind_emit
                                 , en_dm_ind_oper             => en_dm_ind_oper
                                 , ev_cod_part                => ev_cod_part
                                 , ev_cod_mod                 => ev_cod_mod
                                 , ev_serie                   => ev_serie
                                 , en_nro_ct                  => en_nro_ct
                                 , ev_cnpj                    => pk_csf_api_ct.gt_row_conhec_transp_docant.cnpj
                                 , ev_cpf                     => pk_csf_api_ct.gt_row_conhec_transp_docant.cpf );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_docant fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_docant;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Lacres dos containers
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctcont_lacre    ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp_cont.conhectransp_id%TYPE
                                  , en_conhectranspcont_id     in             conhec_transp_cont.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number
                                  , en_nro_cont                in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTCONT_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CONT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTCONT_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CONT' || GV_ASPAS || ' = ' || en_nro_cont;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTCONT_LACRE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctcont_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctcont_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctcont_lacre.count > 0 then
      --
      for i in vt_tab_csf_ctcont_lacre.first..vt_tab_csf_ctcont_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctcont_lacre := null;
         --
         pk_csf_api_ct.gt_row_ctcont_lacre.conhectranspcont_id  := en_conhectranspcont_id;
         pk_csf_api_ct.gt_row_ctcont_lacre.nro_lacre            := trim(vt_tab_csf_ctcont_lacre(i).nro_lacre);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Lacres dos containers.
         pk_csf_api_ct.pkb_integr_ctcont_lacre ( est_log_generico      => est_log_generico
                                               , est_row_ctcont_lacre  => pk_csf_api_ct.gt_row_ctcont_lacre
                                               , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctcont_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctcont_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos containers
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_cont  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_CONT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CONT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREVISTA' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_CONT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_CONT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_cont;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_cont fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_cont.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_cont.first..vt_tab_csf_conhec_transp_cont.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_cont := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_cont.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_cont.nro_cont         := vt_tab_csf_conhec_transp_cont(i).nro_cont;
         pk_csf_api_ct.gt_row_conhec_transp_cont.dt_prevista      := vt_tab_csf_conhec_transp_cont(i).dt_prevista;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos containers.
         pk_csf_api_ct.pkb_integr_conhec_transp_cont ( est_log_generico           => est_log_generico
                                                     , est_row_conhec_transp_cont => pk_csf_api_ct.gt_row_conhec_transp_cont
                                                     , en_conhectransp_id         => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações dos Lacres dos containers.
         pkb_ler_ctcont_lacre  ( est_log_generico           => est_log_generico
                               , en_conhectransp_id         => en_conhectransp_id
                               , en_conhectranspcont_id     => pk_csf_api_ct.gt_row_conhec_transp_cont.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                               , en_dm_ind_emit             => en_dm_ind_emit
                               , en_dm_ind_oper             => en_dm_ind_oper
                               , ev_cod_part                => ev_cod_part
                               , ev_cod_mod                 => ev_cod_mod
                               , ev_serie                   => ev_serie
                               , en_nro_ct                  => en_nro_ct
                               , en_nro_cont                => pk_csf_api_ct.gt_row_conhec_transp_cont.nro_cont );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_cont fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_cont;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de quantidades da Carga do CT
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctinfcarga_qtde  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                   , en_conhectransp_id         in             conhec_transp_infcarga.conhectransp_id%TYPE
                                   , en_conhectranspinfcarga_id in             conhec_transp_infcarga.id%TYPE
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           in             varchar2
                                   , en_dm_ind_emit             in             number
                                   , en_dm_ind_oper             in             number
                                   , ev_cod_part                in             varchar2
                                   , ev_cod_mod                 in             varchar2
                                   , ev_serie                   in             varchar2
                                   , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTINFCARGA_QTDE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_COD_UNID' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TIPO_MEDIDA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_CARGA' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTINFCARGA_QTDE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTINFCARGA_QTDE' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctinfcarga_qtde;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctinfcarga_qtde fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctinfcarga_qtde.count > 0 then
      --
      for i in vt_tab_csf_ctinfcarga_qtde.first..vt_tab_csf_ctinfcarga_qtde.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctinfcarga_qtde := null;
         --
         pk_csf_api_ct.gt_row_ctinfcarga_qtde.conhectranspinfcarga_id  := en_conhectranspinfcarga_id;
         pk_csf_api_ct.gt_row_ctinfcarga_qtde.dm_cod_unid              := vt_tab_csf_ctinfcarga_qtde(i).dm_cod_unid;
         pk_csf_api_ct.gt_row_ctinfcarga_qtde.tipo_medida              := vt_tab_csf_ctinfcarga_qtde(i).tipo_medida;
         pk_csf_api_ct.gt_row_ctinfcarga_qtde.qtde_carga               := vt_tab_csf_ctinfcarga_qtde(i).qtde_carga;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos containers.
         pk_csf_api_ct.pkb_integr_ctinfcarga_qtde ( est_log_generico         => est_log_generico
                                                  , est_row_ctinfcarga_qtde  => pk_csf_api_ct.gt_row_ctinfcarga_qtde
                                                  , en_conhectransp_id       => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctinfcarga_qtde fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctinfcarga_qtde;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações da Carga do CT-e.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_infcarga  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                          , en_conhectransp_id         in             conhec_transp_infcarga.conhectransp_id%TYPE
                                        --| parâmetros de chave
                                          , ev_cpf_cnpj_emit           in             varchar2
                                          , en_dm_ind_emit             in             number
                                          , en_dm_ind_oper             in             number
                                          , ev_cod_part                in             varchar2
                                          , ev_cod_mod                 in             varchar2
                                          , ev_serie                   in             varchar2
                                          , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_INFCARGA') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_MERC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PROD_PREDOM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'OUTRA_CARACT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_CARGA_AVERB' || GV_ASPAS; --Atualização CTe 3.0
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_INFCARGA');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_INFCARGA' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_infcarga;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_infcarga fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_infcarga.count > 0 then
      --
      for i in vt_tab_csf_ct_infcarga.first..vt_tab_csf_ct_infcarga.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_infcarga := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_infcarga.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_infcarga.vl_total_merc    := vt_tab_csf_ct_infcarga(i).vl_total_merc;
         pk_csf_api_ct.gt_row_conhec_transp_infcarga.prod_predom      := vt_tab_csf_ct_infcarga(i).prod_predom;
         pk_csf_api_ct.gt_row_conhec_transp_infcarga.outra_caract     := vt_tab_csf_ct_infcarga(i).outra_caract;
         pk_csf_api_ct.gt_row_conhec_transp_infcarga.vl_carga_averb   := vt_tab_csf_ct_infcarga(i).vl_carga_averb; --Atualização CTe 3.0
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações da Carga do CT-e.
         pk_csf_api_ct.pkb_integr_ct_infcarga ( est_log_generico     => est_log_generico
                                              , est_row_ct_infcarga  => pk_csf_api_ct.gt_row_conhec_transp_infcarga
                                              , en_conhectransp_id   => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações de quantidades da Carga do CT.
         pkb_ler_ctinfcarga_qtde  ( est_log_generico           => est_log_generico
                                  , en_conhectransp_id         => en_conhectransp_id
                                  , en_conhectranspinfcarga_id => pk_csf_api_ct.gt_row_conhec_transp_infcarga.id
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           =>  ev_cpf_cnpj_emit
                                  , en_dm_ind_emit             =>  en_dm_ind_emit
                                  , en_dm_ind_oper             =>  en_dm_ind_oper
                                  , ev_cod_part                =>  ev_cod_part
                                  , ev_cod_mod                 =>  ev_cod_mod
                                  , ev_serie                   =>  ev_serie
                                  , en_nro_ct                  =>  en_nro_ct );

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_infcarga fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_infcarga;

-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações relativas aos Impostos - Flex field.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_imp_ff( est_log_generico      in  out nocopy  dbms_sql.number_table
                                      , en_conhectranspimp_id in  conhec_transp_imp.id%TYPE
                                      , ev_cpf_cnpj_emit      in  varchar2
                                      , en_dm_ind_emit        in  number
                                      , en_dm_ind_oper        in  number
                                      , ev_cod_part           in  varchar2
                                      , ev_cod_mod            in  varchar2
                                      , ev_serie              in  varchar2
                                      , en_nro_ct             in  number
                                      , ev_cod_imposto        in  varchar2)
is
   vn_fase               number := 0;
   vn_loggenericoct_id   log_generico_ct.id%TYPE;
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_IMP_FF') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   vt_tab_csf_conhec_transp_ff.delete;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_EMIT'   || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_OPER'   || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_PART'      || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_MOD'       || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'SERIE'         || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'NRO_CT'        || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_IMPOSTO'   || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'ATRIBUTO'      || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'VALOR'         || trim(GV_ASPAS);
   --
   vn_fase := 2;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_IMP_FF' );
   --
   gv_sql := gv_sql || ' WHERE ' || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS) || ' = ' ||''''||ev_cpf_cnpj_emit||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'DM_IND_EMIT'   || trim(GV_ASPAS) || ' = ' ||en_dm_ind_emit;
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'DM_IND_OPER'   || trim(GV_ASPAS) || ' = ' ||en_dm_ind_oper;
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'COD_PART'      || trim(GV_ASPAS) || ' = ' ||''''||ev_cod_part||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'COD_MOD'       || trim(GV_ASPAS) || ' = ' ||''''||ev_cod_mod||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'SERIE'         || trim(GV_ASPAS) || ' = ' ||''''||ev_serie||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'NRO_CT'        || trim(GV_ASPAS) || ' = ' ||en_nro_ct;
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'COD_IMPOSTO'   || trim(GV_ASPAS) ||' = ' ||''''||ev_cod_imposto||'''';
   --
   gv_sql := gv_sql || ' ORDER BY ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_EMIT'   || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_OPER'   || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_PART'      || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_MOD'       || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'SERIE'         || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'NRO_CT'        || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_IMPOSTO'   || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'ATRIBUTO'      || trim(GV_ASPAS);
   --
   vn_fase := 3;
   -- recupera as Notas Fiscais não integradas
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctransp_imp_ff;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_imp_ff fase('||vn_fase||'):'||sqlerrm;
            --
            declare
               vn_loggenericoct_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => null
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
            --
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, pk_csf_api_ct.gv_mensagem_log);
            --
         end if;
         --
   end;
   --
   vn_fase := 4;
   --
   if vt_tab_csf_ctransp_imp_ff.count > 0 then
      --
      for i in vt_tab_csf_ctransp_imp_ff.first..vt_tab_csf_ctransp_imp_ff.last loop
         --
         vn_fase := 4.1;
         --
         if vt_tab_csf_ctransp_imp_ff(i).atributo in ('VL_BASE_ISENTA', 'VL_BASE_OUTRO', 'VL_IMP_OUTRO', 'ALIQ_APLIC_OUTRO') then
            --
            vn_fase := 4.11;
            --
            pk_csf_api_ct.pkb_integr_ct_imp_ff ( est_log_generico       => est_log_generico
                                               , en_conhectranspimp_id  => en_conhectranspimp_id
                                               , ev_atributo            => vt_tab_csf_ctransp_imp_ff(i).atributo
                                               , ev_valor               => vt_tab_csf_ctransp_imp_ff(i).valor);
            --
         end if;
         --
      end loop;
      --
      vn_fase := 5;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_imp_ff fase('||vn_fase||') nro_ct('||en_nro_ct||'):'||sqlerrm;
      --
      declare
         vn_loggenericoct_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, pk_csf_api_ct.gv_mensagem_log);
      --
end pkb_ler_conhec_transp_imp_ff;

-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações relativas aos Impostos.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_imp  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase             number := 0;
   i                   pls_integer;
   vn_loggenerico_id   log_generico_ct.id%type;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_IMP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_IMPOSTO'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_ST'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BASE_CALC'  || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ALIQ_APLI'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_IMP_TRIB'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PERC_REDUC'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_CRED'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_INF_IMP'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_OUTRA_UF'   || GV_ASPAS;  --Atualização CTe 3.0
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_IMP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' ||         en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' ||         en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE'   || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT'  || GV_ASPAS || ' = ' ||         en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_IMP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_imp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_imp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_imp.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_imp.first..vt_tab_csf_conhec_transp_imp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_imp := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_imp.conhectransp_id  := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_imp.vl_base_calc     := vt_tab_csf_conhec_transp_imp(i).vl_base_calc;
         pk_csf_api_ct.gt_row_conhec_transp_imp.aliq_apli        := vt_tab_csf_conhec_transp_imp(i).aliq_apli;
         pk_csf_api_ct.gt_row_conhec_transp_imp.vl_imp_trib      := vt_tab_csf_conhec_transp_imp(i).vl_imp_trib;
         pk_csf_api_ct.gt_row_conhec_transp_imp.perc_reduc       := vt_tab_csf_conhec_transp_imp(i).perc_reduc;
         pk_csf_api_ct.gt_row_conhec_transp_imp.vl_cred          := vt_tab_csf_conhec_transp_imp(i).vl_cred;
         pk_csf_api_ct.gt_row_conhec_transp_imp.dm_inf_imp       := nvl(vt_tab_csf_conhec_transp_imp(i).dm_inf_imp,0);
         pk_csf_api_ct.gt_row_conhec_transp_imp.dm_outra_uf      := vt_tab_csf_conhec_transp_imp(i).dm_outra_uf; --Atualização CTe 3.0
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações relativas aos Impostos.
         pk_csf_api_ct.pkb_integr_conhec_transp_imp ( est_log_generico          => est_log_generico
                                                    , est_row_conhec_transp_imp => pk_csf_api_ct.gt_row_conhec_transp_imp
                                                    , en_cd_imp                 => vt_tab_csf_conhec_transp_imp(i).cod_imposto
                                                    , ev_cod_st                 => vt_tab_csf_conhec_transp_imp(i).cod_st
                                                    , en_conhectransp_id        => en_conhectransp_id );
      
      
      
         --
         vn_fase := 8.1;
         -- Leitura de informações relativas aos Impostos - campos Flex Field.
         pkb_ler_conhec_transp_imp_ff  ( est_log_generico        => est_log_generico
                                       , en_conhectranspimp_id   => pk_csf_api_ct.gt_row_conhec_transp_imp.id
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp_imp(i).cpf_cnpj_emit)
                                       , en_dm_ind_emit          => vt_tab_csf_conhec_transp_imp(i).dm_ind_emit
                                       , en_dm_ind_oper          => vt_tab_csf_conhec_transp_imp(i).dm_ind_oper
                                       , ev_cod_part             => trim(vt_tab_csf_conhec_transp_imp(i).cod_part)
                                       , ev_cod_mod              => trim(vt_tab_csf_conhec_transp_imp(i).cod_mod)
                                       , ev_serie                => trim(vt_tab_csf_conhec_transp_imp(i).serie)
                                       , en_nro_ct               => vt_tab_csf_conhec_transp_imp(i).nro_ct
                                       , ev_cod_imposto          => vt_tab_csf_conhec_transp_imp(i).cod_imposto);
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_imp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_imp;
--

--
-- ============================================================================================================================== --
-- Procedimento de leitura das informações relativas a outros impostos
-- ============================================================================================================================== --
--
procedure pkb_ler_conhec_transp_imp_out ( est_log_generico           in out nocopy  dbms_sql.number_table
                                        , en_conhectransp_id         in             conhec_transp.id%TYPE
                                        --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           in             varchar2
                                        , en_dm_ind_emit             in             number
                                        , en_dm_ind_oper             in             number
                                        , ev_cod_part                in             varchar2
                                        , ev_cod_mod                 in             varchar2
                                        , ev_serie                   in             varchar2
                                        , en_nro_ct                  in             number ) is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_IMP_OUT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'              || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_IMPOSTO'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_ST'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ITEM'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BASE_CALC'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ALIQ_APLI'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_IMP_TRIB'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DEDUCAO'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_NAT_FRT'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_TIPORETIMP'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_REC_TIPORETIMP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_NAT_REC_PC'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_BC_CRED_PC'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_CTA'            || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_IMP_OUT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' ||         en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' ||         en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD'     || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE'       || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT'      || GV_ASPAS || ' = ' ||         en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_IMP_OUT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_imp_out;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_imp_out fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_imp_out.count > 0 then
      --
      for i in vt_tab_csf_ct_imp_out.first..vt_tab_csf_ct_imp_out.last loop
         --
         -- Verifica se o imposto é PIS para chamar a rotina
         if vt_tab_csf_ct_imp_out(i).cod_imposto = 4 then
            --
            vn_fase := 7;
            --
            pk_csf_api_ct.gt_row_ct_compdoc_pis                    := null;
            pk_csf_api_ct.gt_row_ct_compdoc_pis.conhectransp_id    := en_conhectransp_id;
            pk_csf_api_ct.gt_row_ct_compdoc_pis.dm_ind_nat_frt     := vt_tab_csf_ct_imp_out(i).dm_ind_nat_frt;
            pk_csf_api_ct.gt_row_ct_compdoc_pis.vl_item            := vt_tab_csf_ct_imp_out(i).vl_item;
            pk_csf_api_ct.gt_row_ct_compdoc_pis.vl_bc_pis          := vt_tab_csf_ct_imp_out(i).vl_base_calc;
            pk_csf_api_ct.gt_row_ct_compdoc_pis.aliq_pis           := vt_tab_csf_ct_imp_out(i).aliq_apli;
            pk_csf_api_ct.gt_row_ct_compdoc_pis.vl_pis             := vt_tab_csf_ct_imp_out(i).vl_imp_trib;
            --
            vn_fase := 8;
            --
            -- Chama procedimento que integra as informações relativas ao Imposto PIS
            pk_csf_api_ct.pkb_integr_ctimpout_pis ( est_log_generico            => est_log_generico
                                                  , est_row_ct_comp_doc_pis     => pk_csf_api_ct.gt_row_ct_compdoc_pis
                                                  , ev_cpf_cnpj_emit            => vt_tab_csf_ct_imp_out(i).cpf_cnpj_emit
                                                  , ev_cod_st                   => vt_tab_csf_ct_imp_out(i).cod_st
                                                  , ev_cod_bc_cred_pc           => vt_tab_csf_ct_imp_out(i).cod_bc_cred_pc
                                                  , ev_cod_cta                  => vt_tab_csf_ct_imp_out(i).cod_cta
                                                  , en_multorg_id               => gn_multorg_id );
         --
         -- Verifica se o imposto é COFINS para chamar a rotina
         elsif vt_tab_csf_ct_imp_out(i).cod_imposto = 5 then
            --
            vn_fase := 9;
            -- Chama procedimento que integra as informações relativas ao Imposto COFINS
            pk_csf_api_ct.gt_row_ct_compdoc_cofins                    := null;
            pk_csf_api_ct.gt_row_ct_compdoc_cofins.conhectransp_id    := en_conhectransp_id;
            pk_csf_api_ct.gt_row_ct_compdoc_cofins.dm_ind_nat_frt     := vt_tab_csf_ct_imp_out(i).dm_ind_nat_frt;
            pk_csf_api_ct.gt_row_ct_compdoc_cofins.vl_item            := vt_tab_csf_ct_imp_out(i).vl_item;
            pk_csf_api_ct.gt_row_ct_compdoc_cofins.vl_bc_cofins       := vt_tab_csf_ct_imp_out(i).vl_base_calc;
            pk_csf_api_ct.gt_row_ct_compdoc_cofins.aliq_cofins        := vt_tab_csf_ct_imp_out(i).aliq_apli;
            pk_csf_api_ct.gt_row_ct_compdoc_cofins.vl_cofins          := vt_tab_csf_ct_imp_out(i).vl_imp_trib;
            --
            vn_fase := 10;
            --
            pk_csf_api_ct.pkb_integr_ctimpout_cofins ( est_log_generico         => est_log_generico
                                                     , est_ct_comp_doc_cofins   => pk_csf_api_ct.gt_row_ct_compdoc_cofins
                                                     , ev_cpf_cnpj_emit         => vt_tab_csf_ct_imp_out(i).cpf_cnpj_emit
                                                     , ev_cod_st                => vt_tab_csf_ct_imp_out(i).cod_st
                                                     , ev_cod_bc_cred_pc        => vt_tab_csf_ct_imp_out(i).cod_bc_cred_pc
                                                     , ev_cod_cta               => vt_tab_csf_ct_imp_out(i).cod_cta
                                                     , en_multorg_id            => gn_multorg_id );
         --
         -- Se for um imposto que não tem rotina de tratamento específica insere na CONHEC_TRANSP_IMP
         -- A mesma rotina chamada na pkb_ler_conhec_transp_imp
         else
            --
            vn_fase := 11;
            --
            pk_csf_api_ct.gv_mensagem_log := 'Na rotina pk_integr_view_ct.pkb_ler_conhec_transp_imp_out não tem tratamento para o imposto '||vt_tab_csf_ct_imp_out(i).cod_imposto||'. Fase(' || vn_fase || '): ';
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
            --
            pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                              , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
            --
            -- Armazena o "loggenerico_id" na memória
            pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
            --
            exception
               when others then
                  null;
            end;
            --
         end if;
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_imp_out fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_imp_out;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos Componentes do Valor da Prestação
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctvlprest_comp  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp_vlprest.conhectransp_id%TYPE
                                  , en_conhectranspvlprest_id  in             conhec_transp_vlprest.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTVLPREST_COMP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VALOR' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTVLPREST_COMP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTVLPREST_COMP' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctvlprest_comp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctvlprest_comp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctvlprest_comp.count > 0 then
      --
      for i in vt_tab_csf_ctvlprest_comp.first..vt_tab_csf_ctvlprest_comp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctvlprest_comp := null;
         --
         pk_csf_api_ct.gt_row_ctvlprest_comp.conhectranspvlprest_id := en_conhectranspvlprest_id;
         pk_csf_api_ct.gt_row_ctvlprest_comp.nome                   := trim(vt_tab_csf_ctvlprest_comp(i).nome);
         pk_csf_api_ct.gt_row_ctvlprest_comp.valor                  := vt_tab_csf_ctvlprest_comp(i).valor;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos Componentes do Valor da Prestação
         pk_csf_api_ct.pkb_integr_ctvlprest_comp ( est_log_generico        => est_log_generico
                                                 , est_row_ctvlprest_comp  => pk_csf_api_ct.gt_row_ctvlprest_comp
                                                 , en_conhectransp_id      => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctvlprest_comp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctvlprest_comp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos Valores da Prestação de Serviço
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_vlprest  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id         in             conhec_transp.id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit           in             varchar2
                                         , en_dm_ind_emit             in             number
                                         , en_dm_ind_oper             in             number
                                         , ev_cod_part                in             varchar2
                                         , ev_cod_mod                 in             varchar2
                                         , ev_serie                   in             varchar2
                                         , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_VLPREST') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_PREST_SERV' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_RECEB' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DOCTO_FISCAL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DESC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOT_TRIB' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_VLPREST');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_VLPREST' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_vlprest;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_vlprest fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_vlprest.count > 0 then
      --
      for i in vt_tab_csf_ct_vlprest.first..vt_tab_csf_ct_vlprest.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_vlprest := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_vlprest.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_vlprest.vl_prest_serv   := vt_tab_csf_ct_vlprest(i).vl_prest_serv;
         pk_csf_api_ct.gt_row_conhec_transp_vlprest.vl_receb        := vt_tab_csf_ct_vlprest(i).vl_receb;
         pk_csf_api_ct.gt_row_conhec_transp_vlprest.vl_docto_fiscal := vt_tab_csf_ct_vlprest(i).vl_docto_fiscal;
         pk_csf_api_ct.gt_row_conhec_transp_vlprest.vl_desc         := vt_tab_csf_ct_vlprest(i).vl_desc;
         pk_csf_api_ct.gt_row_conhec_transp_vlprest.vl_tot_trib     := vt_tab_csf_ct_vlprest(i).vl_tot_trib;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos Valores da Prestação de Serviço
         pk_csf_api_ct.pkb_integr_ct_vlprest ( est_log_generico    => est_log_generico
                                             , est_row_ct_vlprest  => pk_csf_api_ct.gt_row_conhec_transp_vlprest
                                             , en_conhectransp_id  => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações dos Componentes do Valor da Prestação.
         pkb_ler_ctvlprest_comp  ( est_log_generico           => est_log_generico
                                 , en_conhectransp_id         => en_conhectransp_id
                                 , en_conhectranspvlprest_id  => pk_csf_api_ct.gt_row_conhec_transp_vlprest.id
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                 , en_dm_ind_emit             => en_dm_ind_emit
                                 , en_dm_ind_oper             => en_dm_ind_oper
                                 , ev_cod_part                => ev_cod_part
                                 , ev_cod_mod                 => ev_cod_mod
                                 , ev_serie                   => ev_serie
                                 , en_nro_ct                  => en_nro_ct );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_vlprest fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_vlprest;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Local de Entrega constante no Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctdest_locent ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_dest.conhectransp_id%TYPE
                                , en_conhectranspdest_id     in             conhec_transp_dest.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTDEST_LOCENT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTDEST_LOCENT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTDEST_LOCENT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctdest_locent;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctdest_locent fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctdest_locent.count > 0 then
      --
      for i in vt_tab_csf_ctdest_locent.first..vt_tab_csf_ctdest_locent.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctdest_locent := null;
         --
         pk_csf_api_ct.gt_row_ctdest_locent.conhectranspdest_id := en_conhectranspdest_id;
         pk_csf_api_ct.gt_row_ctdest_locent.cnpj                := trim(vt_tab_csf_ctdest_locent(i).cnpj);
         pk_csf_api_ct.gt_row_ctdest_locent.cpf                 := trim(vt_tab_csf_ctdest_locent(i).cpf);
         pk_csf_api_ct.gt_row_ctdest_locent.nome                := trim(vt_tab_csf_ctdest_locent(i).nome);
         pk_csf_api_ct.gt_row_ctdest_locent.lograd              := trim(vt_tab_csf_ctdest_locent(i).lograd);
         pk_csf_api_ct.gt_row_ctdest_locent.nro                 := trim(vt_tab_csf_ctdest_locent(i).nro);
         pk_csf_api_ct.gt_row_ctdest_locent.compl               := trim(vt_tab_csf_ctdest_locent(i).compl);
         pk_csf_api_ct.gt_row_ctdest_locent.bairro              := trim(vt_tab_csf_ctdest_locent(i).bairro);
         pk_csf_api_ct.gt_row_ctdest_locent.ibge_cidade         := trim(vt_tab_csf_ctdest_locent(i).ibge_cidade);
         pk_csf_api_ct.gt_row_ctdest_locent.descr_cidade        := vt_tab_csf_ctdest_locent(i).descr_cidade;
         pk_csf_api_ct.gt_row_ctdest_locent.uf                  := upper(trim(vt_tab_csf_ctdest_locent(i).UF));
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Local de Entrega constante no Conhecimento de Transporte.
         pk_csf_api_ct.pkb_integr_ctdest_locent ( est_log_generico      => est_log_generico
                                                , est_row_ctdest_locent => pk_csf_api_ct.gt_row_ctdest_locent
                                                , en_conhectransp_id    => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctdest_locent fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctdest_locent;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Destinatário da Carga.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_dest ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_DEST') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_FANT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SUFRAMA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMAIL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_DEST');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_DEST' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_dest;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_dest fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_dest.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_dest.first..vt_tab_csf_conhec_transp_dest.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_dest := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_dest.conhectransp_id   := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_dest.cnpj              := trim(vt_tab_csf_conhec_transp_dest(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_dest.cpf               := trim(vt_tab_csf_conhec_transp_dest(i).cpf);
         pk_csf_api_ct.gt_row_conhec_transp_dest.ie                := trim(vt_tab_csf_conhec_transp_dest(i).ie);         
         pk_csf_api_ct.gt_row_conhec_transp_dest.nome              := trim(vt_tab_csf_conhec_transp_dest(i).nome);
         pk_csf_api_ct.gt_row_conhec_transp_dest.fone              := trim(vt_tab_csf_conhec_transp_dest(i).fone);
         pk_csf_api_ct.gt_row_conhec_transp_dest.suframa           := vt_tab_csf_conhec_transp_dest(i).suframa;
         pk_csf_api_ct.gt_row_conhec_transp_dest.lograd            := trim(vt_tab_csf_conhec_transp_dest(i).lograd);
         pk_csf_api_ct.gt_row_conhec_transp_dest.nro               := trim(vt_tab_csf_conhec_transp_dest(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_dest.compl             := trim(vt_tab_csf_conhec_transp_dest(i).compl);
         pk_csf_api_ct.gt_row_conhec_transp_dest.bairro            := trim(vt_tab_csf_conhec_transp_dest(i).bairro);
         pk_csf_api_ct.gt_row_conhec_transp_dest.ibge_cidade       := trim(vt_tab_csf_conhec_transp_dest(i).ibge_cidade);
         pk_csf_api_ct.gt_row_conhec_transp_dest.descr_cidade      := vt_tab_csf_conhec_transp_dest(i).descr_cidade;
         pk_csf_api_ct.gt_row_conhec_transp_dest.cep               := vt_tab_csf_conhec_transp_dest(i).cep;
         pk_csf_api_ct.gt_row_conhec_transp_dest.uf                := upper(trim(vt_tab_csf_conhec_transp_dest(i).uf));
         pk_csf_api_ct.gt_row_conhec_transp_dest.cod_pais          := vt_tab_csf_conhec_transp_dest(i).cod_pais;
         pk_csf_api_ct.gt_row_conhec_transp_dest.descr_pais        := vt_tab_csf_conhec_transp_dest(i).descr_pais;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Local de Entrega constante no Conhecimento de Transporte.
         pk_csf_api_ct.pkb_integr_conhec_transp_dest ( est_log_generico           => est_log_generico
                                                     , est_row_conhec_transp_dest => pk_csf_api_ct.gt_row_conhec_transp_dest
                                                     , en_conhectransp_id         => en_conhectransp_id );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações do Local de Entrega constante no Conhecimento de Transporte.
         pkb_ler_ctdest_locent ( est_log_generico           => est_log_generico
                               , en_conhectransp_id         => en_conhectransp_id
                               , en_conhectranspdest_id     => pk_csf_api_ct.gt_row_conhec_transp_dest.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                               , en_dm_ind_emit             => en_dm_ind_emit
                               , en_dm_ind_oper             => en_dm_ind_oper
                               , ev_cod_part                => ev_cod_part
                               , ev_cod_mod                 => ev_cod_mod
                               , ev_serie                   => ev_serie
                               , en_nro_ct                  => en_nro_ct ) ;

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_dest fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_dest;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Recebedor da Carga.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_receb ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_RECEB') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_FANT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMAIL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_RECEB');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_RECEB' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_receb;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_receb fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_receb.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_receb.first..vt_tab_csf_conhec_transp_receb.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_receb := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_receb.conhectransp_id   := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_receb.cnpj              := trim(vt_tab_csf_conhec_transp_receb(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_receb.cpf               := trim(vt_tab_csf_conhec_transp_receb(i).cpf);
         pk_csf_api_ct.gt_row_conhec_transp_receb.ie                := trim(vt_tab_csf_conhec_transp_receb(i).ie);
         pk_csf_api_ct.gt_row_conhec_transp_receb.nome              := trim(vt_tab_csf_conhec_transp_receb(i).nome);
         pk_csf_api_ct.gt_row_conhec_transp_receb.nome_fant         := trim(vt_tab_csf_conhec_transp_receb(i).nome_fant);
         pk_csf_api_ct.gt_row_conhec_transp_receb.fone              := trim(vt_tab_csf_conhec_transp_receb(i).fone);
         pk_csf_api_ct.gt_row_conhec_transp_receb.lograd            := trim(vt_tab_csf_conhec_transp_receb(i).lograd);
         pk_csf_api_ct.gt_row_conhec_transp_receb.nro               := trim(vt_tab_csf_conhec_transp_receb(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_receb.compl             := trim(vt_tab_csf_conhec_transp_receb(i).compl);
         pk_csf_api_ct.gt_row_conhec_transp_receb.bairro            := trim(vt_tab_csf_conhec_transp_receb(i).bairro);
         pk_csf_api_ct.gt_row_conhec_transp_receb.ibge_cidade       := vt_tab_csf_conhec_transp_receb(i).ibge_cidade;
         pk_csf_api_ct.gt_row_conhec_transp_receb.descr_cidade      := vt_tab_csf_conhec_transp_receb(i).descr_cidade;
         pk_csf_api_ct.gt_row_conhec_transp_receb.cep               := vt_tab_csf_conhec_transp_receb(i).cep;
         pk_csf_api_ct.gt_row_conhec_transp_receb.uf                := upper(trim(vt_tab_csf_conhec_transp_receb(i).uf));
         pk_csf_api_ct.gt_row_conhec_transp_receb.cod_pais          := vt_tab_csf_conhec_transp_receb(i).cod_pais;
         pk_csf_api_ct.gt_row_conhec_transp_receb.descr_pais        := vt_tab_csf_conhec_transp_receb(i).descr_pais;
         pk_csf_api_ct.gt_row_conhec_transp_receb.email             := trim(vt_tab_csf_conhec_transp_receb(i).email);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Local de Entrega constante no Conhecimento de Transporte.
         pk_csf_api_ct.pkb_integr_conhec_transp_receb ( est_log_generico            => est_log_generico
                                                      , est_row_conhec_transp_receb => pk_csf_api_ct.gt_row_conhec_transp_receb
                                                      , en_conhectransp_id          => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_receb fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_receb;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Expedidor da Carga.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_exped ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_EXPED') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_FANT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMAIL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_EXPED');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_EXPED' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_exped;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_exped fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_exped.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_exped.first..vt_tab_csf_conhec_transp_exped.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_exped := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_exped.conhectransp_id   := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_exped.cnpj              := trim(vt_tab_csf_conhec_transp_exped(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_exped.cpf               := trim(vt_tab_csf_conhec_transp_exped(i).cpf);
         pk_csf_api_ct.gt_row_conhec_transp_exped.ie                := trim(vt_tab_csf_conhec_transp_exped(i).ie);
         pk_csf_api_ct.gt_row_conhec_transp_exped.nome              := trim(vt_tab_csf_conhec_transp_exped(i).nome);
         pk_csf_api_ct.gt_row_conhec_transp_exped.nome_fant         := trim(vt_tab_csf_conhec_transp_exped(i).nome_fant);
         pk_csf_api_ct.gt_row_conhec_transp_exped.fone              := trim(vt_tab_csf_conhec_transp_exped(i).fone);
         pk_csf_api_ct.gt_row_conhec_transp_exped.lograd            := trim(vt_tab_csf_conhec_transp_exped(i).lograd);
         pk_csf_api_ct.gt_row_conhec_transp_exped.nro               := trim(vt_tab_csf_conhec_transp_exped(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_exped.compl             := trim(vt_tab_csf_conhec_transp_exped(i).compl);
         pk_csf_api_ct.gt_row_conhec_transp_exped.bairro            := trim(vt_tab_csf_conhec_transp_exped(i).bairro);
         pk_csf_api_ct.gt_row_conhec_transp_exped.ibge_cidade       := trim(vt_tab_csf_conhec_transp_exped(i).ibge_cidade);
         pk_csf_api_ct.gt_row_conhec_transp_exped.descr_cidade      := trim(vt_tab_csf_conhec_transp_exped(i).descr_cidade);
         pk_csf_api_ct.gt_row_conhec_transp_exped.cep               := vt_tab_csf_conhec_transp_exped(i).cep;
         pk_csf_api_ct.gt_row_conhec_transp_exped.uf                := upper(trim(vt_tab_csf_conhec_transp_exped(i).uf));
         pk_csf_api_ct.gt_row_conhec_transp_exped.cod_pais          := vt_tab_csf_conhec_transp_exped(i).cod_pais;
         pk_csf_api_ct.gt_row_conhec_transp_exped.descr_pais        := vt_tab_csf_conhec_transp_exped(i).descr_pais;
         pk_csf_api_ct.gt_row_conhec_transp_exped.email             := trim(vt_tab_csf_conhec_transp_exped(i).email);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Expedidor da Carga.
         pk_csf_api_ct.pkb_integr_conhec_transp_exped ( est_log_generico            => est_log_generico
                                                      , est_row_conhec_transp_exped => pk_csf_api_ct.gt_row_conhec_transp_exped
                                                      , en_conhectransp_id          => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_exped fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_exped;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Local da Coleta do Remetente
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrem_loc_colet ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp_rem.conhectransp_id%TYPE
                                  , en_conhectransprem_id      in             conhec_transp_rem.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTREM_LOC_COLET') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTREM_LOC_COLET');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTREM_LOC_COLET' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrem_loc_colet;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_loc_colet fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrem_loc_colet.count > 0 then
      --
      for i in vt_tab_csf_ctrem_loc_colet.first..vt_tab_csf_ctrem_loc_colet.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrem_loc_colet := null;
         --
         pk_csf_api_ct.gt_row_ctrem_loc_colet.conhectransprem_id   := en_conhectransprem_id;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.cnpj                 := vt_tab_csf_ctrem_loc_colet(i).cnpj;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.cpf                  := vt_tab_csf_ctrem_loc_colet(i).cpf;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.nome                 := vt_tab_csf_ctrem_loc_colet(i).nome;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.lograd               := vt_tab_csf_ctrem_loc_colet(i).lograd;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.nro                  := vt_tab_csf_ctrem_loc_colet(i).nro;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.compl                := vt_tab_csf_ctrem_loc_colet(i).compl;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.bairro               := vt_tab_csf_ctrem_loc_colet(i).bairro;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.ibge_cidade          := vt_tab_csf_ctrem_loc_colet(i).ibge_cidade;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.descr_cidade         := vt_tab_csf_ctrem_loc_colet(i).descr_cidade;
         pk_csf_api_ct.gt_row_ctrem_loc_colet.uf                   := vt_tab_csf_ctrem_loc_colet(i).uf;
         --
         vn_fase := 8;
         --
         -- Integra as Informações relativas ao Local da Coleta do Remetente.
         pk_csf_api_ct.pkb_integr_ctrem_loc_colet ( est_log_generico        => est_log_generico
                                                  , est_row_ctrem_loc_colet => pk_csf_api_ct.gt_row_ctrem_loc_colet
                                                  , en_conhectransp_id      => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_loc_colet fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrem_loc_colet;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos demais documentos do remetente.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrem_inf_outro ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp_rem.conhectransp_id%TYPE
                                  , en_conhectransprem_id      in             conhec_transp_rem.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTREM_INF_OUTRO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_OUTROS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOCTO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DOC_FISC' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTREM_INF_OUTRO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTREM_INF_OUTRO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrem_inf_outro;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_outro fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrem_inf_outro.count > 0 then
      --
      for i in vt_tab_csf_ctrem_inf_outro.first..vt_tab_csf_ctrem_inf_outro.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_outro := null;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_outro.conhectransprem_id   := en_conhectransprem_id;
         pk_csf_api_ct.gt_row_ctrem_inf_outro.dm_tipo_doc          := vt_tab_csf_ctrem_inf_outro(i).dm_tipo_doc;
         pk_csf_api_ct.gt_row_ctrem_inf_outro.descr_outros         := vt_tab_csf_ctrem_inf_outro(i).descr_outros;
         pk_csf_api_ct.gt_row_ctrem_inf_outro.nro_docto            := vt_tab_csf_ctrem_inf_outro(i).nro_docto;
         pk_csf_api_ct.gt_row_ctrem_inf_outro.dt_emissao           := vt_tab_csf_ctrem_inf_outro(i).dt_emissao;
         pk_csf_api_ct.gt_row_ctrem_inf_outro.vl_doc_fisc          := vt_tab_csf_ctrem_inf_outro(i).vl_doc_fisc;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos demais documentos do remetente.
         pk_csf_api_ct.pkb_integr_ctrem_inf_outro ( est_log_generico        => est_log_generico
                                                  , est_row_ctrem_inf_outro => pk_csf_api_ct.gt_row_ctrem_inf_outro
                                                  , en_conhectransp_id      => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_outro fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrem_inf_outro;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações das Notas Fiscais Eletrônicas do remetente.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrem_inf_nfe ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_rem.conhectransp_id%TYPE
                                , en_conhectransprem_id      in             conhec_transp_rem.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTREM_INF_NFE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PIN' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTREM_INF_NFE');
   --
   vn_fase := 2;
   --   
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTREM_INF_NFE' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrem_inf_nfe;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_nfe fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrem_inf_nfe.count > 0 then
      --
      for i in vt_tab_csf_ctrem_inf_nfe.first..vt_tab_csf_ctrem_inf_nfe.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_nfe := null;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_nfe.conhectransprem_id   := en_conhectransprem_id;
         pk_csf_api_ct.gt_row_ctrem_inf_nfe.nro_chave_nfe        := trim(vt_tab_csf_ctrem_inf_nfe(i).nro_chave_nfe);
         pk_csf_api_ct.gt_row_ctrem_inf_nfe.pin                  := vt_tab_csf_ctrem_inf_nfe(i).pin;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações das Notas Fiscais Eletrônicas do remetente.
         pk_csf_api_ct.pkb_integr_ctrem_inf_nfe ( est_log_generico       => est_log_generico
                                                , est_row_ctrem_inf_nfe  => pk_csf_api_ct.gt_row_ctrem_inf_nfe
                                                , en_conhectransp_id     => en_conhectransp_id
                                                );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_nfe fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrem_inf_nfe;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Local de retirada constante na NF.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrem_inf_nf_locret  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp_rem.conhectransp_id%TYPE
                                       , en_ctreminfnf_id           in             ctrem_inf_nf.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number
                                       , ev_serie_nf                in             varchar2
                                       , ev_nro_nf                  in             varchar2 )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTREM_INF_NF_LOCRET') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTREM_INF_NF_LOCRET');
   --
   vn_fase := 2;
   --   
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS || ' = ' || '''' || ev_serie_nf || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS || ' = ' || '''' || ev_nro_nf || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTREM_INF_NF_LOCRET' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrem_inf_nf_locret;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_nf_locret fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrem_inf_nf_locret.count > 0 then
      --
      for i in vt_tab_csf_ctrem_inf_nf_locret.first..vt_tab_csf_ctrem_inf_nf_locret.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret := null;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.ctreminfnf_id   := en_ctreminfnf_id;
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.cnpj            := trim(vt_tab_csf_ctrem_inf_nf_locret(i).cnpj);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.cpf             := trim(vt_tab_csf_ctrem_inf_nf_locret(i).cpf);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.nome            := trim(vt_tab_csf_ctrem_inf_nf_locret(i).nome);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.lograd          := trim(vt_tab_csf_ctrem_inf_nf_locret(i).lograd);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.nro             := trim(vt_tab_csf_ctrem_inf_nf_locret(i).nro);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.compl           := trim(vt_tab_csf_ctrem_inf_nf_locret(i).compl);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.bairro          := trim(vt_tab_csf_ctrem_inf_nf_locret(i).bairro);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.ibge_cidade     := trim(vt_tab_csf_ctrem_inf_nf_locret(i).ibge_cidade);
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.descr_cidade    := vt_tab_csf_ctrem_inf_nf_locret(i).descr_cidade;
         pk_csf_api_ct.gt_row_ctrem_inf_nf_locret.uf              := upper(trim(vt_tab_csf_ctrem_inf_nf_locret(i).uf));
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Local de retirada constante na NF.
         pk_csf_api_ct. pkb_integr_ctrem_inf_nf_locret ( est_log_generico            => est_log_generico
                                                       , est_row_ctrem_inf_nf_locret => pk_csf_api_ct.gt_row_ctrem_inf_nf_locret
                                                       , en_conhectransp_id          => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_nf_locret fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrem_inf_nf_locret;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações das Notas Fiscais NÃO eletrônicas do remetente
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ctrem_inf_nf  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_rem.conhectransp_id%TYPE
                                , en_conhectransprem_id      in             conhec_transp_rem.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CTREM_INF_NF') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_ROMA_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_PED_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BC_ICMS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ICMS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BC_ICMSST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ICMSST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_PROD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CFOP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_KG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PIN' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD_NF' || GV_ASPAS;
   --
  gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CTREM_INF_NF');
   --
   vn_fase := 2;
   --   
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CTREM_INF_NF' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ctrem_inf_nf;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_nf fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ctrem_inf_nf.count > 0 then
      --
      for i in vt_tab_csf_ctrem_inf_nf.first..vt_tab_csf_ctrem_inf_nf.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_nf := null;
         --
         pk_csf_api_ct.gt_row_ctrem_inf_nf.conhectransprem_id   := en_conhectransprem_id;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.nro_roma_nf          := vt_tab_csf_ctrem_inf_nf(i).nro_roma_nf;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.nro_ped_nf           := vt_tab_csf_ctrem_inf_nf(i).nro_ped_nf;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.serie                := trim(vt_tab_csf_ctrem_inf_nf(i).serie_nf);
         pk_csf_api_ct.gt_row_ctrem_inf_nf.nro_nf               := vt_tab_csf_ctrem_inf_nf(i).nro_nf;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.dt_emissao           := vt_tab_csf_ctrem_inf_nf(i).dt_emissao;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.vl_bc_icms           := vt_tab_csf_ctrem_inf_nf(i).vl_bc_icms;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.vl_icms              := vt_tab_csf_ctrem_inf_nf(i).vl_icms;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.vl_bc_icmsst         := vt_tab_csf_ctrem_inf_nf(i).vl_bc_icmsst;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.vl_icmsst            := vt_tab_csf_ctrem_inf_nf(i).vl_icmsst;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.vl_total_prod        := vt_tab_csf_ctrem_inf_nf(i).vl_total_prod;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.vl_total_nf          := vt_tab_csf_ctrem_inf_nf(i).vl_total_nf;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.cfop                 := vt_tab_csf_ctrem_inf_nf(i).cfop;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.peso_kg              := vt_tab_csf_ctrem_inf_nf(i).peso_kg;
         pk_csf_api_ct.gt_row_ctrem_inf_nf.pin                  := vt_tab_csf_ctrem_inf_nf(i).pin;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações das Notas Fiscais NÃO eletrônicas do remetente
         pk_csf_api_ct.pkb_integr_ctrem_inf_nf ( est_log_generico      => est_log_generico
                                               , est_row_ctrem_inf_nf  => pk_csf_api_ct.gt_row_ctrem_inf_nf
                                               , en_conhectransp_id    => en_conhectransp_id
                                               , ev_cod_mod            => lpad(trim(vt_tab_csf_ctrem_inf_nf(i).cod_mod_nf), 2, '0')
                                               );
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações do Local de retirada constante na NF.
         pkb_ler_ctrem_inf_nf_locret  ( est_log_generico           => est_log_generico
                                      , en_conhectransp_id         => en_conhectransp_id
                                      , en_ctreminfnf_id           => pk_csf_api_ct.gt_row_ctrem_inf_nf.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                      , en_dm_ind_emit             => en_dm_ind_emit
                                      , en_dm_ind_oper             => en_dm_ind_oper
                                      , ev_cod_part                => ev_cod_part
                                      , ev_cod_mod                 => ev_cod_mod
                                      , ev_serie                   => ev_serie
                                      , en_nro_ct                  => en_nro_ct
                                      , ev_serie_nf                => pk_csf_api_ct.gt_row_ctrem_inf_nf.serie
                                      , ev_nro_nf                  => pk_csf_api_ct.gt_row_ctrem_inf_nf.nro_nf ) ;
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ctrem_inf_nf fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ctrem_inf_nf;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Remetente das mercadorias transportadas pelo CT.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_rem  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp_rem.conhectransp_id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_REM') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_FANT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMAIL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_REM');
   --
   vn_fase := 2;
   --   
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_REM' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_rem;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_rem fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_rem.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_rem.first..vt_tab_csf_conhec_transp_rem.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_rem := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_rem.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_rem.cnpj            := trim(vt_tab_csf_conhec_transp_rem(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_rem.cpf             := trim(vt_tab_csf_conhec_transp_rem(i).cpf);
         pk_csf_api_ct.gt_row_conhec_transp_rem.ie              := trim(vt_tab_csf_conhec_transp_rem(i).ie);
         pk_csf_api_ct.gt_row_conhec_transp_rem.nome            := trim(vt_tab_csf_conhec_transp_rem(i).nome);
         pk_csf_api_ct.gt_row_conhec_transp_rem.nome_fant       := trim(vt_tab_csf_conhec_transp_rem(i).nome_fant);
         pk_csf_api_ct.gt_row_conhec_transp_rem.fone            := trim(vt_tab_csf_conhec_transp_rem(i).fone);
         pk_csf_api_ct.gt_row_conhec_transp_rem.lograd          := trim(vt_tab_csf_conhec_transp_rem(i).lograd);
         pk_csf_api_ct.gt_row_conhec_transp_rem.nro             := trim(vt_tab_csf_conhec_transp_rem(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_rem.compl           := trim(vt_tab_csf_conhec_transp_rem(i).compl);
         pk_csf_api_ct.gt_row_conhec_transp_rem.bairro          := trim(vt_tab_csf_conhec_transp_rem(i).bairro);
         pk_csf_api_ct.gt_row_conhec_transp_rem.ibge_cidade     := trim(vt_tab_csf_conhec_transp_rem(i).ibge_cidade);
         pk_csf_api_ct.gt_row_conhec_transp_rem.descr_cidade    := vt_tab_csf_conhec_transp_rem(i).descr_cidade;
         pk_csf_api_ct.gt_row_conhec_transp_rem.cep             := vt_tab_csf_conhec_transp_rem(i).cep;
         pk_csf_api_ct.gt_row_conhec_transp_rem.uf              := upper(trim(vt_tab_csf_conhec_transp_rem(i).uf));
         pk_csf_api_ct.gt_row_conhec_transp_rem.cod_pais        := vt_tab_csf_conhec_transp_rem(i).cod_pais;
         pk_csf_api_ct.gt_row_conhec_transp_rem.descr_pais      := vt_tab_csf_conhec_transp_rem(i).descr_pais;
         pk_csf_api_ct.gt_row_conhec_transp_rem.email           := trim(vt_tab_csf_conhec_transp_rem(i).email);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Remetente das mercadorias transportadas pelo CT.
         pk_csf_api_ct.pkb_integr_conhec_transp_rem ( est_log_generico          => est_log_generico
                                                    , est_row_conhec_transp_rem => pk_csf_api_ct.gt_row_conhec_transp_rem
                                                    , en_conhectransp_id        => en_conhectransp_id );

         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações das Notas Fiscais NÃO eletrônicas do remetente.
         pkb_ler_ctrem_inf_nf  ( est_log_generico           => est_log_generico
                               , en_conhectransp_id         => en_conhectransp_id
                               , en_conhectransprem_id      => pk_csf_api_ct.gt_row_conhec_transp_rem.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                               , en_dm_ind_emit             => en_dm_ind_emit
                               , en_dm_ind_oper             => en_dm_ind_oper
                               , ev_cod_part                => ev_cod_part
                               , ev_cod_mod                 => ev_cod_mod
                               , ev_serie                   => ev_serie
                               , en_nro_ct                  => en_nro_ct ) ;
         --
         vn_fase := 10;
         --
         -- Chama procedimento que lê as informações das Notas Fiscais eletrônicas do remetente.
         pkb_ler_ctrem_inf_nfe ( est_log_generico           => est_log_generico
                               , en_conhectransp_id         => en_conhectransp_id
                               , en_conhectransprem_id      => pk_csf_api_ct.gt_row_conhec_transp_rem.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                               , en_dm_ind_emit             => en_dm_ind_emit
                               , en_dm_ind_oper             => en_dm_ind_oper
                               , ev_cod_part                => ev_cod_part
                               , ev_cod_mod                 => ev_cod_mod
                               , ev_serie                   => ev_serie
                               , en_nro_ct                  => en_nro_ct ) ;
         --
         vn_fase := 11;
         --
         -- Chama procedimento que lê as informações dos demais documentos do remetente.
         pkb_ler_ctrem_inf_outro ( est_log_generico           => est_log_generico
                                 , en_conhectransp_id         => en_conhectransp_id
                                 , en_conhectransprem_id      => pk_csf_api_ct.gt_row_conhec_transp_rem.id
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                 , en_dm_ind_emit             => en_dm_ind_emit
                                 , en_dm_ind_oper             => en_dm_ind_oper
                                 , ev_cod_part                => ev_cod_part
                                 , ev_cod_mod                 => ev_cod_mod
                                 , ev_serie                   => ev_serie
                                 , en_nro_ct                  => en_nro_ct ) ;
         --
         vn_fase := 12;
         --
         --  Chama procedimento que lê as informações do local da coleta do remetente
         pkb_ler_ctrem_loc_colet ( est_log_generico           => est_log_generico
                                 , en_conhectransp_id         => en_conhectransp_id
                                 , en_conhectransprem_id      => pk_csf_api_ct.gt_row_conhec_transp_rem.id
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                 , en_dm_ind_emit             => en_dm_ind_emit
                                 , en_dm_ind_oper             => en_dm_ind_oper
                                 , ev_cod_part                => ev_cod_part
                                 , ev_cod_mod                 => ev_cod_mod
                                 , ev_serie                   => ev_serie
                                 , en_nro_ct                  => en_nro_ct ) ;
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_rem fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_rem;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Identificação do Emitente do CT.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_emit  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_EMIT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_FANT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_SN' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_EMIT');
   --
   vn_fase := 2;
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_EMIT' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_emit;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_emit fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_emit.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_emit.first..vt_tab_csf_conhec_transp_emit.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_emit := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_emit.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_emit.cnpj            := trim(vt_tab_csf_conhec_transp_emit(i).cpf_cnpj_emit);
         pk_csf_api_ct.gt_row_conhec_transp_emit.ie              := trim(vt_tab_csf_conhec_transp_emit(i).ie);
         pk_csf_api_ct.gt_row_conhec_transp_emit.nome            := trim(vt_tab_csf_conhec_transp_emit(i).nome);
         pk_csf_api_ct.gt_row_conhec_transp_emit.nome_fant       := trim(vt_tab_csf_conhec_transp_emit(i).nome_fant);
         pk_csf_api_ct.gt_row_conhec_transp_emit.lograd          := trim(vt_tab_csf_conhec_transp_emit(i).lograd);
         pk_csf_api_ct.gt_row_conhec_transp_emit.nro             := trim(vt_tab_csf_conhec_transp_emit(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_emit.compl           := trim(vt_tab_csf_conhec_transp_emit(i).compl);
         pk_csf_api_ct.gt_row_conhec_transp_emit.bairro          := trim(vt_tab_csf_conhec_transp_emit(i).bairro);
         pk_csf_api_ct.gt_row_conhec_transp_emit.ibge_cidade     := trim(vt_tab_csf_conhec_transp_emit(i).ibge_cidade);
         pk_csf_api_ct.gt_row_conhec_transp_emit.descr_cidade    := vt_tab_csf_conhec_transp_emit(i).descr_cidade;
         pk_csf_api_ct.gt_row_conhec_transp_emit.cep             := vt_tab_csf_conhec_transp_emit(i).cep;
         pk_csf_api_ct.gt_row_conhec_transp_emit.uf              := upper(trim(vt_tab_csf_conhec_transp_emit(i).uf));
         pk_csf_api_ct.gt_row_conhec_transp_emit.cod_pais        := vt_tab_csf_conhec_transp_emit(i).cod_pais;
         pk_csf_api_ct.gt_row_conhec_transp_emit.descr_pais      := vt_tab_csf_conhec_transp_emit(i).descr_pais;
         pk_csf_api_ct.gt_row_conhec_transp_emit.fone            := trim(vt_tab_csf_conhec_transp_emit(i).fone);
         pk_csf_api_ct.gt_row_conhec_transp_emit.dm_ind_sn       := vt_tab_csf_conhec_transp_emit(i).dm_ind_sn;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Identificação do Emitente do CT.
         pk_csf_api_ct.pkb_integr_conhec_transp_emit ( est_log_generico           => est_log_generico
                                                     , est_row_conhec_transp_emit => pk_csf_api_ct.gt_row_conhec_transp_emit
                                                     , en_conhectransp_id         => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_emit fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_emit;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Observações do Contribuinte/Fiscal.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_compl_obs  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_compl.conhectransp_id%TYPE
                                , en_conhectranspcompl_id    in             conhec_transp_compl.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_COMPL_OBS') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CAMPO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TEXTO' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_COMPL_OBS');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_COMPL_OBS' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_compl_obs;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_compl_obs fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_compl_obs.count > 0 then
      --
      for i in vt_tab_csf_ct_compl_obs.first..vt_tab_csf_ct_compl_obs.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_compl_obs := null;
         --
         pk_csf_api_ct.gt_row_ct_compl_obs.conhectranspcompl_id := en_conhectranspcompl_id;
         pk_csf_api_ct.gt_row_ct_compl_obs.dm_tipo              := vt_tab_csf_ct_compl_obs(i).dm_tipo;
         pk_csf_api_ct.gt_row_ct_compl_obs.campo                := trim(vt_tab_csf_ct_compl_obs(i).campo);
         pk_csf_api_ct.gt_row_ct_compl_obs.texto                := trim(vt_tab_csf_ct_compl_obs(i).texto);
         --
         vn_fase := 8;
         -- Chama procedimento que integra as informações do Observações do Contribuinte/Fiscal.
         pk_csf_api_ct.pkb_integr_ct_compl_obs ( est_log_generico     => est_log_generico
                                               , est_row_ct_compl_obs => pk_csf_api_ct.gt_row_ct_compl_obs
                                               , en_conhectransp_id   => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_compl_obs fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_compl_obs;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Sigla ou código interno da Filial/Porto/Estação/Aeroporto de Passagem.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_compl_pass  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             conhec_transp_compl.conhectransp_id%TYPE
                                 , en_conhectranspcompl_id    in             conhec_transp_compl.id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_COMPL_PASS') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PASS' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_COMPL_PASS');
   --
   vn_fase := 2;
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
        --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_COMPL_PASS' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_compl_pass;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_compl_pass fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_compl_pass.count > 0 then
      --
      for i in vt_tab_csf_ct_compl_pass.first..vt_tab_csf_ct_compl_pass.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_compl_pass := null;
         --
         pk_csf_api_ct.gt_row_ct_compl_pass.conhectranspcompl_id := en_conhectranspcompl_id;
         pk_csf_api_ct.gt_row_ct_compl_pass.pass                 := vt_tab_csf_ct_compl_pass(i).pass;
         --
         vn_fase := 8;
         -- Chama procedimento que integra as informações do Observações do Contribuinte/Fiscal.
         pk_csf_api_ct.pkb_integr_ct_compl_pass ( est_log_generico      => est_log_generico
                                                , est_row_ct_compl_pass => pk_csf_api_ct.gt_row_ct_compl_pass
                                                , en_conhectransp_id    => en_conhectransp_id );

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_compl_pass fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_compl_pass;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações de Dados complementares do CT-e para fins operacionais ou comerciais.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_compl  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_COMPL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CARAC_ADIC_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CARAC_ADIC_SERV' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMITENTE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ORIG_FLUXO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DEST_FLUXO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ROTA_FLUXO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_PER_ENTR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PROG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_INI' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_HOR_ENTR' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'HORA_PROG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'HORA_INI' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'HORA_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ORIG_CALC_FRETE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DEST_CALC_FRETE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'OBS_GERAL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_COMPL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_COMPL' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_compl;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_compl fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_conhec_transp_compl.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_compl.first..vt_tab_csf_conhec_transp_compl.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_compl := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_compl.conhectransp_id   := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_compl.carac_adic_transp := vt_tab_csf_conhec_transp_compl(i).carac_adic_transp;
         pk_csf_api_ct.gt_row_conhec_transp_compl.carac_adic_serv   := vt_tab_csf_conhec_transp_compl(i).carac_adic_serv;
         pk_csf_api_ct.gt_row_conhec_transp_compl.emitente          := vt_tab_csf_conhec_transp_compl(i).emitente;
         pk_csf_api_ct.gt_row_conhec_transp_compl.orig_fluxo        := vt_tab_csf_conhec_transp_compl(i).orig_fluxo;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dest_fluxo        := vt_tab_csf_conhec_transp_compl(i).dest_fluxo;
         pk_csf_api_ct.gt_row_conhec_transp_compl.rota_fluxo        := vt_tab_csf_conhec_transp_compl(i).rota_fluxo;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dm_tp_per_entr    := vt_tab_csf_conhec_transp_compl(i).dm_tp_per_entr;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dt_prog           := vt_tab_csf_conhec_transp_compl(i).dt_prog;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dt_ini            := vt_tab_csf_conhec_transp_compl(i).dt_ini;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dt_fim            := vt_tab_csf_conhec_transp_compl(i).dt_fim;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dm_tp_hor_entr    := vt_tab_csf_conhec_transp_compl(i).dm_tp_hor_entr;
         pk_csf_api_ct.gt_row_conhec_transp_compl.hora_prog         := vt_tab_csf_conhec_transp_compl(i).hora_prog;
         pk_csf_api_ct.gt_row_conhec_transp_compl.hora_ini          := vt_tab_csf_conhec_transp_compl(i).hora_ini;
         pk_csf_api_ct.gt_row_conhec_transp_compl.hora_fim          := vt_tab_csf_conhec_transp_compl(i).hora_fim;
         pk_csf_api_ct.gt_row_conhec_transp_compl.orig_calc_frete   := vt_tab_csf_conhec_transp_compl(i).orig_calc_frete;
         pk_csf_api_ct.gt_row_conhec_transp_compl.dest_calc_frete   := vt_tab_csf_conhec_transp_compl(i).dest_calc_frete;
         pk_csf_api_ct.gt_row_conhec_transp_compl.obs_geral         := vt_tab_csf_conhec_transp_compl(i).obs_geral;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Observações do Contribuinte/Fiscal.
         pk_csf_api_ct.pkb_integr_conhec_transp_compl ( est_log_generico            => est_log_generico
                                                      , est_row_conhec_transp_compl => pk_csf_api_ct.gt_row_conhec_transp_compl
                                                      , en_conhectransp_id          => en_conhectransp_id );
         --
         vn_fase := 9;
         --
         -- Chama procedimento que lê as informações de Sigla ou código interno da Filial/Porto/Estação/Aeroporto de Passagem.
         pkb_ler_ct_compl_pass  ( est_log_generico           => est_log_generico
                                , en_conhectransp_id         => en_conhectransp_id
                                , en_conhectranspcompl_id    => pk_csf_api_ct.gt_row_conhec_transp_compl.id
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                                , en_dm_ind_emit             => en_dm_ind_emit
                                , en_dm_ind_oper             => en_dm_ind_oper
                                , ev_cod_part                => ev_cod_part
                                , ev_cod_mod                 => ev_cod_mod
                                , ev_serie                   => ev_serie
                                , en_nro_ct                  => en_nro_ct ) ;

         --
         vn_fase := 10;
         --
         -- Chama procedimento que lê as informações de Observações do Contribuinte/Fiscal.
         pkb_ler_ct_compl_obs  ( est_log_generico           => est_log_generico
                               , en_conhectransp_id         => en_conhectransp_id
                               , en_conhectranspcompl_id    => pk_csf_api_ct.gt_row_conhec_transp_compl.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           => ev_cpf_cnpj_emit
                               , en_dm_ind_emit             => en_dm_ind_emit
                               , en_dm_ind_oper             => en_dm_ind_oper
                               , ev_cod_part                => ev_cod_part
                               , ev_cod_mod                 => ev_cod_mod
                               , ev_serie                   => ev_serie
                               , en_nro_ct                  => en_nro_ct );

      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_compl fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_compl;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Indicador do "papel" do tomador do serviço no CT-e, pessoa que o serviço foi prestado.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_tomador  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id         in             conhec_transp.id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit           in             varchar2
                                         , en_dm_ind_emit             in             number
                                         , en_dm_ind_oper             in             number
                                         , ev_cod_part                in             varchar2
                                         , ev_cod_mod                 in             varchar2
                                         , ev_serie                   in             varchar2
                                         , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_TOMADOR') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NOME_FANT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'FONE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGRAD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COMPL' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'BAIRRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CEP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_PAIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'EMAIL' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_TOMADOR');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_TOMADOR' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_tomador;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_tomador fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_tomador.count > 0 then
      --
      for i in vt_tab_csf_ct_tomador.first..vt_tab_csf_ct_tomador.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_tomador := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_tomador.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_tomador.cnpj            := trim(vt_tab_csf_ct_tomador(i).cnpj);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.cpf             := trim(vt_tab_csf_ct_tomador(i).cpf);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.ie              := trim(vt_tab_csf_ct_tomador(i).ie);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.nome            := trim(vt_tab_csf_ct_tomador(i).nome);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.nome_fant       := trim(vt_tab_csf_ct_tomador(i).nome_fant);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.fone            := trim(vt_tab_csf_ct_tomador(i).fone);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.lograd          := trim(vt_tab_csf_ct_tomador(i).lograd);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.nro             := trim(vt_tab_csf_ct_tomador(i).nro);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.compl           := trim(vt_tab_csf_ct_tomador(i).compl);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.bairro          := trim(vt_tab_csf_ct_tomador(i).bairro);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.ibge_cidade     := trim(vt_tab_csf_ct_tomador(i).ibge_cidade);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.descr_cidade    := vt_tab_csf_ct_tomador(i).descr_cidade;
         pk_csf_api_ct.gt_row_conhec_transp_tomador.cep             := vt_tab_csf_ct_tomador(i).cep;
         pk_csf_api_ct.gt_row_conhec_transp_tomador.uf              := upper(vt_tab_csf_ct_tomador(i).uf);
         pk_csf_api_ct.gt_row_conhec_transp_tomador.cod_pais        := vt_tab_csf_ct_tomador(i).cod_pais;
         pk_csf_api_ct.gt_row_conhec_transp_tomador.descr_pais      := vt_tab_csf_ct_tomador(i).descr_pais;
         pk_csf_api_ct.gt_row_conhec_transp_tomador.email           := trim(vt_tab_csf_ct_tomador(i).email);
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Indicador do "papel" do tomador do serviço no CT-e, pessoa que o serviço foi prestado.
         pk_csf_api_ct.pkb_integr_ct_tomador ( est_log_generico     => est_log_generico
                                             , est_row_ct_tomador   => pk_csf_api_ct.gt_row_conhec_transp_tomador
                                             , en_conhectransp_id   => en_conhectransp_id );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_tomador fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_tomador;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos Dados das Duplicatas do CT-e..
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_dup  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_DUP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DUP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_VENC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DUP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_DUP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_DUP' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_dup;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_dup fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_dup.count > 0 then
      --
      for i in vt_tab_csf_ct_dup.first..vt_tab_csf_ct_dup.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_dup := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_dup.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_dup.nro_dup         := vt_tab_csf_ct_dup(i).nro_dup;
         pk_csf_api_ct.gt_row_conhec_transp_dup.dt_venc         := vt_tab_csf_ct_dup(i).dt_venc;
         pk_csf_api_ct.gt_row_conhec_transp_dup.vl_dup          := vt_tab_csf_ct_dup(i).vl_dup;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Indicador do "papel" do tomador do serviço no CT-e, pessoa que o serviço foi prestado.
         pk_csf_api_ct.pkb_integr_conhec_transp_dup ( est_log_generico          => est_log_generico
                                                    , est_row_Conhec_Transp_dup => pk_csf_api_ct.gt_row_conhec_transp_dup );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_dup fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_dup;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos Dados da Fatura do CT-e.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_fat  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_FAT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_FAT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ORIG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DESC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_LIQ' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_FAT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_FAT' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_fat;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_fat fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_fat.count > 0 then
      --
      for i in vt_tab_csf_ct_fat.first..vt_tab_csf_ct_fat.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_fat := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_fat.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_fat.nro_fat         := vt_tab_csf_ct_fat(i).nro_fat;
         pk_csf_api_ct.gt_row_conhec_transp_fat.vl_orig         := vt_tab_csf_ct_fat(i).vl_orig;
         pk_csf_api_ct.gt_row_conhec_transp_fat.vl_desc         := vt_tab_csf_ct_fat(i).vl_desc;
         pk_csf_api_ct.gt_row_conhec_transp_fat.vl_liq          := vt_tab_csf_ct_fat(i).vl_liq;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Indicador do "papel" do tomador do serviço no CT-e, pessoa que o serviço foi prestado.
         pk_csf_api_ct.pkb_integr_conhec_transp_fat ( est_log_generico          => est_log_generico
                                                    , est_row_Conhec_Transp_fat => pk_csf_api_ct.gt_row_conhec_transp_fat );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_fat fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_fat;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos Participantes autorizados a fazer download do XML.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_aut_xml ( est_log_generico           in out nocopy  dbms_sql.number_table
                             , en_conhectransp_id         in             conhec_transp.id%TYPE
                           --| parâmetros de chave
                             , ev_cpf_cnpj_emit           in             varchar2
                             , en_dm_ind_emit             in             number
                             , en_dm_ind_oper             in             number
                             , ev_cod_part                in             varchar2
                             , ev_cod_mod                 in             varchar2
                             , ev_serie                   in             varchar2
                             , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_AUT_XML') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CPF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_AUT_XML');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_AUT_XML' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_aut_xml;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aut_xml fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_aut_xml.count > 0 then
      --
      for i in vt_tab_csf_ct_aut_xml.first..vt_tab_csf_ct_aut_xml.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_aut_xml := null;
         --
         pk_csf_api_ct.gt_row_ct_aut_xml.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_aut_xml.cnpj            := vt_tab_csf_ct_aut_xml(i).cnpj;
         pk_csf_api_ct.gt_row_ct_aut_xml.cpf             := vt_tab_csf_ct_aut_xml(i).cpf;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos Participantes autorizados a fazer download do XML
         pk_csf_api_ct.pkb_integr_ct_aut_xml ( est_log_generico   => est_log_generico
                                             , est_row_ct_aut_xml => pk_csf_api_ct.gt_row_ct_aut_xml );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_aut_xml fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_aut_xml;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do Multimodal.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_multimodal ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp.id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_MULTIMODAL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART_CONSG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART_RED' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MUN_ORIG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MUN_DEST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'OTM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_NAT_FRT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_LIQ_FRT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_GRIS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_PDG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_OUT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_FRT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VEIC_ID' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF_ID' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_MULTIMODAL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_MULTIMODAL' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_multimodal;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_multimodal fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_multimodal.count > 0 then
      --
      for i in vt_tab_csf_ct_multimodal.first..vt_tab_csf_ct_multimodal.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_multimodal := null;
         --
         pk_csf_api_ct.gt_row_ct_multimodal.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_multimodal.cod_mun_orig    := vt_tab_csf_ct_multimodal(i).cod_mun_orig;
         pk_csf_api_ct.gt_row_ct_multimodal.cod_mun_dest    := vt_tab_csf_ct_multimodal(i).cod_mun_dest;
         pk_csf_api_ct.gt_row_ct_multimodal.otm             := vt_tab_csf_ct_multimodal(i).otm;
         pk_csf_api_ct.gt_row_ct_multimodal.dm_ind_nat_frt  := vt_tab_csf_ct_multimodal(i).dm_ind_nat_frt;
         pk_csf_api_ct.gt_row_ct_multimodal.vl_liq_frt      := vt_tab_csf_ct_multimodal(i).vl_liq_frt;
         pk_csf_api_ct.gt_row_ct_multimodal.vl_gris         := vt_tab_csf_ct_multimodal(i).vl_gris;
         pk_csf_api_ct.gt_row_ct_multimodal.vl_pdg          := vt_tab_csf_ct_multimodal(i).vl_pdg;
         pk_csf_api_ct.gt_row_ct_multimodal.vl_out          := vt_tab_csf_ct_multimodal(i).vl_out;
         pk_csf_api_ct.gt_row_ct_multimodal.vl_frt          := vt_tab_csf_ct_multimodal(i).vl_frt;
         pk_csf_api_ct.gt_row_ct_multimodal.veic_id         := vt_tab_csf_ct_multimodal(i).veic_id;
         pk_csf_api_ct.gt_row_ct_multimodal.uf_id           := vt_tab_csf_ct_multimodal(i).uf_id;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do Multimodal
         pk_csf_api_ct.pkb_integr_ct_multimodal ( est_log_generico      => est_log_generico
                                                , est_row_ct_multimodal => pk_csf_api_ct.gt_row_ct_multimodal
                                                , ev_cod_part_consg     => vt_tab_csf_ct_multimodal(i).cod_part_consg
                                                , ev_cod_part_red       => vt_tab_csf_ct_multimodal(i).cod_part_red
                                                , en_multorg_id         => gn_multorg_id
                                                );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_multimodal fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_multimodal;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do relacionamento de Nota Fiscal com Informação da Unidade do Transporte.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_r_nf_ctinfunidtransp ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number
                                       )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_R_NF_CTINFUNIDTRANSP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_R_NF_CTINFUNIDTRANSP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_R_NF_CTINFUNIDTRANSP' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_r_nf_infunidtransp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nf_ctinfunidtransp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_r_nf_infunidtransp.count > 0 then
      --
      for i in vt_tab_csf_r_nf_infunidtransp.first..vt_tab_csf_r_nf_infunidtransp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_r_ctinfnf_ctinfut := null;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do relacionamento de Nota Fiscal com Informação da Unidade do Transporte
         pk_csf_api_ct.pkb_integr_r_nf_infunidtransp ( est_log_generico           => est_log_generico
                                                     , est_row_r_nf_infunidtransp => pk_csf_api_ct.gt_row_r_ctinfnf_ctinfut
                                                     , en_conhectransp_id         => en_conhectransp_id
                                                     , ev_cod_mod_nf              => vt_tab_csf_r_nf_infunidtransp(i).cod_mod_nf       
                                                     , ev_serie_nf                => vt_tab_csf_r_nf_infunidtransp(i).serie_nf         
                                                     , en_nro_nf                  => vt_tab_csf_r_nf_infunidtransp(i).nro_nf           
                                                     , en_dm_tp_unid_transp       => vt_tab_csf_r_nf_infunidtransp(i).dm_tp_unid_transp
                                                     , ev_ident_unid_transp       => vt_tab_csf_r_nf_infunidtransp(i).ident_unid_transp
                                                     );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nf_ctinfunidtransp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_r_nf_ctinfunidtransp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do relacionamento de Nota Fiscal com Informação da Unidade da Carga
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_r_nf_ctinfunidcarga ( est_log_generico           in out nocopy  dbms_sql.number_table
                                      , en_conhectransp_id         in             conhec_transp.id%TYPE
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit           in             varchar2
                                      , en_dm_ind_emit             in             number
                                      , en_dm_ind_oper             in             number
                                      , ev_cod_part                in             varchar2
                                      , ev_cod_mod                 in             varchar2
                                      , ev_serie                   in             varchar2
                                      , en_nro_ct                  in             number
                                      )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_R_NF_CTINFUNIDCARGA') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_R_NF_CTINFUNIDCARGA');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_R_NF_CTINFUNIDCARGA' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_r_nf_infunidcarga;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nf_ctinfunidcarga fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_r_nf_infunidcarga.count > 0 then
      --
      for i in vt_tab_csf_r_nf_infunidcarga.first..vt_tab_csf_r_nf_infunidcarga.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_r_ctinfnf_ctinfuc := null;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do relacionamento de Nota Fiscal com Informação da Unidade de Carga
         pk_csf_api_ct.pkb_integr_r_nf_infunidcarga ( est_log_generico          => est_log_generico
                                                    , est_row_r_nf_infunidcarga => pk_csf_api_ct.gt_row_r_ctinfnf_ctinfuc
                                                    , en_conhectransp_id        => en_conhectransp_id
                                                    , ev_cod_mod_nf             => vt_tab_csf_r_nf_infunidcarga(i).cod_mod_nf
                                                    , ev_serie_nf               => vt_tab_csf_r_nf_infunidcarga(i).serie_nf
                                                    , en_nro_nf                 => vt_tab_csf_r_nf_infunidcarga(i).nro_nf
                                                    , en_dm_tp_unid_carga       => vt_tab_csf_r_nf_infunidcarga(i).dm_tp_unid_carga
                                                    , ev_ident_unid_carga       => vt_tab_csf_r_nf_infunidcarga(i).ident_unid_carga
                                                    );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nf_ctinfunidcarga fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_r_nf_ctinfunidcarga;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações das NF do Conhecimento de Transporte.
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_nf ( est_log_generico           in out nocopy  dbms_sql.number_table
                            , en_conhectransp_id         in             conhec_transp.id%TYPE
                          --| parâmetros de chave
                            , ev_cpf_cnpj_emit           in             varchar2
                            , en_dm_ind_emit             in             number
                            , en_dm_ind_oper             in             number
                            , ev_cod_part                in             varchar2
                            , ev_cod_mod                 in             varchar2
                            , ev_serie                   in             varchar2
                            , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_NF') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_ROMA_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_PED_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BC_ICMS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ICMS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BC_ICMSST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ICMSST' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_PROD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOTAL_NF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CFOP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PESO_KG' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PIN' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV_ENT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_NF');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_NF' || chr(10);
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_inf_nf;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_nf fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_inf_nf.count > 0 then
      --
      for i in vt_tab_csf_ct_inf_nf.first..vt_tab_csf_ct_inf_nf.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_nf := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_nf.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_inf_nf.serie           := vt_tab_csf_ct_inf_nf(i).serie_nf;
         pk_csf_api_ct.gt_row_ct_inf_nf.nro_nf          := vt_tab_csf_ct_inf_nf(i).nro_nf;
         pk_csf_api_ct.gt_row_ct_inf_nf.dt_emissao      := vt_tab_csf_ct_inf_nf(i).dt_emissao;
         pk_csf_api_ct.gt_row_ct_inf_nf.nro_roma_nf     := vt_tab_csf_ct_inf_nf(i).nro_roma_nf;
         pk_csf_api_ct.gt_row_ct_inf_nf.nro_ped_nf      := vt_tab_csf_ct_inf_nf(i).nro_ped_nf;
         pk_csf_api_ct.gt_row_ct_inf_nf.vl_bc_icms      := vt_tab_csf_ct_inf_nf(i).vl_bc_icms;
         pk_csf_api_ct.gt_row_ct_inf_nf.vl_icms         := vt_tab_csf_ct_inf_nf(i).vl_icms;
         pk_csf_api_ct.gt_row_ct_inf_nf.vl_bc_icmsst    := vt_tab_csf_ct_inf_nf(i).vl_bc_icmsst;
         pk_csf_api_ct.gt_row_ct_inf_nf.vl_icmsst       := vt_tab_csf_ct_inf_nf(i).vl_icmsst;
         pk_csf_api_ct.gt_row_ct_inf_nf.vl_total_prod   := vt_tab_csf_ct_inf_nf(i).vl_total_prod;
         pk_csf_api_ct.gt_row_ct_inf_nf.vl_total_nf     := vt_tab_csf_ct_inf_nf(i).vl_total_nf;
         pk_csf_api_ct.gt_row_ct_inf_nf.cfop            := vt_tab_csf_ct_inf_nf(i).cfop;
         pk_csf_api_ct.gt_row_ct_inf_nf.peso_kg         := vt_tab_csf_ct_inf_nf(i).peso_kg;
         pk_csf_api_ct.gt_row_ct_inf_nf.pin             := vt_tab_csf_ct_inf_nf(i).pin;
         pk_csf_api_ct.gt_row_ct_inf_nf.dt_prev_ent     := vt_tab_csf_ct_inf_nf(i).dt_prev_ent;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações das NF do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_inf_nf ( est_log_generico  => est_log_generico
                                            , est_row_ct_inf_nf => pk_csf_api_ct.gt_row_ct_inf_nf
                                            , ev_cod_mod        => vt_tab_csf_ct_inf_nf(i).cod_mod_nf
                                            );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_nf fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_nf;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do relacionamento de NFe com Informação da Unidade do Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_r_nfe_ctinfunidtransp ( est_log_generico           in out nocopy  dbms_sql.number_table
                                        , en_conhectransp_id         in             conhec_transp.id%TYPE
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           in             varchar2
                                        , en_dm_ind_emit             in             number
                                        , en_dm_ind_oper             in             number
                                        , ev_cod_part                in             varchar2
                                        , ev_cod_mod                 in             varchar2
                                        , ev_serie                   in             varchar2
                                        , en_nro_ct                  in             number
                                        )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_R_NFE_CTINFUNIDTRANSP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_R_NFE_CTINFUNIDTRANSP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_R_NFE_CTINFUNIDTRANSP' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_r_nfe_infunidtransp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nfe_ctinfunidtransp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_r_nfe_infunidtransp.count > 0 then
      --
      for i in vt_tab_csf_r_nfe_infunidtransp.first..vt_tab_csf_r_nfe_infunidtransp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_r_ctinfnfe_ctinfut := null;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do elacionamento de NFe com Informação da Unidade da Transporte
         pk_csf_api_ct.pkb_integr_r_nfe_infunidtransp ( est_log_generico            => est_log_generico
                                                      , est_row_r_nfe_infunidtransp => pk_csf_api_ct.gt_row_r_ctinfnfe_ctinfut
                                                      , en_conhectransp_id          => en_conhectransp_id
                                                      , ev_nro_chave_nfe            => vt_tab_csf_r_nfe_infunidtransp(i).nro_chave_nfe
                                                      , en_dm_tp_unid_transp        => vt_tab_csf_r_nfe_infunidtransp(i).dm_tp_unid_transp
                                                      , ev_ident_unid_transp        => vt_tab_csf_r_nfe_infunidtransp(i).ident_unid_transp
                                                      );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nfe_ctinfunidtransp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_r_nfe_ctinfunidtransp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do relacionamento de NFe com Informação da Unidade de Carga
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_r_nfe_ctinfunidcarga ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number
                                       )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_R_NFE_CTINFUNIDCARGA') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_R_NFE_CTINFUNIDCARGA');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_R_NFE_CTINFUNIDCARGA' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_r_nfe_infunidcarga;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nfe_ctinfunidcarga fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_r_nfe_infunidcarga.count > 0 then
      --
      for i in vt_tab_csf_r_nfe_infunidcarga.first..vt_tab_csf_r_nfe_infunidcarga.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_r_ctinfnfe_ctinfuc := null;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do relacionamento de NFe com Informação da Unidade da Carga
         pk_csf_api_ct.pkb_integr_r_nfe_infunidcarga ( est_log_generico           => est_log_generico
                                                     , est_row_r_nfe_infunidcarga => pk_csf_api_ct.gt_row_r_ctinfnfe_ctinfuc
                                                     , en_conhectransp_id         => en_conhectransp_id
                                                     , ev_nro_chave_nfe           => vt_tab_csf_r_nfe_infunidcarga(i).nro_chave_nfe
                                                     , en_dm_tp_unid_carga        => vt_tab_csf_r_nfe_infunidcarga(i).dm_tp_unid_carga
                                                     , ev_ident_unid_carga        => vt_tab_csf_r_nfe_infunidcarga(i).ident_unid_carga
                                                     );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_nfe_ctinfunidcarga fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_r_nfe_ctinfunidcarga;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações das NF-e do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_nfe ( est_log_generico           in out nocopy  dbms_sql.number_table
                             , en_conhectransp_id         in             conhec_transp.id%TYPE
                           --| parâmetros de chave
                             , ev_cpf_cnpj_emit           in             varchar2
                             , en_dm_ind_emit             in             number
                             , en_dm_ind_oper             in             number
                             , ev_cod_part                in             varchar2
                             , ev_cod_mod                 in             varchar2
                             , ev_serie                   in             varchar2
                             , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_NFE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_NFE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PIN' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV_ENT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_NFE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_NFE' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_inf_nfe;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_nfe fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_inf_nfe.count > 0 then
      --
      for i in vt_tab_csf_ct_inf_nfe.first..vt_tab_csf_ct_inf_nfe.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_nfe := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_nfe.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_inf_nfe.nro_chave_nfe   := vt_tab_csf_ct_inf_nfe(i).nro_chave_nfe;
         pk_csf_api_ct.gt_row_ct_inf_nfe.pin             := vt_tab_csf_ct_inf_nfe(i).pin;
         pk_csf_api_ct.gt_row_ct_inf_nfe.dt_prev_ent     := vt_tab_csf_ct_inf_nfe(i).dt_prev_ent;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações das NF-e do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_inf_nfe ( est_log_generico   => est_log_generico
                                             , est_row_ct_inf_nfe => pk_csf_api_ct.gt_row_ct_inf_nfe
                                             );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_nfe fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_nfe;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do relacionamento de Outro Documento com Informação da Unidade do Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_r_outro_ctinfunidtrans ( est_log_generico           in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id         in             conhec_transp.id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit           in             varchar2
                                         , en_dm_ind_emit             in             number
                                         , en_dm_ind_oper             in             number
                                         , ev_cod_part                in             varchar2
                                         , ev_cod_mod                 in             varchar2
                                         , ev_serie                   in             varchar2
                                         , en_nro_ct                  in             number
                                         )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_R_OUTRO_CTINFUNIDTRANSP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO_DOC'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOCTO'         || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_R_OUTRO_CTINFUNIDTRANSP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE'   || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT'  || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_R_OUTRO_CTINFUNIDTRANSP' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_r_outr_ctunidtransp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_outro_ctinfunidtrans fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_r_outr_ctunidtransp.count > 0 then
      --
      for i in vt_tab_csf_r_outr_ctunidtransp.first..vt_tab_csf_r_outr_ctunidtransp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_r_ctinfoutro_ctinfut := null;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do relacionamento de Outro Documento com Informação da Unidade do Transporte
         pk_csf_api_ct.pkb_integr_r_outro_infut ( est_log_generico              => est_log_generico
                                                , est_row_r_outro_infunidtransp => pk_csf_api_ct.gt_row_r_ctinfoutro_ctinfut
                                                , en_conhectransp_id            => en_conhectransp_id
                                                , ev_dm_tipo_doc                => vt_tab_csf_r_outr_ctunidtransp(i).dm_tipo_doc
                                                , ev_nro_docto                  => vt_tab_csf_r_outr_ctunidtransp(i).nro_docto
                                                , en_dm_tp_unid_transp          => vt_tab_csf_r_outr_ctunidtransp(i).dm_tp_unid_transp
                                                , ev_ident_unid_transp          => vt_tab_csf_r_outr_ctunidtransp(i).ident_unid_transp
                                                );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_outro_ctinfunidtrans fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_r_outro_ctinfunidtrans;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações do relacionamento de Outro Documento com Informação da Unidade da Carga
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_r_outro_ctinfunidcarga ( est_log_generico           in out nocopy  dbms_sql.number_table
                                         , en_conhectransp_id         in             conhec_transp.id%TYPE
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit           in             varchar2
                                         , en_dm_ind_emit             in             number
                                         , en_dm_ind_oper             in             number
                                         , ev_cod_part                in             varchar2
                                         , ev_cod_mod                 in             varchar2
                                         , ev_serie                   in             varchar2
                                         , en_nro_ct                  in             number
                                         )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_R_OUTRO_CTINFUNIDCARGA') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO_DOC'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOCTO'        || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_R_OUTRO_CTINFUNIDCARGA');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_R_OUTRO_CTINFUNIDCARGA' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_r_outr_ctunidcarga;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_outro_ctinfunidcarga fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_r_outr_ctunidcarga.count > 0 then
      --
      for i in vt_tab_csf_r_outr_ctunidcarga.first..vt_tab_csf_r_outr_ctunidcarga.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_r_ctinfoutro_ctinfuc := null;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações do relacionamento de Outro Documento com Informação da Unidade da Carga
         pk_csf_api_ct.pkb_integr_r_outro_infuc ( est_log_generico             => est_log_generico
                                                , est_row_r_outro_infunidcarga => pk_csf_api_ct.gt_row_r_ctinfoutro_ctinfuc
                                                , en_conhectransp_id           => en_conhectransp_id
                                                , ev_dm_tipo_doc               => vt_tab_csf_r_outr_ctunidcarga(i).dm_tipo_doc
                                                , ev_nro_docto                 => vt_tab_csf_r_outr_ctunidcarga(i).nro_docto
                                                , en_dm_tp_unid_carga          => vt_tab_csf_r_outr_ctunidcarga(i).dm_tp_unid_carga
                                                , ev_ident_unid_carga          => vt_tab_csf_r_outr_ctunidcarga(i).ident_unid_carga
                                                );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_r_outro_ctinfunidcarga fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_r_outro_ctinfunidcarga;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do ICMS de partilha com a UF de término do serviço de transporte na operação interestadual. - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_part_icms  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                , en_conhectransp_id         in             conhec_transp_part_icms.conhectransp_id%TYPE
                              --| parâmetros de chave
                                , ev_cpf_cnpj_emit           in             varchar2
                                , en_dm_ind_emit             in             number
                                , en_dm_ind_oper             in             number
                                , ev_cod_part                in             varchar2
                                , ev_cod_mod                 in             varchar2
                                , ev_serie                   in             varchar2
                                , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_PART_ICMS') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_BC_UF_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PERC_FCP_UF_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PERC_ICMS_UF_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PERC_ICMS_INTER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'PERC_ICMS_INTER_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_FCP_UF_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ICMS_UF_FIM' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ICMS_UF_INI' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_PART_ICMS');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_PART_ICMS' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_part_icms;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_part_icms fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_part_icms.count > 0 then
      --
      for i in vt_tab_csf_ct_part_icms.first..vt_tab_csf_ct_part_icms.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_part_icms := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.conhectransp_id      := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.vl_bc_uf_fim         := vt_tab_csf_ct_part_icms(i).vl_bc_uf_fim;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.perc_fcp_uf_fim      := vt_tab_csf_ct_part_icms(i).perc_fcp_uf_fim;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.perc_icms_uf_fim     := vt_tab_csf_ct_part_icms(i).perc_icms_uf_fim;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.perc_icms_inter      := vt_tab_csf_ct_part_icms(i).perc_icms_inter;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.perc_icms_inter_part := vt_tab_csf_ct_part_icms(i).perc_icms_inter_part;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.vl_fcp_uf_fim        := vt_tab_csf_ct_part_icms(i).vl_fcp_uf_fim;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.vl_icms_uf_fim       := vt_tab_csf_ct_part_icms(i).vl_icms_uf_fim;
         pk_csf_api_ct.gt_row_conhec_transp_part_icms.vl_icms_uf_ini       := vt_tab_csf_ct_part_icms(i).vl_icms_uf_ini;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do ICMS de partilha com a UF de término do serviço de transporte na operação interestadual
         pk_csf_api_ct.pkb_integr_ct_part_icms ( est_log_generico      => est_log_generico
                                               , est_row_ct_part_icms  => pk_csf_api_ct.gt_row_conhec_transp_part_icms
                                               , en_conhectransp_id    => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_part_icms fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_part_icms;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do CT-e multimodal vinculado. - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_vinc_mult  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                    , en_conhectransp_id         in             ct_inf_vinc_mult.conhectransp_id%TYPE
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit           in             varchar2
                                    , en_dm_ind_emit             in             number
                                    , en_dm_ind_oper             in             number
                                    , ev_cod_part                in             varchar2
                                    , ev_cod_mod                 in             varchar2
                                    , ev_serie                   in             varchar2
                                    , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_VINC_MULT') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_VINC_MULT');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_VINC_MULT' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_inf_vinc_mult;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_vinc_mult fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_inf_vinc_mult.count > 0 then
      --
      for i in vt_tab_csf_ct_inf_vinc_mult.first..vt_tab_csf_ct_inf_vinc_mult.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_vinc_mult := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_vinc_mult.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_inf_vinc_mult.nro_chave_cte   := vt_tab_csf_ct_inf_vinc_mult(i).nro_chave_cte;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do CT-e multimodal vinculado
         pk_csf_api_ct.pkb_integr_ct_inf_vinc_mult ( est_log_generico          => est_log_generico
                                                   , est_row_ct_inf_vinc_mult  => pk_csf_api_ct.gt_row_ct_inf_vinc_mult
                                                   , en_conhectransp_id        => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_vinc_mult fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_vinc_mult;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Percurso do CT-e Outros Serviços. - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_conhec_transp_percurso  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                          , en_conhectransp_id         in             ct_inf_vinc_mult.conhectransp_id%TYPE
                                        --| parâmetros de chave
                                          , ev_cpf_cnpj_emit           in             varchar2
                                          , en_dm_ind_emit             in             number
                                          , en_dm_ind_oper             in             number
                                          , ev_cod_part                in             varchar2
                                          , ev_cod_mod                 in             varchar2
                                          , ev_serie                   in             varchar2
                                          , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_PERCURSO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SEQ' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_PERCURSO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP_PERCURSO' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_transp_percurso;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_percurso fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_transp_percurso.count > 0 then
      --
      for i in vt_tab_csf_ct_transp_percurso.first..vt_tab_csf_ct_transp_percurso.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_conhec_transp_percurso := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_percurso.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_percurso.seq             := vt_tab_csf_ct_transp_percurso(i).seq;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Percurso do CT-e Outros Serviços
         pk_csf_api_ct.pkb_integr_ct_transp_percurso ( est_log_generico            => est_log_generico
                                                     , est_row_ct_transp_percurso  => pk_csf_api_ct.gt_row_conhec_transp_percurso
                                                     , ev_sigla_estado             => vt_tab_csf_ct_transp_percurso(i).uf
                                                     , en_conhectransp_id          => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_conhec_transp_percurso fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_conhec_transp_percurso;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações dos documentos referenciados CTe Outros Serviços. - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_doc_ref_os  ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             ct_doc_ref_os.conhectransp_id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number )
is
   --
   vn_fase  number := 0;
   i        pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_DOC_REF_OS') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SUBSERIE_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TRANSP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_DOC_REF_OS');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_DOC_REF_OS' || chr(10);
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_doc_ref_os;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_doc_ref_os fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_doc_ref_os.count > 0 then
      --
      for i in vt_tab_csf_ct_doc_ref_os.first..vt_tab_csf_ct_doc_ref_os.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_doc_ref_os := null;
         --
         pk_csf_api_ct.gt_row_ct_doc_ref_os.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_doc_ref_os.nro_doc         := vt_tab_csf_ct_doc_ref_os(i).nro_doc;
         pk_csf_api_ct.gt_row_ct_doc_ref_os.serie           := vt_tab_csf_ct_doc_ref_os(i).serie_doc;
         pk_csf_api_ct.gt_row_ct_doc_ref_os.subserie        := vt_tab_csf_ct_doc_ref_os(i).subserie_doc;
         pk_csf_api_ct.gt_row_ct_doc_ref_os.dt_emiss        := vt_tab_csf_ct_doc_ref_os(i).dt_emiss;
         pk_csf_api_ct.gt_row_ct_doc_ref_os.vl_transp       := vt_tab_csf_ct_doc_ref_os(i).vl_transp;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações dos documentos referenciados CTe Outros Serviços
         pk_csf_api_ct.pkb_integr_ct_doc_ref_os ( est_log_generico       => est_log_generico
                                                , est_row_ct_doc_ref_os  => pk_csf_api_ct.gt_row_ct_doc_ref_os
                                                , en_conhectransp_id     => en_conhectransp_id );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_doc_ref_os fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_doc_ref_os;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das informações dos demais documentos do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_outro ( est_log_generico           in out nocopy  dbms_sql.number_table
                               , en_conhectransp_id         in             conhec_transp.id%TYPE
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit           in             varchar2
                               , en_dm_ind_emit             in             number
                               , en_dm_ind_oper             in             number
                               , ev_cod_part                in             varchar2
                               , ev_cod_mod                 in             varchar2
                               , ev_serie                   in             varchar2
                               , en_nro_ct                  in             number )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_OUTRO') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TIPO_DOC'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_OUTROS'  || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOCTO'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISSAO'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_DOC_FISC'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_PREV_ENT'   || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_OUTRO');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_OUTRO' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_inf_outro;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_outro fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_inf_outro.count > 0 then
      --
      for i in vt_tab_csf_ct_inf_outro.first..vt_tab_csf_ct_inf_outro.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_outro := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_outro.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_inf_outro.dm_tipo_doc     := vt_tab_csf_ct_inf_outro(i).dm_tipo_doc;
         pk_csf_api_ct.gt_row_ct_inf_outro.descr_outros    := vt_tab_csf_ct_inf_outro(i).descr_outros;
         pk_csf_api_ct.gt_row_ct_inf_outro.nro_docto       := vt_tab_csf_ct_inf_outro(i).nro_docto;
         pk_csf_api_ct.gt_row_ct_inf_outro.dt_emissao      := vt_tab_csf_ct_inf_outro(i).dt_emissao;
         pk_csf_api_ct.gt_row_ct_inf_outro.vl_doc_fisc     := vt_tab_csf_ct_inf_outro(i).vl_doc_fisc;
         pk_csf_api_ct.gt_row_ct_inf_outro.dt_prev_ent     := vt_tab_csf_ct_inf_outro(i).dt_prev_ent;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações dos demais documentos do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_inf_outro ( est_log_generico     => est_log_generico
                                               , est_row_ct_inf_outro => pk_csf_api_ct.gt_row_ct_inf_outro
                                               );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_outro fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_outro;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações dos Lacres das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_inf_unid_transp_lacr ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp.id%type
                                       , en_ctinfunidtransp_id      in             ct_inf_unid_transp.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number
                                       , en_dm_tp_unid_transp       in             number
                                       , ev_ident_unid_transp       in             varchar2
                                       )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_UNID_TRANSP_LACR') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_UNID_TRANSP_LACR');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS || ' = ' || en_dm_tp_unid_transp;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS || ' = ' || '''' || ev_ident_unid_transp || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_UNID_TRANSP_LACR' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_unid_transp_lacr;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_inf_unid_transp_lacr fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_unid_transp_lacr.count > 0 then
      --
      for i in vt_tab_csf_ct_unid_transp_lacr.first..vt_tab_csf_ct_unid_transp_lacr.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_ut_lacre := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_ut_lacre.ctinfunidtransp_id  := en_ctinfunidtransp_id;
         pk_csf_api_ct.gt_row_ct_inf_ut_lacre.nro_lacre           := vt_tab_csf_ct_unid_transp_lacr(i).nro_lacre;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as  Informações dos Lacres das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_iut_lacre ( est_log_generico     => est_log_generico
                                               , est_row_ct_iut_lacre => pk_csf_api_ct.gt_row_ct_inf_ut_lacre
                                               , en_conhectransp_id   => en_conhectransp_id
                                               );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_inf_unid_transp_lacr fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_inf_unid_transp_lacr;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações dos Lacres das Cargas das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_iut_carga_lacre ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%type
                                     , en_ctinfunidtranspcarga_id in             ct_inf_unid_transp_carga.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number
                                     , en_dm_tp_unid_carga        in             number
                                     , ev_ident_unid_carga        in             varchar2
                                     )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_IUT_CARGA_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_IUT_CARGA_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS || ' = ' || en_dm_tp_unid_carga;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS || ' = ' || '''' || ev_ident_unid_carga || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_IUT_CARGA_LACRE' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_iut_carga_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_iut_carga_lacre fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_iut_carga_lacre.count > 0 then
      --
      for i in vt_tab_csf_ct_iut_carga_lacre.first..vt_tab_csf_ct_iut_carga_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_iut_carga_lacre := null;
         --
         pk_csf_api_ct.gt_row_ct_iut_carga_lacre.ctinfunidtranspcarga_id  := en_ctinfunidtranspcarga_id;
         pk_csf_api_ct.gt_row_ct_iut_carga_lacre.nro_lacre                := vt_tab_csf_ct_iut_carga_lacre(i).nro_lacre;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações dos Lacres das Cargas das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_iut_carga_lacre ( est_log_generico           => est_log_generico
                                                     , est_row_ct_iut_carga_lacre => pk_csf_api_ct.gt_row_ct_iut_carga_lacre
                                                     , en_conhectransp_id         => en_conhectransp_id
                                                     );
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_iut_carga_lacre fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_iut_carga_lacre;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações das Cargas das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_inf_unid_transp_carg ( est_log_generico           in out nocopy  dbms_sql.number_table
                                       , en_conhectransp_id         in             conhec_transp.id%type
                                       , en_ctinfunidtransp_id      in             ct_inf_unid_transp.id%TYPE
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit           in             varchar2
                                       , en_dm_ind_emit             in             number
                                       , en_dm_ind_oper             in             number
                                       , ev_cod_part                in             varchar2
                                       , ev_cod_mod                 in             varchar2
                                       , ev_serie                   in             varchar2
                                       , en_nro_ct                  in             number
                                       , en_dm_tp_unid_transp       in             number
                                       , ev_ident_unid_transp       in             varchar2
                                       )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_UNID_TRANSP_CARG') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_RAT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_UNID_TRANSP_CARG');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS || ' = ' || en_dm_tp_unid_transp;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS || ' = ' || '''' || ev_ident_unid_transp || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_UNID_TRANSP_CARG' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_unid_transp_carg;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_inf_unid_transp_carg fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_unid_transp_carg.count > 0 then
      --
      for i in vt_tab_csf_ct_unid_transp_carg.first..vt_tab_csf_ct_unid_transp_carg.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_ut_carga := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_ut_carga.ctinfunidtransp_id  := en_ctinfunidtransp_id;
         pk_csf_api_ct.gt_row_ct_inf_ut_carga.dm_tp_unid_carga    := vt_tab_csf_ct_unid_transp_carg(i).dm_tp_unid_carga;
         pk_csf_api_ct.gt_row_ct_inf_ut_carga.ident_unid_carga    := vt_tab_csf_ct_unid_transp_carg(i).ident_unid_carga;
         pk_csf_api_ct.gt_row_ct_inf_ut_carga.qtde_rat            := vt_tab_csf_ct_unid_transp_carg(i).qtde_rat;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações das Cargas das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_iut_carga ( est_log_generico     => est_log_generico
                                               , est_row_ct_iut_carga => pk_csf_api_ct.gt_row_ct_inf_ut_carga
                                               , en_conhectransp_id   => en_conhectransp_id
                                               );
         --
         if nvl(pk_csf_api_ct.gt_row_ct_inf_ut_carga.id,0) > 0 then
            --
            pkb_ler_ct_iut_carga_lacre ( est_log_generico              => est_log_generico
                                       , en_conhectransp_id            => en_conhectransp_id
                                       , en_ctinfunidtranspcarga_id    => pk_csf_api_ct.gt_row_ct_inf_ut_carga.id
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit              => ev_cpf_cnpj_emit
                                       , en_dm_ind_emit                => en_dm_ind_emit  
                                       , en_dm_ind_oper                => en_dm_ind_oper
                                       , ev_cod_part                   => ev_cod_part
                                       , ev_cod_mod                    => ev_cod_mod      
                                       , ev_serie                      => ev_serie
                                       , en_nro_ct                     => en_nro_ct
                                       , en_dm_tp_unid_carga           => vt_tab_csf_ct_unid_transp_carg(i).dm_tp_unid_carga
                                       , ev_ident_unid_carga           => vt_tab_csf_ct_unid_transp_carg(i).ident_unid_carga
                                       );
            --
         end if;
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_inf_unid_transp_carg fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_inf_unid_transp_carg;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das - Informações das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_unid_transp ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_UNID_TRANSP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_TRANSP' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_RAT_TOT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_UNID_TRANSP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_UNID_TRANSP' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_inf_unid_transp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_unid_transp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_inf_unid_transp.count > 0 then
      --
      for i in vt_tab_csf_ct_inf_unid_transp.first..vt_tab_csf_ct_inf_unid_transp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_unid_transp := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_unid_transp.conhectransp_id    := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_inf_unid_transp.dm_tp_unid_transp  := vt_tab_csf_ct_inf_unid_transp(i).dm_tp_unid_transp;
         pk_csf_api_ct.gt_row_ct_inf_unid_transp.ident_unid_transp  := vt_tab_csf_ct_inf_unid_transp(i).ident_unid_transp;
         pk_csf_api_ct.gt_row_ct_inf_unid_transp.qtde_rat_tot       := vt_tab_csf_ct_inf_unid_transp(i).qtde_rat_tot;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações das Unidades de Transporte (Carreta/Reboque/Vagão) do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_inf_unid_transp ( est_log_generico           => est_log_generico
                                                     , est_row_ct_inf_unid_transp => pk_csf_api_ct.gt_row_ct_inf_unid_transp
                                                     );
         --
         vn_fase := 9;
         --
         if nvl(pk_csf_api_ct.gt_row_ct_inf_unid_transp.id,0) > 0 then
            --
            vn_fase := 10;
            --
            pkb_ler_inf_unid_transp_lacr ( est_log_generico        => est_log_generico
                                         , en_conhectransp_id      => en_conhectransp_id
                                         , en_ctinfunidtransp_id   => pk_csf_api_ct.gt_row_ct_inf_unid_transp.id
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit        =>  ev_cpf_cnpj_emit
                                         , en_dm_ind_emit          =>  en_dm_ind_emit
                                         , en_dm_ind_oper          =>  en_dm_ind_oper
                                         , ev_cod_part             =>  ev_cod_part
                                         , ev_cod_mod              =>  ev_cod_mod
                                         , ev_serie                =>  ev_serie
                                         , en_nro_ct               =>  en_nro_ct
                                         , en_dm_tp_unid_transp    =>  vt_tab_csf_ct_inf_unid_transp(i).dm_tp_unid_transp
                                         , ev_ident_unid_transp    =>  vt_tab_csf_ct_inf_unid_transp(i).ident_unid_transp
                                         );
            --
            vn_fase := 11;
            --
            pkb_ler_inf_unid_transp_carg ( est_log_generico        => est_log_generico
                                         , en_conhectransp_id      => en_conhectransp_id                                 
                                         , en_ctinfunidtransp_id   => pk_csf_api_ct.gt_row_ct_inf_unid_transp.id         
                                       --| parâmetros de chave                                                           
                                         , ev_cpf_cnpj_emit        =>  ev_cpf_cnpj_emit                                  
                                         , en_dm_ind_emit          =>  en_dm_ind_emit                                    
                                         , en_dm_ind_oper          =>  en_dm_ind_oper                                    
                                         , ev_cod_part             =>  ev_cod_part                                       
                                         , ev_cod_mod              =>  ev_cod_mod                                        
                                         , ev_serie                =>  ev_serie                                          
                                         , en_nro_ct               =>  en_nro_ct                                         
                                         , en_dm_tp_unid_transp    =>  vt_tab_csf_ct_inf_unid_transp(i).dm_tp_unid_transp
                                         , ev_ident_unid_transp    =>  vt_tab_csf_ct_inf_unid_transp(i).ident_unid_transp
                                         );
            --
         end if;
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_unid_transp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_unid_transp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações dos Lacres das Unidades de Carga (Carreta/Reboque/Vagão) do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_unid_carg_lacr ( est_log_generico           in out nocopy  dbms_sql.number_table
                                        , en_ctinfunidcarga_id       in             ct_inf_unid_carga.id%TYPE
                                        , en_conhectransp_id         in             conhec_transp.id%type
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           in             varchar2
                                        , en_dm_ind_emit             in             number
                                        , en_dm_ind_oper             in             number
                                        , ev_cod_part                in             varchar2
                                        , ev_cod_mod                 in             varchar2
                                        , ev_serie                   in             varchar2
                                        , en_nro_ct                  in             number
                                        , en_dm_tp_unid_carga        in             number
                                        , ev_ident_unid_carga        in             varchar2
                                        )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_UNID_CARGA_LACRE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_LACRE' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_UNID_CARGA_LACRE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS || ' = ' || en_dm_tp_unid_carga;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS || ' = ' || '''' || ev_ident_unid_carga || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_UNID_CARGA_LACRE' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_unid_carga_lacre;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_unid_carg_lacr fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_unid_carga_lacre.count > 0 then
      --
      for i in vt_tab_csf_ct_unid_carga_lacre.first..vt_tab_csf_ct_unid_carga_lacre.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_uc_lacre := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_uc_lacre.ctinfunidcarga_id  := en_ctinfunidcarga_id;
         pk_csf_api_ct.gt_row_ct_inf_uc_lacre.nro_lacre          := vt_tab_csf_ct_unid_carga_lacre(i).nro_lacre;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações das Unidades de Carga (Carreta/Reboque/Vagão) do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_ct_iuc_lacre ( est_log_generico     => est_log_generico
                                                  , est_row_ct_iuc_lacre => pk_csf_api_ct.gt_row_ct_inf_uc_lacre
                                                  , en_conhectransp_id   => en_conhectransp_id
                                                  );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_unid_carg_lacr fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_unid_carg_lacr;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações das Unidades de Carga (Carreta/Reboque/Vagão) do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_ct_inf_unid_carga ( est_log_generico           in out nocopy  dbms_sql.number_table
                                    , en_conhectransp_id         in             conhec_transp.id%TYPE
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit           in             varchar2
                                    , en_dm_ind_emit             in             number
                                    , en_dm_ind_oper             in             number
                                    , ev_cod_part                in             varchar2
                                    , ev_cod_mod                 in             varchar2
                                    , ev_serie                   in             varchar2
                                    , en_nro_ct                  in             number )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_INF_UNID_CARGA') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IDENT_UNID_CARGA' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_RAT_TOT' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_INF_UNID_CARGA');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where                                                                                                  e
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CT_INF_UNID_CARGA' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_ct_inf_unid_carga;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_unid_carga fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_ct_inf_unid_carga.count > 0 then
      --
      for i in vt_tab_csf_ct_inf_unid_carga.first..vt_tab_csf_ct_inf_unid_carga.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_ct_inf_unid_carga := null;
         --
         pk_csf_api_ct.gt_row_ct_inf_unid_carga.conhectransp_id    := en_conhectransp_id;
         pk_csf_api_ct.gt_row_ct_inf_unid_carga.dm_tp_unid_carga   := vt_tab_csf_ct_inf_unid_carga(i).dm_tp_unid_carga;
         pk_csf_api_ct.gt_row_ct_inf_unid_carga.ident_unid_carga   := vt_tab_csf_ct_inf_unid_carga(i).ident_unid_carga;
         pk_csf_api_ct.gt_row_ct_inf_unid_carga.qtde_rat_tot       := vt_tab_csf_ct_inf_unid_carga(i).qtde_rat_tot;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações das Unidades de Carga (Carreta/Reboque/Vagão) do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_ct_inf_unid_carga ( est_log_generico          => est_log_generico
                                                    , est_row_ct_inf_unid_carga => pk_csf_api_ct.gt_row_ct_inf_unid_carga
                                                    );
         --
         vn_fase := 9;
         --
         if nvl(pk_csf_api_ct.gt_row_ct_inf_unid_carga.id,0) > 0 then
            --
            vn_fase := 10;
            --
            pkb_ler_ct_inf_unid_carg_lacr ( est_log_generico        => est_log_generico
                                          , en_ctinfunidcarga_id    => pk_csf_api_ct.gt_row_ct_inf_unid_carga.id
                                          , en_conhectransp_id      => en_conhectransp_id
                                        --| parâmetros de chave
                                          , ev_cpf_cnpj_emit        => ev_cpf_cnpj_emit
                                          , en_dm_ind_emit          => en_dm_ind_emit  
                                          , en_dm_ind_oper          => en_dm_ind_oper
                                          , ev_cod_part             => ev_cod_part
                                          , ev_cod_mod              => ev_cod_mod      
                                          , ev_serie                => ev_serie
                                          , en_nro_ct               => en_nro_ct
                                          , en_dm_tp_unid_carga     => vt_tab_csf_ct_inf_unid_carga(i).dm_tp_unid_carga
                                          , ev_ident_unid_carga     => vt_tab_csf_ct_inf_unid_carga(i).ident_unid_carga
                                          );
            --
         end if;
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_ct_inf_unid_carga fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_ct_inf_unid_carga;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Registro de Eventos do CTe Multimodal
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_evento_cte_multimodal ( est_log_generico           in out nocopy  dbms_sql.number_table
                                        , en_conhectransp_id         in             conhec_transp.id%TYPE
                                        , en_eventocte_id            in             evento_cte.id%TYPE
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit           in             varchar2
                                        , en_dm_ind_emit             in             number
                                        , en_dm_ind_oper             in             number
                                        , ev_cod_part                in             varchar2
                                        , ev_cod_mod                 in             varchar2
                                        , ev_serie                   in             varchar2
                                        , en_nro_ct                  in             number
                                        , ed_dt_solic                in             date
                                        )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE_MULTIMODAL') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_REGISTRO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOC' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE_MULTIMODAL');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS || ' = ' || '''' || to_char(ed_dt_solic, gv_formato_dt_erp) || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE_MULTIMODAL' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte_multimod;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_multimodal fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte_multimod.count > 0 then
      --
      for i in vt_tab_csf_evento_cte_multimod.first..vt_tab_csf_evento_cte_multimod.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte_multimodal := null;
         --
         pk_csf_api_ct.gt_row_evento_cte_multimodal.eventocte_id    := en_eventocte_id;
         pk_csf_api_ct.gt_row_evento_cte_multimodal.descr_registro  := vt_tab_csf_evento_cte_multimod(i).descr_registro;
         pk_csf_api_ct.gt_row_evento_cte_multimodal.nro_doc         := vt_tab_csf_evento_cte_multimod(i).nro_doc;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Registro de Eventos do CTe Multimodal
         pk_csf_api_ct.pkb_integr_evento_cte_mmodal ( est_log_generico               => est_log_generico
                                                    , est_row_evento_cte_multimodal  => pk_csf_api_ct.gt_row_evento_cte_multimodal
                                                    , en_conhectransp_id             => en_conhectransp_id
                                                    );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_multimodal fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte_multimodal;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Registro de Eventos do CTe Carta de Correção
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_evento_cte_cce ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             conhec_transp.id%TYPE
                                 , en_eventocte_id            in             evento_cte.id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number
                                 , ed_dt_solic                in             date
                                 )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE_CCE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ESTRUTCTE_GRUPO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ESTRUTCTE_CAMPO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VALOR_ALTERADO' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_ITEM_ALTER' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE_CCE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS || ' = ' || '''' || to_char(ed_dt_solic, gv_formato_dt_erp) || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE_CCE' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte_cce;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_cce fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo || gv_cabec_ct
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                 , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte_cce.count > 0 then
      --
      for i in vt_tab_csf_evento_cte_cce.first..vt_tab_csf_evento_cte_cce.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte_cce := null;
         --
         pk_csf_api_ct.gt_row_evento_cte_cce.eventocte_id    := en_eventocte_id;
         pk_csf_api_ct.gt_row_evento_cte_cce.valor_alterado  := vt_tab_csf_evento_cte_cce(i).valor_alterado;
         pk_csf_api_ct.gt_row_evento_cte_cce.nro_item_alter  := vt_tab_csf_evento_cte_cce(i).nro_item_alter;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Registro de Eventos do CTe Carta de Correção
         pk_csf_api_ct.pkb_integr_evento_cte_cce ( est_log_generico        => est_log_generico
                                                 , est_row_evento_cte_cce  => pk_csf_api_ct.gt_row_evento_cte_cce
                                                 , en_conhectransp_id      => en_conhectransp_id
                                                 , ev_estrutcte_grupo      => vt_tab_csf_evento_cte_cce(i).estrutcte_grupo
                                                 , ev_estrutcte_campo      => vt_tab_csf_evento_cte_cce(i).estrutcte_campo
                                                 );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_cce fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                           , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte_cce;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Evento de CTe GTV (Grupo de Transporte de Valores) - Espécies Transportadas - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_evento_cte_gtv_esp ( est_log_generico           in out nocopy  dbms_sql.number_table
                                     , en_conhectransp_id         in             conhec_transp.id%TYPE
                                     , en_eventoctegtv_id         in             evento_cte_gtv.id%TYPE
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit           in             varchar2
                                     , en_dm_ind_emit             in             number
                                     , en_dm_ind_oper             in             number
                                     , ev_cod_part                in             varchar2
                                     , ev_cod_mod                 in             varchar2
                                     , ev_serie                   in             varchar2
                                     , en_nro_ct                  in             number
                                     , ed_dt_solic                in             date
                                     , ev_nro_doc                 in             varchar2
                                     , ev_id_aidf                 in             varchar2
                                     )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE_GTV_ESP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ID_AIDF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_ESPECIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_ESP' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE_GTV_ESP');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS || ' = ' || '''' || to_char(ed_dt_solic, gv_formato_dt_erp) || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_DOC' || GV_ASPAS || ' = ' || '''' || ev_nro_doc || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'ID_AIDF' || GV_ASPAS || ' = ' || '''' || ev_id_aidf || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE_GTV_ESP' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte_gtv_esp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_gtv_esp fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte_gtv_esp.count > 0 then
      --
      for i in vt_tab_csf_evento_cte_gtv_esp.first..vt_tab_csf_evento_cte_gtv_esp.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte_gtv_esp := null;
         --
         pk_csf_api_ct.gt_row_evento_cte_gtv_esp.eventoctegtv_id  := en_eventoctegtv_id;
         pk_csf_api_ct.gt_row_evento_cte_gtv_esp.dm_tp_especie    := vt_tab_csf_evento_cte_gtv_esp(i).dm_tp_especie;
         pk_csf_api_ct.gt_row_evento_cte_gtv_esp.vl_esp           := vt_tab_csf_evento_cte_gtv_esp(i).vl_esp;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Evento de CTe GTV (Grupo de Transporte de Valores) - Espécies Transportadas
         pk_csf_api_ct.pkb_integr_evento_cte_gtv_esp ( est_log_generico            => est_log_generico
                                                     , est_row_evento_cte_gtv_esp  => pk_csf_api_ct.gt_row_evento_cte_gtv_esp
                                                     , en_conhectransp_id          => en_conhectransp_id
                                                     );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_gtv_esp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte_gtv_esp;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Evento de CTe GTV (Grupo de Transporte de Valores) - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_evento_cte_gtv ( est_log_generico           in out nocopy  dbms_sql.number_table
                                 , en_conhectransp_id         in             conhec_transp.id%TYPE
                                 , en_eventocte_id            in             evento_cte.id%TYPE
                               --| parâmetros de chave
                                 , ev_cpf_cnpj_emit           in             varchar2
                                 , en_dm_ind_emit             in             number
                                 , en_dm_ind_oper             in             number
                                 , ev_cod_part                in             varchar2
                                 , ev_cod_mod                 in             varchar2
                                 , ev_serie                   in             varchar2
                                 , en_nro_ct                  in             number
                                 , ed_dt_solic                in             date
                                 )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE_GTV') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'ID_AIDF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SUBSERIE_DOC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_EMISS' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DIG_VERIF' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_CARGA' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE_GTV');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS || ' = ' || '''' || to_char(ed_dt_solic, gv_formato_dt_erp) || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE_GTV' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte_gtv;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_gtv fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte_gtv.count > 0 then
      --
      for i in vt_tab_csf_evento_cte_gtv.first..vt_tab_csf_evento_cte_gtv.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte_gtv := null;
         --
         pk_csf_api_ct.gt_row_evento_cte_gtv.eventocte_id  := en_eventocte_id;
         pk_csf_api_ct.gt_row_evento_cte_gtv.nro_doc       := vt_tab_csf_evento_cte_gtv(i).nro_doc;
         pk_csf_api_ct.gt_row_evento_cte_gtv.id_aidf       := vt_tab_csf_evento_cte_gtv(i).id_aidf;
         pk_csf_api_ct.gt_row_evento_cte_gtv.serie         := vt_tab_csf_evento_cte_gtv(i).serie_doc;
         pk_csf_api_ct.gt_row_evento_cte_gtv.subserie      := vt_tab_csf_evento_cte_gtv(i).subserie_doc;
         pk_csf_api_ct.gt_row_evento_cte_gtv.dt_emiss      := vt_tab_csf_evento_cte_gtv(i).dt_emiss;
         pk_csf_api_ct.gt_row_evento_cte_gtv.dig_verif     := vt_tab_csf_evento_cte_gtv(i).dig_verif;
         pk_csf_api_ct.gt_row_evento_cte_gtv.qtde_carga    := vt_tab_csf_evento_cte_gtv(i).qtde_carga;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Evento de CTe GTV (Grupo de Transporte de Valores)
         pk_csf_api_ct.pkb_integr_evento_cte_gtv ( est_log_generico        => est_log_generico
                                                 , est_row_evento_cte_gtv  => pk_csf_api_ct.gt_row_evento_cte_gtv
                                                 , en_conhectransp_id      => en_conhectransp_id
                                                 );
         --
         vn_fase := 9;
         --
         pkb_ler_evento_cte_gtv_esp ( est_log_generico      =>  est_log_generico
                                    , en_conhectransp_id    =>  en_conhectransp_id
                                    , en_eventoctegtv_id    =>  pk_csf_api_ct.gt_row_evento_cte_gtv.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit      =>  ev_cpf_cnpj_emit
                                    , en_dm_ind_emit        =>  en_dm_ind_emit
                                    , en_dm_ind_oper        =>  en_dm_ind_oper
                                    , ev_cod_part           =>  ev_cod_part
                                    , ev_cod_mod            =>  ev_cod_mod
                                    , ev_serie              =>  ev_serie
                                    , en_nro_ct             =>  en_nro_ct
                                    , ed_dt_solic           =>  ed_dt_solic
                                    , ev_nro_doc            =>  pk_csf_api_ct.gt_row_evento_cte_gtv.nro_doc
                                    , ev_id_aidf            =>  pk_csf_api_ct.gt_row_evento_cte_gtv.id_aidf
                                    );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_gtv fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte_gtv;
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Evento Prestação de Serviço em Desacordo do CTe por parte do Tomador - Atualização CTe 3.0
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_evento_cte_desac ( est_log_generico           in out nocopy  dbms_sql.number_table
                                   , en_conhectransp_id         in             conhec_transp.id%TYPE
                                   , en_eventocte_id            in             evento_cte.id%TYPE
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit           in             varchar2
                                   , en_dm_ind_emit             in             number
                                   , en_dm_ind_oper             in             number
                                   , ev_cod_part                in             varchar2
                                   , ev_cod_mod                 in             varchar2
                                   , ev_serie                   in             varchar2
                                   , en_nro_ct                  in             number
                                   , ed_dt_solic                in             date
                                   )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE_DESAC') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_DESAC_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'OBS' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE_DESAC');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS || ' = ' || '''' || to_char(ed_dt_solic, gv_formato_dt_erp) || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE_DESAC' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte_desac;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.gt_row_evento_cte_desac fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte_desac.count > 0 then
      --
      for i in vt_tab_csf_evento_cte_desac.first..vt_tab_csf_evento_cte_desac.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte_desac := null;
         --
         pk_csf_api_ct.gt_row_evento_cte_desac.eventocte_id      := en_eventocte_id;
         pk_csf_api_ct.gt_row_evento_cte_desac.dm_ind_desac_oper := vt_tab_csf_evento_cte_desac(i).dm_ind_desac_oper;
         pk_csf_api_ct.gt_row_evento_cte_desac.obs               := vt_tab_csf_evento_cte_desac(i).obs;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Evento Prestação de Serviço em Desacordo do CTe por parte do Tomador
         pk_csf_api_ct.pkb_integr_evento_cte_desac ( est_log_generico          => est_log_generico
                                                   , est_row_evento_cte_desac  => pk_csf_api_ct.gt_row_evento_cte_desac
                                                   , en_conhectransp_id        => en_conhectransp_id
                                                   );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_desac fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte_desac;
--
-- =================================================================================================== --
-- Procedimento de leitura das informações de Eventos do CTe EPEC
-- =================================================================================================== --
procedure pkb_ler_evento_cte_epec ( est_log_generico           in out nocopy  dbms_sql.number_table
                                  , en_conhectransp_id         in             conhec_transp.id%TYPE
                                  , en_eventocte_id            in             evento_cte.id%TYPE
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit           in             varchar2
                                  , en_dm_ind_emit             in             number
                                  , en_dm_ind_oper             in             number
                                  , ev_cod_part                in             varchar2
                                  , ev_cod_mod                 in             varchar2
                                  , ev_serie                   in             varchar2
                                  , en_nro_ct                  in             number
                                  , ed_dt_solic                in             date
                                  )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE_EPEC') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'JUST_CONT'     || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE_EPEC');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql ||            GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD'  || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE'    || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT'   || GV_ASPAS || ' = ' ||         en_nro_ct;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS || ' = ' || '''' || to_char(ed_dt_solic, gv_formato_dt_erp) || '''';
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE_EPEC' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte_epec;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_epec fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte_epec.count > 0 then
      --
      for i in vt_tab_csf_evento_cte_epec.first..vt_tab_csf_evento_cte_epec.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte_epec := null;
         --
         pk_csf_api_ct.gt_row_evento_cte_epec.eventocte_id      := en_eventocte_id;
         pk_csf_api_ct.gt_row_evento_cte_epec.just_cont         := vt_tab_csf_evento_cte_epec(i).just_cont;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as informações de Eventos do CTe EPEC
         pk_csf_api_ct.pkb_integr_evento_cte_epec ( est_log_generico         => est_log_generico
                                                  , est_row_evento_cte_epec  => pk_csf_api_ct.gt_row_evento_cte_epec
                                                  , en_conhectransp_id       => en_conhectransp_id
                                                  );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte_epec fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte_epec;
-- ========================================================================================================== --
--
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura das Informações do Registro de Eventos do CTe
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_evento_cte ( est_log_generico           in out nocopy  dbms_sql.number_table
                             , en_conhectransp_id         in             conhec_transp.id%TYPE
                           --| parâmetros de chave
                             , ev_cpf_cnpj_emit           in             varchar2
                             , en_dm_ind_emit             in             number
                             , en_dm_ind_oper             in             number
                             , ev_cod_part                in             varchar2
                             , ev_cod_mod                 in             varchar2
                             , ev_serie                   in             varchar2
                             , en_nro_ct                  in             number )
is
   --
   vn_fase number := 0;
   i       pls_integer;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_EVENTO_CTE') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SOLIC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'TIPOEVENTOSEFAZ_CD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_EVENTO_CTE');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
   --
   vn_fase := 3;
   --
    if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   vn_fase := 4;
   --
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
   --
   vn_fase := 5;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_EVENTO_CTE' || chr(10);
   --
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_evento_cte;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo || gv_cabec_ct
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
               -- Armazena o "loggenerico_id" na memória
               pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                                    , est_log_generico  => est_log_generico );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 6;
   --
   if vt_tab_csf_evento_cte.count > 0 then
      --
      for i in vt_tab_csf_evento_cte.first..vt_tab_csf_evento_cte.last loop
         --
         vn_fase := 7;
         --
         pk_csf_api_ct.gt_row_evento_cte := null;
         --
         pk_csf_api_ct.gt_row_evento_cte.conhectransp_id := en_conhectransp_id;
         pk_csf_api_ct.gt_row_evento_cte.dm_st_integra   := 7;
         pk_csf_api_ct.gt_row_evento_cte.dm_st_proc      := 0;
         --
         vn_fase := 8;
         --
         -- Chama procedimento que integra as Informações do Registro de Eventos do CTe
         pk_csf_api_ct.pkb_integr_evento_cte ( est_log_generico       => est_log_generico
                                             , est_row_evento_cte     => pk_csf_api_ct.gt_row_evento_cte
                                             , ev_tipoeventosefaz_cd  => vt_tab_csf_evento_cte(i).tipoeventosefaz_cd
                                             );
         --
         vn_fase := 9;
         --
         if nvl(pk_csf_api_ct.gt_row_evento_cte.id,0) > 0 then
            --
            vn_fase := 10;
            --
            pkb_ler_evento_cte_multimodal ( est_log_generico        => est_log_generico
                                          , en_conhectransp_id      => en_conhectransp_id
                                          , en_eventocte_id         => pk_csf_api_ct.gt_row_evento_cte.id
                                        --| parâmetros de chave
                                          , ev_cpf_cnpj_emit        => ev_cpf_cnpj_emit
                                          , en_dm_ind_emit          => en_dm_ind_emit
                                          , en_dm_ind_oper          => en_dm_ind_oper
                                          , ev_cod_part             => ev_cod_part
                                          , ev_cod_mod              => ev_cod_mod
                                          , ev_serie                => ev_serie
                                          , en_nro_ct               => en_nro_ct
                                          , ed_dt_solic             => vt_tab_csf_evento_cte(i).dt_solic
                                          );
            --
            vn_fase := 11;
            --
            pkb_ler_evento_cte_cce ( est_log_generico      =>  est_log_generico
                                   , en_conhectransp_id    =>  en_conhectransp_id
                                   , en_eventocte_id       =>  pk_csf_api_ct.gt_row_evento_cte.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit      =>  ev_cpf_cnpj_emit
                                   , en_dm_ind_emit        =>  en_dm_ind_emit
                                   , en_dm_ind_oper        =>  en_dm_ind_oper
                                   , ev_cod_part           =>  ev_cod_part
                                   , ev_cod_mod            =>  ev_cod_mod
                                   , ev_serie              =>  ev_serie
                                   , en_nro_ct             =>  en_nro_ct
                                   , ed_dt_solic           =>  vt_tab_csf_evento_cte(i).dt_solic
                                   );
            --
            vn_fase := 12;
            -- Atualização CTe 3.0
            pkb_ler_evento_cte_gtv ( est_log_generico      =>  est_log_generico
                                   , en_conhectransp_id    =>  en_conhectransp_id
                                   , en_eventocte_id       =>  pk_csf_api_ct.gt_row_evento_cte.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit      =>  ev_cpf_cnpj_emit
                                   , en_dm_ind_emit        =>  en_dm_ind_emit
                                   , en_dm_ind_oper        =>  en_dm_ind_oper
                                   , ev_cod_part           =>  ev_cod_part
                                   , ev_cod_mod            =>  ev_cod_mod
                                   , ev_serie              =>  ev_serie
                                   , en_nro_ct             =>  en_nro_ct
                                   , ed_dt_solic           =>  vt_tab_csf_evento_cte(i).dt_solic
                                   );
            --
            vn_fase := 13;
            -- Atualização CTe 3.0
            pkb_ler_evento_cte_desac ( est_log_generico      =>  est_log_generico
                                     , en_conhectransp_id    =>  en_conhectransp_id
                                     , en_eventocte_id       =>  pk_csf_api_ct.gt_row_evento_cte.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit      =>  ev_cpf_cnpj_emit
                                     , en_dm_ind_emit        =>  en_dm_ind_emit
                                     , en_dm_ind_oper        =>  en_dm_ind_oper
                                     , ev_cod_part           =>  ev_cod_part
                                     , ev_cod_mod            =>  ev_cod_mod
                                     , ev_serie              =>  ev_serie
                                     , en_nro_ct             =>  en_nro_ct
                                     , ed_dt_solic           =>  vt_tab_csf_evento_cte(i).dt_solic
                                     );
            vn_fase := 14;
            -- Atualização CTe 3.0
            pkb_ler_evento_cte_epec ( est_log_generico      =>  est_log_generico
                                    , en_conhectransp_id    =>  en_conhectransp_id
                                    , en_eventocte_id       =>  pk_csf_api_ct.gt_row_evento_cte.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit      =>  ev_cpf_cnpj_emit
                                    , en_dm_ind_emit        =>  en_dm_ind_emit
                                    , en_dm_ind_oper        =>  en_dm_ind_oper
                                    , ev_cod_part           =>  ev_cod_part
                                    , ev_cod_mod            =>  ev_cod_mod
                                    , ev_serie              =>  ev_serie
                                    , en_nro_ct             =>  en_nro_ct
                                    , ed_dt_solic           =>  vt_tab_csf_evento_cte(i).dt_solic
                                    );
            --
         end if;
      --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_evento_cte fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
         -- Armazena o "loggenerico_id" na memória
         pk_csf_api_ct.pkb_gt_log_generico_ct ( en_loggenerico    => vn_loggenerico_id
                                              , est_log_generico  => est_log_generico );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_evento_cte;

-------------------------------------------------------------------------------------------------------

--| Procedimento de integração de campos Flex-Field dos Conhecimentos de Transportes

procedure pkb_conhec_transp_ff( est_log_generico  in  out nocopy  dbms_sql.number_table
                              , ev_cpf_cnpj_emit  in  varchar2
                              , en_dm_ind_emit    in  number
                              , en_dm_ind_oper    in  number
                              , ev_cod_part       in  varchar2
                              , ev_cod_mod        in  varchar2
                              , ev_serie          in  varchar2
                              , en_nro_ct         in  number
                              , sn_multorg_id     in  out nocopy  mult_org.id%type)
is
   vn_fase               number := 0;
   vn_loggenericoct_id  log_generico_ct.id%TYPE;
   vv_cod                mult_org.cd%type;
   vv_hash               mult_org.hash%type;
   vv_cod_ret            mult_org.cd%type;
   vv_hash_ret           mult_org.hash%type;
   vn_multorg_id         mult_org.id%type := 0;
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_FF') = 0 then
      --
      sn_multorg_id := vn_multorg_id;
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   vt_tab_csf_conhec_transp_ff.delete;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_EMIT'   || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_OPER'   || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_PART'      || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_MOD'       || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'SERIE'         || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'NRO_CT'        || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'ATRIBUTO'      || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'VALOR'         || trim(GV_ASPAS);
   --
   vn_fase := 1.1;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_FF' );
   --
   gv_sql := gv_sql || ' WHERE ' || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS) || ' = ' ||''''||ev_cpf_cnpj_emit||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'DM_IND_EMIT'   || trim(GV_ASPAS) || ' = ' ||en_dm_ind_emit;
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'DM_IND_OPER'   || trim(GV_ASPAS) || ' = ' ||en_dm_ind_oper;
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'COD_PART'      || trim(GV_ASPAS) || ' = ' ||''''||ev_cod_part||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'COD_MOD'       || trim(GV_ASPAS) || ' = ' ||''''||ev_cod_mod||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'SERIE'         || trim(GV_ASPAS) || ' = ' ||''''||ev_serie||'''';
   --
   gv_sql := gv_sql || ' AND '   || trim(GV_ASPAS) || 'NRO_CT'        || trim(GV_ASPAS) || ' = ' ||en_nro_ct;
   --
   gv_sql := gv_sql || ' ORDER BY ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_EMIT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_OPER' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_MOD' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'SERIE' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'NRO_CT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'ATRIBUTO' || trim(GV_ASPAS);
   --
   vn_fase := 2;
   -- recupera as Notas Fiscais não integradas
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_ff;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_conhec_transp_ff fase('||vn_fase||'):'||sqlerrm;
            --
            declare
               vn_loggenericoct_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                                   , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                   , ev_resumo          => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                                   , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                   , en_referencia_id   => null
                                                   , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, pk_csf_api_ct.gv_mensagem_log);
            --
         end if;
   end;
   --
   vn_fase := 3;
   --
   if vt_tab_csf_conhec_transp_ff.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_ff.first..vt_tab_csf_conhec_transp_ff.last loop
         --
         vn_fase := 4;
         --
         if vt_tab_csf_conhec_transp_ff(i).atributo in ('COD_MULT_ORG', 'HASH_MULT_ORG') then
            --
            vn_fase := 5;
            -- Chama procedimento que faz a validação dos itens da Pessoa - campos flex field.
            vv_cod_ret := null;
            vv_hash_ret := null;
            --
            pk_csf_api_ct.pkb_val_atrib_multorg ( est_log_generico     => est_log_generico
                                                , ev_obj_name          => 'VW_CSF_CONHEC_TRANSP_FF'
                                                , ev_atributo          => vt_tab_csf_conhec_transp_ff(i).atributo
                                                , ev_valor             => vt_tab_csf_conhec_transp_ff(i).valor
                                                , sv_cod_mult_org      => vv_cod_ret
                                                , sv_hash_mult_org     => vv_hash_ret
                                                , en_referencia_id     => null
                                                , ev_obj_referencia    => 'CONHEC_TRANSP');
           --
           vn_fase := 6;
           --
           if vv_cod_ret is not null then
              vv_cod := vv_cod_ret;
           end if;
           --
           if vv_hash_ret is not null then
              vv_hash := vv_hash_ret;
           end if;
           --
        end if;
        --
      end loop;
      --
      vn_fase := 7;
      --
      if nvl(est_log_generico.count, 0) <= 0 then
         --
         vn_fase := 8;
         --
         vn_multorg_id := sn_multorg_id;
         pk_csf_api_ct.pkb_ret_multorg_id( est_log_generico   => est_log_generico
                                         , ev_cod_mult_org    => vv_cod
                                         , ev_hash_mult_org   => vv_hash
                                         , sn_multorg_id      => vn_multorg_id
                                         , en_referencia_id   => null
                                         , ev_obj_referencia  => 'CONHEC_TRANSP'
                                         );
      end if;
      --
      vn_fase := 9;
      --
      sn_multorg_id := vn_multorg_id;
      --
   else
      --
      pk_csf_api_ct.gv_mensagem_log := 'Conhecimento de transporte cadastrada com Mult Org default, pois não foram passados o codigo e a hash do multorg.';
      --
      vn_loggenericoct_id := null;
      --
      vn_fase := 10;
      --
      pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                        , ev_resumo          => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                        , en_tipo_log        => pk_csf_api_ct.INFORMACAO
                                        , en_referencia_id   => pk_csf_api_ct.gn_referencia_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP'
                                        );
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_conhec_transp_ff fase('||vn_fase||') nro_ct('||en_nro_ct||'):'||sqlerrm;
      --
      declare
         vn_loggenericoct_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, pk_csf_api_ct.gv_mensagem_log);
      --
end pkb_conhec_transp_ff;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura dos Conhecimentos de Transportes
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_Conhec_Transp ( ev_cpf_cnpj_emit in varchar2 )
is
   --
   vn_fase               number := 0;
   vt_log_generico       dbms_sql.number_table;
   vn_conhectransp_id    Conhec_Transp.id%TYPE;
   vn_empresa_id         Empresa.id%TYPE;
   vn_dm_st_proc         Conhec_Transp.dm_st_proc%type;
   vn_cancelado          number := 0;
   i                     pls_integer;
   vn_multorg_id         mult_org.id%type;
   vn_integra            number := 1;            
   --
   ----------------------------------------------------------------------------------------------------
   -- Função para verificar se existe cancelamento
   ----------------------------------------------------------------------------------------------------
   function fkg_existe_cancelamento ( ev_cpf_cnpj_emit          in             varchar2
                                    , en_dm_ind_emit            in             number
                                    , en_dm_ind_oper            in             number
                                    , ev_cod_part               in             varchar2
                                    , ev_cod_mod                in             varchar2
                                    , ev_serie                  in             varchar2
                                    , en_nro_ct                 in             number
                                    )
            return number
   is
      --
      vv_sql_canc varchar2(4000);
      vn_ret      number := 0;
      --
   begin
      --
      if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_CANC') = 0 then
         --
         vn_ret := 0;
         --
         return vn_ret;
         --
      end if;
      --
      -- Não pega notas com registro de cancelamento
      vv_sql_canc := vv_sql_canc || 'select 1 ' || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_CANC');
      --
      vv_sql_canc := vv_sql_canc || ' where ' || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
      vv_sql_canc := vv_sql_canc || ' and '   || GV_ASPAS || 'DM_IND_OPER'   || GV_ASPAS || ' = ' ||         en_dm_ind_oper;
      vv_sql_canc := vv_sql_canc || ' and '   || GV_ASPAS || 'DM_IND_EMIT'   || GV_ASPAS || ' = ' ||         en_dm_ind_emit;
      --
      if en_dm_ind_emit = 1 and ev_cod_part is not null then
         --
         vv_sql_canc := vv_sql_canc || ' and ' || GV_ASPAS || 'COD_PART'     || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
         --
      end if;
      --
      vv_sql_canc := vv_sql_canc || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
      vv_sql_canc := vv_sql_canc || ' and ' || GV_ASPAS || 'SERIE'   || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
      vv_sql_canc := vv_sql_canc || ' and ' || GV_ASPAS || 'NRO_CT'  || GV_ASPAS || ' = ' ||         en_nro_ct;
      --
      begin
         --
         execute immediate vv_sql_canc into vn_ret;
         --
      exception
         when no_data_found then
            return 0;
         when others then
            -- não registra erro caso a view não exista
            --if sqlcode = -942 then
               null;
            --else
               --
               /*
               pk_csf_api_ct.gv_mensagem_log := 'Erro na fkg_existe_cancelamento:' || sqlerrm;
               --
               declare
                  vn_loggenerico_id  Log_Generico.id%TYPE;
               begin
                  --
                  pk_csf_api_ct.pkb_log_generico ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => gv_resumo
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => null
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP'
                                                 );
                  --
               exception
                  when others then
                     null;
               end;
               */
               --
            --end if;
      end;
      --
      return vn_ret;
      --
   end fkg_existe_cancelamento;

begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   vt_tab_csf_conhec_transp.delete;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql ||         GV_ASPAS || 'CPF_CNPJ_EMIT'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER'         || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE'               || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT'              || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SIT_DOCTO'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF_IBGE_EMIT'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CFOP'                || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NAT_OPER'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_FOR_PAG'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SUBSERIE'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_HR_EMISSAO'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_CTE'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_PROC_EMISS'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VERS_APL_CTE'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'CHAVE_CTE_REF'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE_EMIT'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE_EMIT'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SIGLA_UF_EMIT'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_MODAL'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_SERV'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE_INI'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE_INI'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SIGLA_UF_INI'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'IBGE_CIDADE_FIM'     || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_CIDADE_FIM'    || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SIGLA_UF_FIM'        || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_RETIRA'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DET_RETIRA'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TOMADOR'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'INF_ADIC_FISCO'      || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_ST_PROC'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'USUARIO'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VIAS_DACTE_CUSTOM'   || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_FRT'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_INFOR'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_CTA'             || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SIST_ORIG'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'UNID_ORG'            || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_SAI_ENT'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CARREG'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_LEITURA'          || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CHAVE_CTE'       || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_LEGADO'           || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_GLOBAL'           || GV_ASPAS; --Atualização CTe 3.0
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_IE_TOMA'      || GV_ASPAS; --Atualização CTe 3.0
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'VL_TOT_TRIB'         || GV_ASPAS; --Atualização CTe 3.0
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'OBS_GLOBAL'          || GV_ASPAS; --Atualização CTe 3.0
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_SERV'          || GV_ASPAS; --Atualização CTe 3.0
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'QTDE_CARGA_OS'       || GV_ASPAS; --Atualização CTe 3.0
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP');
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   --
   vn_fase := 1.1;
   -- testa data de inicio da integração
   if gd_dt_ini_integr is not null then
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DT_HR_EMISSAO' || GV_ASPAS || ' >= ' || '''' || to_char(gd_dt_ini_integr, gv_formato_dt_erp) || '''';
      --
   end if;
   --
   vn_fase := 1.2;
   --
   gv_sql := gv_sql || gv_where;
   --
   gv_sql := gv_sql || ' order by ' || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', '         || GV_ASPAS || 'SERIE'         || GV_ASPAS;
   gv_sql := gv_sql || ', '         || GV_ASPAS || 'NRO_CT'        || GV_ASPAS;
   --
   vn_fase := 2;
   --
   gv_resumo := 'Inconsistência de dados no leiaute VW_CSF_CONHEC_TRANSP (empresa: ' || ev_cpf_cnpj_emit || ')';
   --
   -- recupera os Conhecimentos de Transporte não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         null;
         --
         pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp fase(' || vn_fase || '):' || sqlerrm;
         --
         declare
            vn_loggenerico_id  log_generico_ct.id%TYPE;
         begin
            --
            pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => null
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
            --
         exception
            when others then
               null;
         end;
         --
         goto sair_geral;
         --
   end;
   -- Calcula a quantidade de registros buscados no ERP
   -- para ser mostrado na tela de agendamento.
   --
   begin
      pk_agend_integr.gvtn_qtd_erp(gv_cd_obj) := nvl(pk_agend_integr.gvtn_qtd_erp(gv_cd_obj),0) + nvl(vt_tab_csf_conhec_transp.count,0);
   exception
      when others then
         null;
   end;
   --
   if vt_tab_csf_conhec_transp.count > 0 then
      --
      vn_fase := 3;
      -- Leitura do array de conhecimento de transportes
      for i in vt_tab_csf_conhec_transp.first..vt_tab_csf_conhec_transp.last loop
         --
         vt_log_generico.delete;
         --
         vn_multorg_id := gn_multorg_id;
         --
         pkb_conhec_transp_ff( est_log_generico  =>  vt_log_generico
                             , ev_cpf_cnpj_emit  =>  vt_tab_csf_conhec_transp(i).cpf_cnpj_emit
                             , en_dm_ind_emit    =>  vt_tab_csf_conhec_transp(i).dm_ind_emit
                             , en_dm_ind_oper    =>  vt_tab_csf_conhec_transp(i).dm_ind_oper
                             , ev_cod_part       =>  vt_tab_csf_conhec_transp(i).cod_part
                             , ev_cod_mod        =>  vt_tab_csf_conhec_transp(i).cod_mod
                             , ev_serie          =>  vt_tab_csf_conhec_transp(i).serie
                             , en_nro_ct         =>  vt_tab_csf_conhec_transp(i).nro_ct
                             , sn_multorg_id     =>  vn_multorg_id );
         --
         vn_fase := 3.1;
         --
         if nvl(vn_multorg_id, 0) <= 0 then
            --
            vn_multorg_id := gn_multorg_id;
            --
         elsif vn_multorg_id != gn_multorg_id then
            --
            vn_multorg_id := gn_multorg_id;
            --
            pk_csf_api_ct.gv_mensagem_log := 'Mult-org informado pelo usuario('||vn_multorg_id||') não corresponde ao Mult-org da empresa('||gn_multorg_id||').';
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               vn_loggenerico_id := null;
               --
               vn_fase := 3.2;
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => 'Mult-Org incorreto ou não informado.'
                                                 , en_tipo_log        => pk_csf_api_ct.INFORMACAO
                                                 , en_referencia_id   => pk_csf_api_ct.gn_referencia_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP'
                                                 );
            exception
                  when others then
                     null;
            end;
            --
         end if;
         --
         vn_empresa_id := pk_csf.fkg_empresa_id_pelo_cpf_cnpj ( en_multorg_id => vn_multorg_id
                                                              , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
         gv_cabec_ct := 'Empresa: ' || ev_cpf_cnpj_emit
                                    || pk_csf.fkg_nome_empresa ( en_empresa_id => vn_empresa_id );
         --
         vn_fase := 3.3;
         --
         vn_cancelado := fkg_existe_cancelamento ( ev_cpf_cnpj_emit => vt_tab_csf_conhec_transp(i).CPF_CNPJ_EMIT
                                                 , en_dm_ind_emit   => vt_tab_csf_conhec_transp(i).DM_IND_EMIT
                                                 , en_dm_ind_oper   => vt_tab_csf_conhec_transp(i).DM_IND_OPER
                                                 , ev_cod_part      => trim(vt_tab_csf_conhec_transp(i).COD_PART)
                                                 , ev_cod_mod       => vt_tab_csf_conhec_transp(i).COD_MOD
                                                 , ev_serie         => vt_tab_csf_conhec_transp(i).SERIE
                                                 , en_nro_ct        => vt_tab_csf_conhec_transp(i).NRO_CT
                                                 );
         if vn_cancelado = 1 then -- sim tem cancelamento
            --
            goto sair_integr;
            --
         end if;
         --
         pkb_limpa_array;
         --
         vn_fase := 4;
         --
         gv_cabec_ct := gv_cabec_ct || chr(10);
         --
         gv_cabec_ct := gv_cabec_ct || 'Número: ' || vt_tab_csf_conhec_transp(i).NRO_CT;
         --
         gv_cabec_ct := gv_cabec_ct || chr(10);
         --
         gv_cabec_ct := gv_cabec_ct || 'Série: ' || vt_tab_csf_conhec_transp(i).SERIE;
         --
         gv_cabec_ct := gv_cabec_ct || chr(10);
         --
         gv_cabec_ct := gv_cabec_ct || 'Modelo: ' || vt_tab_csf_conhec_transp(i).COD_MOD;
         --
         gv_cabec_ct := gv_cabec_ct || chr(10);
         --
         gv_cabec_ct := gv_cabec_ct || 'Operação: ' || pk_csf.fkg_dominio ( ev_dominio   => 'CONHEC_TRANSP.DM_IND_OPER'
                                                                          , ev_vl        => vt_tab_csf_conhec_transp(i).DM_IND_OPER );
         --
         gv_cabec_ct := gv_cabec_ct || chr(10);
         --
         gv_cabec_ct := gv_cabec_ct || 'Indicador do Emitente: ' || pk_csf.fkg_dominio ( ev_dominio   => 'CONHEC_TRANSP.DM_IND_EMIT'
                                                                                       , ev_vl        => vt_tab_csf_conhec_transp(i).DM_IND_EMIT );
         --
         gv_cabec_ct := gv_cabec_ct || chr(10);
         --
         vn_fase := 4.1;
         -- Recupera o ID do conhecimento de transporte
         vn_conhectransp_id := pk_csf_ct.fkg_busca_conhectransp_id ( en_empresa_id      => vn_empresa_id
                                                                   , ev_cod_part        => vt_tab_csf_conhec_transp(i).cod_part
                                                                   , ev_cod_mod         => vt_tab_csf_conhec_transp(i).cod_mod
                                                                   , ev_serie           => vt_tab_csf_conhec_transp(i).serie
                                                                   , ev_subserie        => vt_tab_csf_conhec_transp(i).subserie
                                                                   , en_nro_ct          => vt_tab_csf_conhec_transp(i).nro_ct
                                                                   , en_dm_ind_oper     => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                                                   , en_dm_ind_emit     => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                                                   , en_dm_arm_cte_terc => 0
                                                                   );
         --
         vn_fase := 4.2;
         --
         -- Se o conhecimento já existe no sistema, então
         if nvl(vn_conhectransp_id,0) > 0 then
            --
            vn_dm_st_proc := pk_csf.fkg_st_proc_ct ( en_conhectransp_id => vn_conhectransp_id );
            --
            -- 0  Aguardando Validação    / 1  Aguardando Processamento  / 2  Aguardando Envio / 3  Aguardando Retorno /4  Autorizada
            -- 5  Rejeitada               / 6  Denegada                  / 7  Cancelada        / 8  Inutilizada        / 10  Erro de validação / 11  Erro na Montagem do XML /
            -- 12  Erro ao enviar à Sefaz / 13  Erro ao obter o retorno do envio à Sefaz       / 14  Sefaz em contingência /
            -- 15  Erro ao enviar a Solicitação de Cancelamento ao Sefaz / 16  Erro ao enviar a Solicitação de Inutilização ao Sefaz / 99  Erro Geral de Sistema
            --
            if vn_dm_st_proc in ( 0, 1, 2, 3, 4, 6, 7, 8, 14 ) then
               -- Sai do processo
               goto sair_integr;
            else
               --
               pk_csf_api_ct.pkb_excluir_dados_ct ( en_conhectransp_id   => vn_conhectransp_id 
                                                  , en_excl_rloteintwsct => 0 ); -- 0-Não
               --
            end if;
            --
         end if;
         --
         pk_csf_api_ct.gt_row_conhec_transp := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp.dt_hr_ent_sist    := sysdate;
         pk_csf_api_ct.gt_row_conhec_transp.uf_ibge_emit      := vt_tab_csf_conhec_transp(i).uf_ibge_emit;
         pk_csf_api_ct.gt_row_conhec_transp.cfop              := vt_tab_csf_conhec_transp(i).cfop;
         pk_csf_api_ct.gt_row_conhec_transp.nat_oper          := trim(vt_tab_csf_conhec_transp(i).nat_oper);
         pk_csf_api_ct.gt_row_conhec_transp.dm_for_pag        := vt_tab_csf_conhec_transp(i).dm_for_pag;
         pk_csf_api_ct.gt_row_conhec_transp.serie             := trim(vt_tab_csf_conhec_transp(i).serie);
         pk_csf_api_ct.gt_row_conhec_transp.subserie          := vt_tab_csf_conhec_transp(i).subserie;
         pk_csf_api_ct.gt_row_conhec_transp.nro_ct            := vt_tab_csf_conhec_transp(i).nro_ct;
         pk_csf_api_ct.gt_row_conhec_transp.dt_hr_emissao     := vt_tab_csf_conhec_transp(i).dt_hr_emissao;
         pk_csf_api_ct.gt_row_conhec_transp.dm_tp_cte         := vt_tab_csf_conhec_transp(i).dm_tp_cte;
         pk_csf_api_ct.gt_row_conhec_transp.dm_proc_emiss     := vt_tab_csf_conhec_transp(i).dm_proc_emiss;
         pk_csf_api_ct.gt_row_conhec_transp.vers_apl_cte      := vt_tab_csf_conhec_transp(i).vers_apl_cte;
         pk_csf_api_ct.gt_row_conhec_transp.chave_cte_ref     := vt_tab_csf_conhec_transp(i).chave_cte_ref;
         pk_csf_api_ct.gt_row_conhec_transp.ibge_cidade_emit  := trim(vt_tab_csf_conhec_transp(i).ibge_cidade_emit);
         pk_csf_api_ct.gt_row_conhec_transp.descr_cidade_emit := vt_tab_csf_conhec_transp(i).descr_cidade_emit;
         pk_csf_api_ct.gt_row_conhec_transp.sigla_uf_emit     := vt_tab_csf_conhec_transp(i).sigla_uf_emit;
         pk_csf_api_ct.gt_row_conhec_transp.dm_modal          := vt_tab_csf_conhec_transp(i).dm_modal;
         pk_csf_api_ct.gt_row_conhec_transp.dm_tp_serv        := vt_tab_csf_conhec_transp(i).dm_tp_serv;
         pk_csf_api_ct.gt_row_conhec_transp.ibge_cidade_ini   := vt_tab_csf_conhec_transp(i).ibge_cidade_ini;
         pk_csf_api_ct.gt_row_conhec_transp.descr_cidade_ini  := vt_tab_csf_conhec_transp(i).descr_cidade_ini;
         pk_csf_api_ct.gt_row_conhec_transp.sigla_uf_ini      := vt_tab_csf_conhec_transp(i).sigla_uf_ini;
         pk_csf_api_ct.gt_row_conhec_transp.ibge_cidade_fim   := vt_tab_csf_conhec_transp(i).ibge_cidade_fim;
         pk_csf_api_ct.gt_row_conhec_transp.descr_cidade_fim  := vt_tab_csf_conhec_transp(i).descr_cidade_fim;
         pk_csf_api_ct.gt_row_conhec_transp.sigla_uf_fim      := vt_tab_csf_conhec_transp(i).sigla_uf_fim;
         pk_csf_api_ct.gt_row_conhec_transp.dm_retira         := vt_tab_csf_conhec_transp(i).dm_retira;
         pk_csf_api_ct.gt_row_conhec_transp.det_retira        := vt_tab_csf_conhec_transp(i).det_retira;
         pk_csf_api_ct.gt_row_conhec_transp.dm_tomador        := vt_tab_csf_conhec_transp(i).dm_tomador;
         pk_csf_api_ct.gt_row_conhec_transp.inf_adic_fisco    := vt_tab_csf_conhec_transp(i).inf_adic_fisco;
         pk_csf_api_ct.gt_row_conhec_transp.dm_st_proc        := vt_tab_csf_conhec_transp(i).DM_ST_PROC;
         pk_csf_api_ct.gt_row_conhec_transp.dt_st_proc        := sysdate;
         pk_csf_api_ct.gt_row_conhec_transp.dm_impressa       := 0;
         pk_csf_api_ct.gt_row_conhec_transp.dm_st_email       := 0;
         pk_csf_api_ct.gt_row_conhec_transp.id_usuario_erp    := vt_tab_csf_conhec_transp(i).usuario;
         pk_csf_api_ct.gt_row_conhec_transp.vias_dacte_custom := vt_tab_csf_conhec_transp(i).vias_dacte_custom;
         pk_csf_api_ct.gt_row_conhec_transp.dm_ind_emit       := vt_tab_csf_conhec_transp(i).dm_ind_emit;
         pk_csf_api_ct.gt_row_conhec_transp.dm_ind_oper       := vt_tab_csf_conhec_transp(i).dm_ind_oper;
         pk_csf_api_ct.gt_row_conhec_transp.dm_ind_frt        := vt_tab_csf_conhec_transp(i).dm_ind_frt;
         pk_csf_api_ct.gt_row_conhec_transp.cod_cta           := vt_tab_csf_conhec_transp(i).cod_cta;
         pk_csf_api_ct.gt_row_conhec_transp.dm_st_integra     := 7; -- Integração por view de banco
         pk_csf_api_ct.gt_row_conhec_transp.dt_sai_ent        := vt_tab_csf_conhec_transp(i).dt_sai_ent;
         pk_csf_api_ct.gt_row_conhec_transp.nro_carreg        := vt_tab_csf_conhec_transp(i).nro_carreg;
         pk_csf_api_ct.gt_row_conhec_transp.nro_chave_cte     := vt_tab_csf_conhec_transp(i).nro_chave_cte;
         pk_csf_api_ct.gt_row_conhec_transp.dm_legado         := vt_tab_csf_conhec_transp(i).dm_legado;
         pk_csf_api_ct.gt_row_conhec_transp.dm_global         := vt_tab_csf_conhec_transp(i).dm_global;      --Atualização CTe 3.0
         pk_csf_api_ct.gt_row_conhec_transp.dm_ind_ie_toma    := vt_tab_csf_conhec_transp(i).dm_ind_ie_toma; --Atualização CTe 3.0
         pk_csf_api_ct.gt_row_conhec_transp.vl_tot_trib       := vt_tab_csf_conhec_transp(i).vl_tot_trib;    --Atualização CTe 3.0
         pk_csf_api_ct.gt_row_conhec_transp.obs_global        := vt_tab_csf_conhec_transp(i).obs_global;     --Atualização CTe 3.0
         pk_csf_api_ct.gt_row_conhec_transp.descr_serv        := vt_tab_csf_conhec_transp(i).descr_serv;     --Atualização CTe 3.0
         pk_csf_api_ct.gt_row_conhec_transp.qtde_carga_os     := vt_tab_csf_conhec_transp(i).qtde_carga_os;  --Atualização CTe 3.0
         --
         vn_fase := 5;
         --
         -- Chama o Processo de validação dos dados do Conhecimento de Transporte
         pk_csf_api_ct.pkb_integr_conhec_transp ( est_log_generico           => vt_log_generico
                                                , est_row_conhec_transp      => pk_csf_api_ct.gt_row_conhec_transp
                                                , ev_cod_mod                 => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                                , ev_cod_matriz              => null
                                                , ev_cod_filial              => null
                                                , ev_empresa_cpf_cnpj        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                                , ev_cod_part                => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                                , ev_cd_sitdocto             => vt_tab_csf_conhec_transp(i).sit_docto
                                                , ev_cod_infor               => vt_tab_csf_conhec_transp(i).cod_infor
                                                , ev_sist_orig               => vt_tab_csf_conhec_transp(i).sist_orig
                                                , ev_cod_unid_org            => vt_tab_csf_conhec_transp(i).unid_org
                                                , en_multorg_id              => vn_multorg_id
                                                , en_empresaintegrbanco_id   => gn_empresaintegrbanco_id
                                                , en_loteintws_id            => null
                                                , en_integra                 => vn_integra
                                                );
         --
      -- Se o valor do parâmetro "vn_integra" for igual a "1" então integra as tabelas filhas, sendo "0" sai da rotina de integração
         if nvl(vn_integra,1) = 0 then
            --
            goto sair_integr;
            --
         end if;
         --
         vn_fase := 6;
         -- leitura do tomador do conhecimento de transporte
         pkb_ler_conhec_transp_tomador  ( est_log_generico        => vt_log_generico
                                        , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                        , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                        , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                        , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                        , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                        , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                        , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;

         --
         vn_fase := 7;
         -- Leitura dos Dados complementares do CT-e para fins operacionais ou comerciais.
         pkb_ler_conhec_transp_compl  ( est_log_generico        => vt_log_generico
                                      , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                      , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                      , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                      , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                      , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                      , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                      , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 8;
         -- Leitura de Identificação do Emitente do CT.
         pkb_ler_conhec_transp_emit  ( est_log_generico          => vt_log_generico
                                     , en_conhectransp_id        => pk_csf_api_ct.gt_row_conhec_transp.id
                                    --| parâmetros de chave
                                     , ev_cpf_cnpj_emit          => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit            => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper            => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part               => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod                => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie                  => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct                 => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 8.1;
         -- Leitura do Remetente das mercadorias transportadas pelo CT
         pkb_ler_conhec_transp_rem  ( est_log_generico          => vt_log_generico
                                    , en_conhectransp_id        => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit          => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit            => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper            => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part               => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod                => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                  => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct                 => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
        vn_fase := 9;
         -- Leitura de informações do Expedidor da Carga.
        pkb_ler_conhec_transp_exped ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 10;
         -- Leitura de informações do Recebedor da Carga.

         pkb_ler_conhec_transp_receb ( est_log_generico       => vt_log_generico
                                     , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
          vn_fase := 11;
         -- Leitura de informações do local de coleta e entrega da nota fiscal
         pkb_ler_conhec_transp_dest ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 12;
         -- Leitura de informações do transporte da nota fiscal
         pkb_ler_conhec_transp_vlprest  ( est_log_generico        => vt_log_generico
                                        , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                        , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                        , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                        , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                        , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                        , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                        , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 13;
         -- Leitura de informações relativas aos Impostos.
         pkb_ler_conhec_transp_imp  ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 14;
         -- Leitura de informações da Carga do CT-e.
         pkb_ler_conhec_transp_infcarga  ( est_log_generico        => vt_log_generico
                                         , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                       --| parâmetros de chave
                                         , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                         , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                         , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                         , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                         , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                         , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                         , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
        vn_fase := 15;
        -- Leitura das Aquisições dos containers.
        pkb_ler_conhec_transp_cont  ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 16;
         -- Leitura das Aquisições de Documentos de Transporte Anterior.
         pkb_ler_conhec_transp_docant ( est_log_generico        => vt_log_generico
                                      , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                      , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                      , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                      , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                      , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                      , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                      , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 17;
         -- Leitura do Seguro da Carga
         pkb_ler_conhec_transp_seg  ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 17.1;
         -- Leitura do modal Rodoviário.
         pkb_ler_conhec_transp_rodo ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 17.2;
         -- Leitura do modal Rodoviário.
         pkb_ler_ct_rodo_os ( est_log_generico        => vt_log_generico
                            , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                          --| parâmetros de chave
                            , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                            , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                            , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                            , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                            , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                            , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                            , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 18;
         -- Leitura do modal Aereo.
         pkb_ler_conhec_transp_aereo ( est_log_generico        => vt_log_generico
                                     , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 19;
         -- Leitura do modal Aquaviário.
         pkb_ler_conhec_transp_aquav ( est_log_generico        => vt_log_generico
                                     , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 20;
         -- Leitura do modal Ferroviário.
         pkb_ler_conhec_transp_ferrov ( est_log_generico        => vt_log_generico
                                      , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                      , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                      , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                      , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                      , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                      , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                      , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 21;
         -- Leitura do modal Dutoviário.
         pkb_ler_conhec_transp_duto ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 22;
         -- Leitura de Produtos Perigosos.
         pkb_ler_conhec_transp_peri ( est_log_generico       => vt_log_generico
                                    , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct
                                    ) ;
         --
         vn_fase := 23;
         -- Leitura do veículos transportados.
         pkb_ler_conhec_transp_veic ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 24;
         -- Leitura do CT-e de substituição.
         pkb_ler_conhec_transp_subst ( est_log_generico        => vt_log_generico
                                     , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 25;
         -- Leitura de Detalhamento do CT-e complementado
         pkb_ler_ct_compltado  ( est_log_generico        => vt_log_generico
                               , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                               , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                               , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                               , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                               , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                               , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                               , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 26;
         -- Leitura do Detalhamento do CT-e do tipo Anulação de Valores
         pkb_ler_conhec_transp_anul ( est_log_generico       => vt_log_generico
                                    , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct ) ;
         --
         vn_fase := 27;
         --
         --| Leitura de informações de envio de E-mail de CTe
         pkb_ler_conhec_transp_email ( est_log_generico       => vt_log_generico
                                     , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct
                                     );
         --
         vn_fase := 28;
         --
         pkb_ler_conhec_transp_impr ( est_log_generico       => vt_log_generico
                                    , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct
                                    );
         --
         vn_fase := 29;
         --
         pkb_ler_conhec_transp_fat  ( est_log_generico      => vt_log_generico
                                    , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                    );
         --
         vn_fase := 30;
         --
         pkb_ler_conhec_transp_dup  ( est_log_generico      => vt_log_generico
                                    , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                    );
         --
         vn_fase := 31;
         --
         pkb_ler_ct_aut_xml ( est_log_generico        => vt_log_generico
                            , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                          --| parâmetros de chave
                            , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                            , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                            , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                            , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                            , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                            , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                            , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct
                            );
         --
         vn_fase := 32;
         --
         pkb_ler_ct_multimodal ( est_log_generico     => vt_log_generico
                               , en_conhectransp_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit     => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                               , en_dm_ind_emit       => vt_tab_csf_conhec_transp(i).dm_ind_emit
                               , en_dm_ind_oper       => vt_tab_csf_conhec_transp(i).dm_ind_oper
                               , ev_cod_part          => trim(vt_tab_csf_conhec_transp(i).cod_part)
                               , ev_cod_mod           => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                               , ev_serie             => trim(vt_tab_csf_conhec_transp(i).serie)
                               , en_nro_ct            => vt_tab_csf_conhec_transp(i).nro_ct
                               );
         --
         vn_fase := 33;
         --
         pkb_ler_ct_inf_nf ( est_log_generico       => vt_log_generico
                           , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                         --| parâmetros de chave
                           , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                           , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                           , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                           , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                           , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                           , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                           , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct
                           );
         --
         vn_fase := 34;
         --
         pkb_ler_ct_inf_nfe ( est_log_generico       => vt_log_generico
                            , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                          --| parâmetros de chave
                            , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                            , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                            , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                            , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                            , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                            , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                            , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct
                            );
         --
         vn_fase := 35;
         --
         pkb_ler_ct_inf_outro ( est_log_generico      => vt_log_generico
                              , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                            --| parâmetros de chave
                              , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                              , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                              , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                              , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                              , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                              , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                              , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                              );
         --
         vn_fase := 36;
         --
         pkb_ler_ct_inf_unid_transp ( est_log_generico        => vt_log_generico
                                    , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                  --| parâmetros de chave
                                    , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                    , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                    , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                    , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                    , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                    , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                    , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct
                                    );
         --
         vn_fase := 37;
         --
         pkb_ler_ct_inf_unid_carga ( est_log_generico        => vt_log_generico
                                   , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                 --| parâmetros de chave
                                   , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                   , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                   , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                   , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                   , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                   , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                   , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct
                                   );
         --
         vn_fase := 38;
         --
         pkb_ler_r_nf_ctinfunidcarga ( est_log_generico    => vt_log_generico
                                     , en_conhectransp_id  => pk_csf_api_ct.gt_row_conhec_transp.id
                                   --| parâmetros de chave
                                     , ev_cpf_cnpj_emit    => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                     , en_dm_ind_emit      => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                     , en_dm_ind_oper      => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                     , ev_cod_part         => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                     , ev_cod_mod          => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                     , ev_serie            => trim(vt_tab_csf_conhec_transp(i).serie)
                                     , en_nro_ct           => vt_tab_csf_conhec_transp(i).nro_ct
                                     );
         --
         vn_fase := 39;
         --
         pkb_ler_r_nf_ctinfunidtransp ( est_log_generico      => vt_log_generico
                                      , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                      , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                      , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                      , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                      , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                      , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                      , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                      );
         --
         vn_fase := 40;
         --
         pkb_ler_r_nfe_ctinfunidtransp ( est_log_generico      => vt_log_generico
                                       , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                     --| parâmetros de chave
                                       , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                       , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                       , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                       , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                       , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                       , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                       , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                       );
         --
         vn_fase := 41;
         --
         pkb_ler_r_nfe_ctinfunidcarga ( est_log_generico      => vt_log_generico
                                      , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                    --| parâmetros de chave
                                      , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                      , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                      , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                      , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                      , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                      , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                      , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                      );
         --
         vn_fase := 42;
         --
         pkb_ler_r_outro_ctinfunidtrans ( est_log_generico       => vt_log_generico
                                        , en_conhectransp_id     => pk_csf_api_ct.gt_row_conhec_transp.id
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit       => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                        , en_dm_ind_emit         => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                        , en_dm_ind_oper         => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                        , ev_cod_part            => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                        , ev_cod_mod             => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                        , ev_serie               => trim(vt_tab_csf_conhec_transp(i).serie)
                                        , en_nro_ct              => vt_tab_csf_conhec_transp(i).nro_ct
                                        );
         --
         vn_fase := 43;
         --
         pkb_ler_r_outro_ctinfunidcarga ( est_log_generico      => vt_log_generico
                                        , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                        , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                        , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                        , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                        , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                        , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                        , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                        );
         --
         vn_fase := 44;
         --
         pkb_ler_ct_part_icms ( est_log_generico      => vt_log_generico
                              , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                            --| parâmetros de chave
                              , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                              , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                              , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                              , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                              , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                              , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                              , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                              );
         --
         vn_fase := 45;
         --
         pkb_ler_ct_inf_vinc_mult ( est_log_generico      => vt_log_generico
                                  , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                --| parâmetros de chave
                                  , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                  , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                  , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                  , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                  , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                  , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                  , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                  );
         --
         vn_fase := 46;
         --
         pkb_ler_conhec_transp_percurso ( est_log_generico      => vt_log_generico
                                        , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                                      --| parâmetros de chave
                                        , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                        , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                        , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                        , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                        , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                        , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                                        , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                                        );
         --
         vn_fase := 47;
         --
         pkb_ler_ct_doc_ref_os ( est_log_generico      => vt_log_generico
                               , en_conhectransp_id    => pk_csf_api_ct.gt_row_conhec_transp.id
                             --| parâmetros de chave
                               , ev_cpf_cnpj_emit      => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                               , en_dm_ind_emit        => vt_tab_csf_conhec_transp(i).dm_ind_emit
                               , en_dm_ind_oper        => vt_tab_csf_conhec_transp(i).dm_ind_oper
                               , ev_cod_part           => trim(vt_tab_csf_conhec_transp(i).cod_part)
                               , ev_cod_mod            => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                               , ev_serie              => trim(vt_tab_csf_conhec_transp(i).serie)
                               , en_nro_ct             => vt_tab_csf_conhec_transp(i).nro_ct
                               );
         --
         vn_fase := 48;
         --
         pkb_ler_evento_cte ( est_log_generico        => vt_log_generico
                            , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                          --| parâmetros de chave
                            , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                            , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                            , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                            , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                            , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                            , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                            , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct
                            );
         --
         vn_fase := 49;
         --
         -- Leitura de informações relativas aos Outros Impostos.
         pkb_ler_conhec_transp_imp_out  ( est_log_generico        => vt_log_generico
                                        , en_conhectransp_id      => pk_csf_api_ct.gt_row_conhec_transp.id
                                        --| parâmetros de chave
                                        , ev_cpf_cnpj_emit        => trim(vt_tab_csf_conhec_transp(i).cpf_cnpj_emit)
                                        , en_dm_ind_emit          => vt_tab_csf_conhec_transp(i).dm_ind_emit
                                        , en_dm_ind_oper          => vt_tab_csf_conhec_transp(i).dm_ind_oper
                                        , ev_cod_part             => trim(vt_tab_csf_conhec_transp(i).cod_part)
                                        , ev_cod_mod              => trim(vt_tab_csf_conhec_transp(i).cod_mod)
                                        , ev_serie                => trim(vt_tab_csf_conhec_transp(i).serie)
                                        , en_nro_ct               => vt_tab_csf_conhec_transp(i).nro_ct );
         --
         ---------------------------------------------------------------------------------------
         -- Processos que consistem a informação do conhecimento de transporte
         ---------------------------------------------------------------------------------------
         pk_csf_api_ct.pkb_consistem_ct ( est_log_generico     => vt_log_generico
                                        , en_conhectransp_id   => pk_csf_api_ct.gt_row_conhec_transp.id );
         --
         vn_fase := 99;
         --
         -- Se registrou algum log, altera o conhecimento de transporte para dm_st_proc = 10 - "Erro de Validação"
		 -- verifica se no log genrico tem erro ou só aviso/informação
         if nvl(vt_log_generico.count,0) > 0 and
		    pk_csf_api_ct.fkg_ver_erro_log_generico_ct(en_conhec_transp_id => pk_csf_api_ct.gt_row_conhec_transp.id ) = 1 then
            --
            vn_fase := 99.1;
            --
            begin
               --
               vn_fase := 99.2;
               --
               update Conhec_Transp set dm_st_proc = 10
                                      , dt_st_proc = sysdate
                where id = pk_csf_api_ct.gt_row_conhec_transp.id;
               --
            exception
               when others then
                  --
                  pk_csf_api_ct.gv_mensagem_log := 'Erro na pkb_ler_Conhec_Transp fase(' || vn_fase || '):' || sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_ct.id%TYPE;
                  begin
                     --
                     pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                       , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                       , ev_resumo          => gv_cabec_ct
                                                       , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                       , en_referencia_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                                                       , ev_obj_referencia  => 'CONHEC_TRANSP' );
                     --
                  exception
                     when others then
                        null;
                  end;
                  --
            end;
            --
         else
            -- Se não houve nenhum nenhum registro de ocorrência
            -- então atualiza o dm_st_proc para 1-Aguardando Envio
            vn_fase := 99.3;
               --
               begin
                  --
                  if vt_tab_csf_conhec_transp(i).DM_IND_EMIT = 0 then
                     --
                     if vt_tab_csf_conhec_transp(i).DM_ST_PROC not in (4, 6, 7, 8) then
                        --
                        if nvl(vt_tab_csf_conhec_transp(i).DM_LEGADO,0) = 1 then --Legado Autorizado
                           vt_tab_csf_conhec_transp(i).DM_ST_PROC := 4;
                        elsif nvl(vt_tab_csf_conhec_transp(i).DM_LEGADO,0) = 2 then --Legado Denegado
                           vt_tab_csf_conhec_transp(i).DM_ST_PROC := 6;
                        elsif nvl(vt_tab_csf_conhec_transp(i).DM_LEGADO,0) = 3 then --Legado Cancelado
                           vt_tab_csf_conhec_transp(i).DM_ST_PROC := 7;
                        elsif nvl(vt_tab_csf_conhec_transp(i).DM_LEGADO,0) = 4 then --Legado Inutilizado
                           vt_tab_csf_conhec_transp(i).DM_ST_PROC := 8;
                        else
                           vt_tab_csf_conhec_transp(i).DM_ST_PROC := 1;
                        end if;
                        --
                     end if;
                     --
                     update conhec_transp set dm_st_proc = vt_tab_csf_conhec_transp(i).DM_ST_PROC
                                            , dt_st_proc = sysdate
                      where id = pk_csf_api_ct.gt_row_conhec_transp.id;
                     --
                  else -- Em caso de Notas emitidas por terceiros, situação fica como AUtorizada
                     --
                     update conhec_transp set dm_st_proc = 4
                                            , dt_st_proc = sysdate
                      where id = pk_csf_api_ct.gt_row_conhec_transp.id;
                     --
                  end if;
                  --
               exception
                  when others then
                     --
                     pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp fase(' || vn_fase || '):' || sqlerrm;
                     --
                     declare
                        vn_loggenerico_id  log_generico_ct.id%TYPE;
                     begin
                        --
                        pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                          , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                          , ev_resumo          => gv_cabec_ct
                                                          , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                          , en_referencia_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                                                          , ev_obj_referencia  => 'CONHEC_TRANSP' );
                        --
                     exception
                        when others then
                           null;
                     end;
                     --
               end;
               --
         end if;
         --
         -- Calcula a quantidade de registros integrados com sucesso
         -- e com erro para ser mostrado na tela de agendamento.
         --
         begin
            --
            if pk_agend_integr.gvtn_qtd_total(gv_cd_obj) >
               (pk_agend_integr.gvtn_qtd_erro(gv_cd_obj) + pk_agend_integr.gvtn_qtd_sucesso(gv_cd_obj)) then
               --
               if nvl(vt_log_generico.count,0) > 0 then -- Erro de validação
                 -- verifica se no log genrico tem erro ou só aviso/informação
                 if pk_csf_api_ct.fkg_ver_erro_log_generico_ct(en_conhec_transp_id => pk_csf_api_ct.gt_row_conhec_transp.id ) = 1 then
                    --
                    pk_agend_integr.gvtn_qtd_erro(gv_cd_obj) := nvl(pk_agend_integr.gvtn_qtd_erro(gv_cd_obj),0) + 1;
                    --
                 else
                    --
                    pk_agend_integr.gvtn_qtd_sucesso(gv_cd_obj) := nvl(pk_agend_integr.gvtn_qtd_sucesso(gv_cd_obj),0) + 1;
                    --
                 end if;
               else
                  --
                  pk_agend_integr.gvtn_qtd_sucesso(gv_cd_obj) := nvl(pk_agend_integr.gvtn_qtd_sucesso(gv_cd_obj),0) + 1;
                  --
               end if;
               --
            end if;
            --
         exception
            when others then
               null;
         end;
         --
         commit;
         --
         <<sair_integr>>
         --
         pk_csf_api_ct.pkb_seta_referencia_id ( en_id => null );
         --
      end loop;
      --
   end if;
   --
   <<sair_geral>>
   --
   null;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => gv_resumo
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_Conhec_Transp;

-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de campos flexfield de conhecimento de transportes cancelados
-------------------------------------------------------------------------------------------------------

procedure pkb_conhec_transp_canc_ff( est_log_generico  in  out nocopy  dbms_sql.number_table
                                   , ev_cpf_cnpj_emit  in  varchar2
                                   , en_dm_ind_emit    in  number
                                   , en_dm_ind_oper    in  number
                                   , ev_cod_part       in  varchar2
                                   , ev_cod_mod        in  varchar2
                                   , ev_serie          in  varchar2
                                   , en_nro_ct         in  number
                                   , sn_multorg_id     in  out nocopy  mult_org.id%type)
is
   vn_fase               number := 0;
   vn_loggenericoct_id   log_generico_ct.id%TYPE;
   vv_cod                mult_org.cd%type;
   vv_hash               mult_org.hash%type;
   vv_cod_ret            mult_org.cd%type;
   vv_hash_ret           mult_org.hash%type;
   vn_multorg_id         mult_org.id%type := 0;
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_CANC_FF') = 0 then
      --
      sn_multorg_id := vn_multorg_id;
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   vt_tab_conhec_transp_canc_ff.delete;
   --
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_EMIT' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_OPER' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_MOD' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'SERIE' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'NRO_CT' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'ATRIBUTO' || trim(GV_ASPAS);
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'VALOR' || trim(GV_ASPAS);
   --
   vn_fase := 1.1;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_CANC_FF' );
   --
   gv_sql := gv_sql || ' WHERE ' || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS) || ' = ' ||''''||ev_cpf_cnpj_emit||'''';
   --
   gv_sql := gv_sql || ' AND ' || trim(GV_ASPAS) || 'DM_IND_EMIT' || trim(GV_ASPAS) || ' = ' ||en_dm_ind_emit;
   --
   gv_sql := gv_sql || ' AND ' || trim(GV_ASPAS) || 'DM_IND_OPER' || trim(GV_ASPAS) || ' = ' ||en_dm_ind_oper;
   --
   gv_sql := gv_sql || ' AND ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS) || ' = ' ||''''||ev_cod_part||'''';
   --
   gv_sql := gv_sql || ' AND ' || trim(GV_ASPAS) || 'COD_MOD' || trim(GV_ASPAS) || ' = ' ||''''||ev_cod_mod||'''';
   --
   gv_sql := gv_sql || ' AND ' || trim(GV_ASPAS) || 'SERIE' || trim(GV_ASPAS) || ' = ' ||''''||ev_serie||'''';
   --
   gv_sql := gv_sql || ' AND ' || trim(GV_ASPAS) || 'NRO_CT' || trim(GV_ASPAS) || ' = ' ||en_nro_ct;
   --
   gv_sql := gv_sql || ' ORDER BY ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'CPF_CNPJ_EMIT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_EMIT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'DM_IND_OPER' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_PART' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'COD_MOD' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'SERIE' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'NRO_CT' || trim(GV_ASPAS);
   --
   gv_sql := gv_sql || ', ' || trim(GV_ASPAS) || 'ATRIBUTO' || trim(GV_ASPAS);
   --
   vn_fase := 2;
   -- recupera as Notas Fiscais não integradas
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_conhec_transp_canc_ff;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_conhec_transp_canc_ff fase('||vn_fase||'):'||sqlerrm;
            --
            declare
               vn_loggenericoct_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                                   , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                   , ev_resumo          => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                                   , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                   , en_referencia_id   => null
                                                   , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
            exception
               when others then
                  null;
            end;
            --
            raise_application_error (-20101, pk_csf_api_ct.gv_mensagem_log);
            --
         end if;
   end;
   --
   vn_fase := 3;
   --
   if vt_tab_conhec_transp_canc_ff.count > 0 then
      --
      for i in vt_tab_conhec_transp_canc_ff.first..vt_tab_conhec_transp_canc_ff.last loop
         --
         vn_fase := 4;
         --
         if vt_tab_conhec_transp_canc_ff(i).atributo in ('COD_MULT_ORG', 'HASH_MULT_ORG') then
            --
            vn_fase := 5;
            -- Chama procedimento que faz a validação dos itens da Pessoa - campos flex field.
            vv_cod_ret := null;
            vv_hash_ret := null;

            pk_csf_api_ct.pkb_val_atrib_multorg ( est_log_generico     => est_log_generico
                                                 , ev_obj_name          => 'VW_CSF_CONHEC_TRANSP_CANC_FF'
                                                 , ev_atributo          => vt_tab_conhec_transp_canc_ff(i).atributo
                                                 , ev_valor             => vt_tab_conhec_transp_canc_ff(i).valor
                                                 , sv_cod_mult_org      => vv_cod_ret
                                                 , sv_hash_mult_org     => vv_hash_ret
                                                 , en_referencia_id     => null
                                                 , ev_obj_referencia    => 'CONHEC_TRANSP');
           --
           vn_fase := 6;
           --
           if vv_cod_ret is not null then
              vv_cod := vv_cod_ret;
           end if;
           --
           if vv_hash_ret is not null then
              vv_hash := vv_hash_ret;
           end if;
           --
        end if;
        --
      end loop;
      --
      vn_fase := 7;
      --
      if nvl(est_log_generico.count, 0) <= 0 then
         --
         vn_fase := 8;
         --
         vn_multorg_id := sn_multorg_id;
         pk_csf_api_ct.pkb_ret_multorg_id( est_log_generico   => est_log_generico
                                          , ev_cod_mult_org    => vv_cod
                                          , ev_hash_mult_org   => vv_hash
                                          , sn_multorg_id      => vn_multorg_id
                                          , en_referencia_id   => null
                                          , ev_obj_referencia  => 'CONHEC_TRANSP'
                                          );
      end if;
      --
      vn_fase := 9;
      --
      sn_multorg_id := vn_multorg_id;
      --
   else
      --
      pk_csf_api_ct.gv_mensagem_log := 'Conhecimento de transporte cadastrada com Mult Org default (codigo = 1), pois não foram passados o codigo e a hash do multorg.';
      --
      vn_loggenericoct_id := null;
      --
      vn_fase := 10;
      --
      pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                          , ev_mensagem           => pk_csf_api_ct.gv_mensagem_log
                                          , ev_resumo             => 'Conhecimento de transporte nro_ct: ' || en_nro_ct
                                          , en_tipo_log           => pk_csf_api_ct.INFORMACAO
                                          , en_referencia_id      => pk_csf_api_ct.gn_referencia_id
                                          , ev_obj_referencia     => 'CONHEC_TRANSP'
                                          );
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_conhec_transp_canc_ff fase('||vn_fase||') nro_ct('||en_nro_ct||'):'||sqlerrm;
      --
      declare
         vn_loggenericoct_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenericoct_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => 'Conhecimento de transporte  cod_part: ' || ev_cod_part
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => pk_csf_api_ct.gt_row_conhec_transp.id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
      raise_application_error (-20101, pk_csf_api_ct.gv_mensagem_log);
      --
end pkb_conhec_transp_canc_ff;

-------------------------------------------------------------------------------------------------------
--| Procedimento de leitura de conhecimento de transportes cancelados
-------------------------------------------------------------------------------------------------------
procedure pkb_ler_Conhec_Transp_Canc ( ev_cpf_cnpj_emit in varchar2 )
is
   --
   vn_fase               number := 0;
   vt_log_generico       dbms_sql.number_table;
   vn_conhectransp_id    Conhec_Transp.id%TYPE;
   vn_empresa_id         Empresa.id%TYPE;
   i                     pls_integer;
   vn_multorg_id         mult_org.id%type;
   -------------------------------------------------------------------------------------------------------
   -- Processo para excluir cancelamento
   -------------------------------------------------------------------------------------------------------
   procedure pkb_excluir_canc ( ev_cpf_cnpj_emit          in             varchar2
                              , en_dm_ind_emit            in             number
                              , en_dm_ind_oper            in             number
                              , ev_cod_part               in             varchar2
                              , ev_cod_mod                in             varchar2
                              , ev_serie                  in             varchar2
                              , en_nro_ct                 in             number
                              , en_conhectransp_id        in             number
                              )
   is
      --
      PRAGMA AUTONOMOUS_TRANSACTION;
      --
   begin
      --
      vn_fase := 1;
      --
      gv_sql := 'delete ' || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_CANC');
      --
      vn_fase := 2;
      --
      gv_sql := gv_sql || ' where ' || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS || ' = ' || en_dm_ind_oper;
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = ' || en_dm_ind_emit;
      --
      if en_dm_ind_emit = 1 and ev_cod_part is not null then
         --
         gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_PART' || GV_ASPAS || ' = ' || '''' || ev_cod_part || '''';
         --
      end if;
      --
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' = ' || '''' || ev_cod_mod || '''';
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || ev_serie || '''';
      gv_sql := gv_sql || ' and ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS || ' = ' || en_nro_ct;
      --
      vn_fase := 3;
      --
      begin
         --
         execute immediate gv_sql;
         --
      exception
         when others then
            -- não registra erro caso a view não exista
            if sqlcode in (-942, -1031, -28500) then
               null;
            else
               --
               pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp_Canc fase(' || vn_fase || '):' || sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico_ct.id%TYPE;
               begin
                  --
                  pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => null
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => en_conhectransp_id
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP' );
                  --
               exception
                  when others then
                     null;
               end;
               --
            end if;
         --
      end;
      --
      commit;
      --
   exception
      when others then
         --
         pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp_Canc fase(' || vn_fase || '): ' || sqlerrm;
         --
         declare
            vn_loggenerico_id  log_generico_ct.id%TYPE;
         begin
            --
            pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
            --
         exception
            when others then
               null;
         end;
         --
   end pkb_excluir_canc;


begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CONHEC_TRANSP_CANC') = 0 then
      --
      return;
      --
   end if;
   --
   gv_sql := null;
   --
   vt_tab_csf_conhec_transp_canc.delete;
   --  inicia montagem da query
   gv_sql := 'select ';
   --
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'DT_CANC' || GV_ASPAS;
   gv_sql := gv_sql || ', ' || GV_ASPAS || 'JUSTIF' || GV_ASPAS;
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CONHEC_TRANSP_CANC');
   --
   vn_fase := 2;
   --
   -- Monta a condição do where
   gv_sql := gv_sql || ' where ';
   gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = 0';
   gv_sql := gv_sql || ' and ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS || ' in (' || '''' || '57' || ''''||' , '|| '''' || '67' || ''''||') ';  --Atualização CTe 3.0
   --
   vn_fase := 3;
   --
   -- recupera os Conhecimentos de Transportes não integrados
   begin
      --
      execute immediate gv_sql bulk collect into vt_tab_csf_conhec_transp_canc;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode = -942 then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp_Canc fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => null
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => null
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   vn_fase := 4;
   --
   if vt_tab_csf_conhec_transp_canc.count > 0 then
      --
      for i in vt_tab_csf_conhec_transp_canc.first..vt_tab_csf_conhec_transp_canc.last loop
         --
         vn_fase := 7;
         --
         vt_log_generico.delete;
         --
         vn_multorg_id := gn_multorg_id;
         pkb_conhec_transp_canc_ff( est_log_generico  =>  vt_log_generico
                                  , ev_cpf_cnpj_emit  =>  vt_tab_csf_conhec_transp_canc(i).cpf_cnpj_emit
                                  , en_dm_ind_emit    =>  vt_tab_csf_conhec_transp_canc(i).dm_ind_emit
                                  , en_dm_ind_oper    =>  vt_tab_csf_conhec_transp_canc(i).dm_ind_oper
                                  , ev_cod_part       =>  vt_tab_csf_conhec_transp_canc(i).cod_part
                                  , ev_cod_mod        =>  vt_tab_csf_conhec_transp_canc(i).cod_mod
                                  , ev_serie          =>  vt_tab_csf_conhec_transp_canc(i).serie
                                  , en_nro_ct         =>  vt_tab_csf_conhec_transp_canc(i).nro_ct
                                  , sn_multorg_id     =>  vn_multorg_id );
         vn_fase := 6;
         --
         if nvl(vn_multorg_id, 0) <= 0 then
            --
            vn_multorg_id := gn_multorg_id;
            --
         elsif vn_multorg_id != gn_multorg_id then
            --
            vn_multorg_id := gn_multorg_id;
            --
            pk_csf_api_ct.gv_mensagem_log := 'Mult-org informado pelo usuario('||vn_multorg_id||') não corresponde ao Mult-org da empresa('||gn_multorg_id||').';
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               vn_loggenerico_id := null;
               --
               vn_fase := 6.1;
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                   , ev_mensagem           => pk_csf_api_ct.gv_mensagem_log
                                                   , ev_resumo             => 'Mult-Org incorreto ou não informado.'
                                                   , en_tipo_log           => pk_csf_api_ct.INFORMACAO
                                                   , en_referencia_id      => pk_csf_api_ct.gn_referencia_id
                                                   , ev_obj_referencia     => 'CONHEC_TRANSP'
                                                   );
            exception
                  when others then
                     null;
            end;
            --
         end if;
         --
         vn_empresa_id := pk_csf.fkg_empresa_id_pelo_cpf_cnpj ( en_multorg_id => vn_multorg_id
                                                              , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
         --
         vn_fase := 8;
         -- Recupera o ID do Conhecimento de Transporte
         vn_conhectransp_id := pk_csf_ct.fkg_busca_conhectransp_id  ( en_empresa_id       => vn_empresa_id
                                                                    , ev_cod_part         => vt_tab_csf_conhec_transp_canc(i).COD_PART
                                                                    , ev_cod_mod          => vt_tab_csf_conhec_transp_canc(i).COD_MOD
                                                                    , ev_serie            => vt_tab_csf_conhec_transp_canc(i).SERIE
                                                                    , ev_subserie         => null
                                                                    , en_nro_ct           => vt_tab_csf_conhec_transp_canc(i).NRO_CT
                                                                    , en_dm_ind_oper      => vt_tab_csf_conhec_transp_canc(i).DM_IND_OPER
                                                                    , en_dm_ind_emit      => vt_tab_csf_conhec_transp_canc(i).DM_IND_EMIT
                                                                    , en_dm_arm_cte_terc  => 0
                                                                    );
         --
         vn_fase := 9;
         --
         pk_csf_api_ct.pkb_seta_referencia_id ( en_id => vn_conhectransp_id );
         --
         pk_csf_api_ct.gt_row_conhec_transp_canc := null;
         --
         pk_csf_api_ct.gt_row_conhec_transp_canc.conhectransp_id  := vn_conhectransp_id;
         pk_csf_api_ct.gt_row_conhec_transp_canc.dt_canc          := vt_tab_csf_conhec_transp_canc(i).dt_canc;
         pk_csf_api_ct.gt_row_conhec_transp_canc.justif           := vt_tab_csf_conhec_transp_canc(i).justif;
         pk_csf_api_ct.gt_row_conhec_transp_canc.dm_st_integra    := 7; -- Integração por view de banco
         --
         vn_fase := 10;
         -- Chama o procedimento de integração do Conhecimento de Transporte Cancelado
         pk_csf_api_ct.pkb_integr_Conhec_Transp_Canc ( est_log_generico            => vt_log_generico
                                                     , est_row_Conhec_Transp_Canc  => pk_csf_api_ct.gt_row_conhec_transp_canc );
         --
         commit;
         --
         pkb_excluir_canc ( ev_cpf_cnpj_emit          => vt_tab_csf_conhec_transp_canc(i).CPF_CNPJ_EMIT
                          , en_dm_ind_emit            => vt_tab_csf_conhec_transp_canc(i).DM_IND_EMIT
                          , en_dm_ind_oper            => vt_tab_csf_conhec_transp_canc(i).DM_IND_OPER
                          , ev_cod_part               => vt_tab_csf_conhec_transp_canc(i).COD_PART
                          , ev_cod_mod                => vt_tab_csf_conhec_transp_canc(i).COD_MOD
                          , ev_serie                  => vt_tab_csf_conhec_transp_canc(i).SERIE
                          , en_nro_ct                 => vt_tab_csf_conhec_transp_canc(i).NRO_CT
                          , en_conhectransp_id        => vn_conhectransp_id
                          );
         --
         pk_csf_api_ct.pkb_seta_referencia_id ( en_id => null );
         --
      end loop;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ler_Conhec_Transp_Canc fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => vn_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ler_Conhec_Transp_Canc;
--
-------------------------------------------------------------------------------------------------------
-- grava informação da alteração da situação da integração do Conhecimento Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_alter_sit_integra_cte_canc ( en_conhectransp_id in  conhec_transp.id%type
                                         , en_dm_st_integra   in  conhec_transp.dm_st_integra%type
                                         , en_empresa_id      in  conhec_transp.empresa_id%type )
is
   --
   vn_fase number := 0;
   PRAGMA  AUTONOMOUS_TRANSACTION;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_conhectransp_id,0) > 0 and nvl(en_dm_st_integra,0) >= 0 then
      --
      vn_fase := 2;
      --
      update conhec_transp_canc
         set dm_st_integra = nvl(en_dm_st_integra,0)
       where conhectransp_id = en_conhectransp_id;
      --
      -- Chama rotina que atualiza a tabela ct_cons_sit
      pk_csf_api_cons_sit.gt_row_ct_cons_sit                 := null;
      pk_csf_api_cons_sit.gt_row_ct_cons_sit.empresa_id      := en_empresa_id;
      pk_csf_api_cons_sit.gt_row_ct_cons_sit.conhectransp_id := en_conhectransp_id;
      pk_csf_api_cons_sit.gt_row_ct_cons_sit.dm_st_integra   := en_dm_st_integra;
      --
      pk_csf_api_cons_sit.pkb_ins_atu_ct_cons_sit ( est_row_ct_cons_sit => pk_csf_api_cons_sit.gt_row_ct_cons_sit
                                                  , ev_campo_atu        => 'dm_st_integra'
                                                  , en_tp_rotina        => 0 -- atualização
                                                  , ev_rotina_orig      => 'pk_integr_view_ct.pkb_alter_sit_integra_cte_canc'
                                                  );
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_alter_sit_integra_cte_canc fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_alter_sit_integra_cte_canc;
--
-------------------------------------------------------------------------------------------------------
-- grava informação da alteração da situação da integração do CTe
-------------------------------------------------------------------------------------------------------
procedure pkb_alter_sit_integra_cte ( en_conhectransp_id  in  conhec_transp.id%type
                                    , en_dm_st_integra    in  conhec_transp.dm_st_integra%type 
                                    , en_empresa_id       in  conhec_transp.empresa_id%type )
is
   --
   vn_fase number := 0;
   PRAGMA  AUTONOMOUS_TRANSACTION;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_conhectransp_id,0) > 0 and nvl(en_dm_st_integra,0) >= 0 then
      --
      vn_fase := 2;
      --
      update conhec_transp 
         set dm_st_integra = nvl(en_dm_st_integra,0)
       where id = en_conhectransp_id;
      --
      -- Chama rotina que atualiza a tabela ct_cons_sit
      pk_csf_api_cons_sit.gt_row_ct_cons_sit                 := null;
      pk_csf_api_cons_sit.gt_row_ct_cons_sit.empresa_id      := en_empresa_id;
      pk_csf_api_cons_sit.gt_row_ct_cons_sit.conhectransp_id := en_conhectransp_id;
      pk_csf_api_cons_sit.gt_row_ct_cons_sit.dm_st_integra   := en_dm_st_integra;
      --
      pk_csf_api_cons_sit.pkb_ins_atu_ct_cons_sit ( est_row_ct_cons_sit => pk_csf_api_cons_sit.gt_row_ct_cons_sit
                                                  , ev_campo_atu        => 'dm_st_integra'
                                                  , en_tp_rotina        => 0 -- atualização
                                                  , ev_rotina_orig      => 'pk_integr_view_ct.pkb_alter_sit_integra_cte'
                                                  );
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_alter_sit_integra_cte fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => en_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_alter_sit_integra_cte;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento exclui os logs da integração
-------------------------------------------------------------------------------------------------------
procedure pkb_excluir_erro ( en_conhectransp_id in conhec_transp.id%type )
is
   --
   vn_fase number := 0;
   PRAGMA  AUTONOMOUS_TRANSACTION;
   --
begin
   --
   vn_fase := 1;
   --
   if nvl(en_conhectransp_id,0) > 0 then
      --
      vn_fase := 2;
      --
      gv_sql := 'delete ' || fkg_monta_from ( ev_obj => 'VW_CSF_RESP_ERRO_CT_ERP');
      --
      vn_fase := 3;
      --
      gv_sql := gv_sql || ' where ' || GV_ASPAS || 'CONHECTRANSP_ID' || GV_ASPAS || ' = ' || en_conhectransp_id;
      --
      vn_fase := 4;
      --
      begin
         --
         execute immediate gv_sql;
         --
      exception
         when others then
            -- não registra erro caso a view não exista
            if sqlcode in (-942, -1010, -25800, -02063) or sqlcode = -1 then
               null;
            else
               --
               pk_csf_api_ct.gv_mensagem_log := 'Erro na Erro na pkb_excluir_erro fase(' || vn_fase || '):' || sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico_ct.id%TYPE;
               begin
                  --
                  pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => null
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
                  --
               exception
                  when others then
                     null;
               end;
               --
            end if;
         --
      end;
      --
      commit;
      --
   end if;
   --
end pkb_excluir_erro;
--
-------------------------------------------------------------------------------------------------------
-- retorna informações de Erro ocorrido no processo do Conhecimento de Transporte
-------------------------------------------------------------------------------------------------------
procedure pkb_ret_infor_erro_ct_erp ( en_conhectransp_id in conhec_transp.id%type )
is
   --
   PRAGMA            AUTONOMOUS_TRANSACTION;
   vn_fase           number := 0;
   vv_obj            varchar2(4000) := null;
   vv_cpf_cnpj       varchar2(14) := null;
   vv_cod_part       pessoa.cod_part%type := null;
   vv_cod_mod        mod_fiscal.cod_mod%type := null;
   vv_sistorig_sigla sist_orig.sigla%type := null;
   vv_unidorg_cd     unid_org.cd%type := null;
   --
   cursor c_ct is
      select ct.id             conhectransp_id
           , ct.empresa_id
           , ct.dm_ind_oper
           , ct.dm_ind_emit
           , ct.serie
           , ct.nro_ct
           , ct.dm_st_integra
           , ct.pessoa_id
           , ct.modfiscal_id
           , sistorig_id
           , unidorg_id
        from conhec_transp ct
       where ct.id = en_conhectransp_id
       order by ct.id;
   --
   cursor c_log ( en_referencia_id in log_generico_ct.referencia_id%type  ) is
      select lg.id               loggenerico_id
           , lg.mensagem
           , lg.resumo
        from log_generico_ct lg
           , csf_tipo_log  tl
       where lg.referencia_id  = en_referencia_id
         and lg.obj_referencia = 'CONHEC_TRANSP'
         and tl.id = lg.csftipolog_id
         and tl.cd in ( 'ERRO_VALIDA'
                      , 'ERRO_GERAL_SISTEMA'
                      , 'ERRO_XML_NFE'
                      , 'ERRO_ENV_LOTE_SEFAZ_NFE'
                      , 'ERRO_RET_ENV_LOTE_SEFAZ_NFE'
                      , 'ERRO_RET_PROC_LOTE_SEFAZ_NFE'
                      , 'ERRO_RET_PROC_LOTE_NFE'
                      , 'ERRO_ENVRET_CANCELA_NFE'
                      , 'ERRO_ENVRET_INUTILIZA_NFE'
                      , 'ERRO_ENV_EMAIL_DEST_NFE'
                      , 'ERRO_IMPRESSAO_DANFE' )
    order by lg.id;
   -------------------------------------------------------------------------------------------------------
   -- Função para verificar de existe log de erro no retorno
   -------------------------------------------------------------------------------------------------------
   function fkg_existe_log ( en_loggenerico_id in log_generico_ct.id%type
                           )
            return number
   is
      --
      vv_sql_canc varchar2(4000);
      vn_ret      number := 0;
      --
   begin
      --
      if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_ERRO_CT_ERP') = 0 then
         --
         vn_ret := 0;
         --
         return vn_ret;
         --
      end if;
      --
      -- Não pega notas com registro de cancelamento
      vv_sql_canc := vv_sql_canc || 'select distinct 1 ' || fkg_monta_from ( ev_obj => 'VW_CSF_RESP_ERRO_CT_ERP');
      --
      vv_sql_canc := vv_sql_canc || ' where ' || GV_ASPAS || 'LOGGENERICO_ID' || GV_ASPAS || ' = ' || en_loggenerico_id;
      --
      begin
         --
         execute immediate vv_sql_canc into vn_ret;
         --
      exception
         when no_data_found then
            return 0;
         when others then
            -- não registra erro caso a view não exista
            --if sqlcode = -942 then
               null;
            --else
               --
               pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ret_infor_erro_ct_erp.fkg_existe_log:' || sqlerrm;
               --
               declare
                  vn_loggenerico_id  log_generico_ct.id%TYPE;
               begin
                  --
                  pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => gv_resumo
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => null
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
                  --
               exception
                  when others then
                     null;
               end;
               --
            --end if;
      end;
      --
      return vn_ret;
      --
   end fkg_existe_log;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_ERRO_CT_ERP') = 0 then
      --
      return;
      --
   end if;
   --
   if nvl(en_conhectransp_id,0) > 0 then
      --
      -- Exclui os registros de log
      --
      vn_fase := 2;
      --
      pkb_excluir_erro(en_conhectransp_id);
         --
         vn_fase := 3;
      -- Insere os registros de log do CTe
      --
      for rec in c_ct loop
         exit when c_ct%notfound or (c_ct%notfound) is null;
         --
         vn_fase := 4;
         --
         vv_cpf_cnpj := pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => rec.empresa_id );
         --
         vn_fase := 4.1;
         --
         vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => rec.pessoa_id );
         --
         vn_fase := 4.2;
         --
         vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
         --
         vn_fase := 4.3;
         --
         vv_sistorig_sigla := pk_csf.fkg_sist_orig_sigla ( en_sistorig_id => rec.sistorig_id );
         --
         vn_fase := 4.4;
         --
         vv_unidorg_cd := pk_csf.fkg_unig_org_cd ( en_unidorg_id => rec.unidorg_id );
         --
         vn_fase := 5;
         --
         for rec2 in c_log(rec.conhectransp_id) loop
            exit when c_log%notfound or (c_log%notfound) is null;
            --
            vn_fase := 5.1;
            --
            if trim(rec2.resumo) is not null
               and fkg_existe_log ( en_loggenerico_id => rec2.loggenerico_id ) = 0
               then
               --
               gv_sql := 'insert into ';
               --
               if GV_NOME_DBLINK is not null then
                  --
                  vn_fase := 5.2;
                  --
                  vv_obj := GV_ASPAS || 'VW_CSF_RESP_ERRO_CT_ERP' || GV_ASPAS || '@' || GV_NOME_DBLINK;
                  --
               else
                  --
                  vn_fase := 6;
                  --
                  vv_obj := GV_ASPAS || 'VW_CSF_RESP_ERRO_CT_ERP' || GV_ASPAS;
                  --
               end if;
               --
               if trim(GV_OWNER_OBJ) is not null then
                  vv_obj := trim(GV_OWNER_OBJ) || '.' || vv_obj;
               else
                  vv_obj := vv_obj;
               end if;
               --
               vn_fase := 7;
               --
               gv_sql := gv_sql || vv_obj || ' (';
               --
               gv_sql := gv_sql || GV_ASPAS || 'CPF_CNPJ_EMIT' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_OPER' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_PART' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_MOD' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'NRO_CT' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'CONHECTRANSP_ID' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'LOGGENERICO_ID' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'RESUMO' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_LEITURA' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'SIST_ORIG' || GV_ASPAS;
               gv_sql := gv_sql || ', ' || GV_ASPAS || 'UNID_ORG' || GV_ASPAS;
               --
               gv_sql := gv_sql || ') values (';
               --
               gv_sql := gv_sql || '''' || vv_cpf_cnpj || '''';
               gv_sql := gv_sql || ', ' || rec.DM_IND_OPER;
               gv_sql := gv_sql || ', ' || rec.DM_IND_EMIT;
               --
               gv_sql := gv_sql || ', ' || case when trim(vv_cod_part) is not null then '''' || vv_cod_part || '''' else '''' || ' ' || '''' end;
               --
               gv_sql := gv_sql || ', ' || '''' || vv_cod_mod || '''';
               gv_sql := gv_sql || ', ' || '''' || rec.SERIE || '''';
               gv_sql := gv_sql || ', ' || rec.NRO_CT;
               gv_sql := gv_sql || ', ' || rec.conhectransp_id;
               gv_sql := gv_sql || ', ' || nvl(rec2.loggenerico_id,0);
               gv_sql := gv_sql || ', ' || case when trim(rec2.resumo) is not null then '''' || rec2.resumo || '''' else '''' || ' ' || '''' end;
               gv_sql := gv_sql || ', 0'; -- DM_LEITURA
               gv_sql := gv_sql || ', ' || case when trim(vv_sistorig_sigla) is not null then '''' || vv_sistorig_sigla || '''' else '''' || ' ' || '''' end;
               gv_sql := gv_sql || ', ' || case when trim(vv_unidorg_cd) is not null then '''' || vv_unidorg_cd || '''' else '''' || ' ' || '''' end;
               --
               gv_sql := gv_sql || ')';
               --
               vn_fase := 8;
               --
               begin
               --
               execute immediate gv_sql;
               --
               exception
                  when others then
                     -- não registra erro caso a view não exista
                     if sqlcode in (-942, -28500, -01010, -02063) then
                        null;
                     else
                        --
                        pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ret_infor_erro_ct_erp fase(' || vn_fase || '):' || sqlerrm;
                        --
                        declare
                           vn_loggenerico_id  log_generico_ct.id%TYPE;
                        begin
                           --
                           pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                       , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                       , ev_resumo          => null
                                                       , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                       , en_referencia_id   => en_conhectransp_id
                                                       , ev_obj_referencia  => 'CONHEC_TRANSP' );
                           --
                        exception
                           when others then
                              null;
                        end;
                     --
                  end if;
                  --
               end;
               --
            end if;
            --
         end loop;
         --
      end loop;
      --
      commit;
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ret_infor_erro_ct_erp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                     , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                     , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                     , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                     , en_referencia_id   => null
                                     , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ret_infor_erro_ct_erp;
--
-------------------------------------------------------------------------------------------------------
-- Função para situação do CTe - dm_st_proc
-------------------------------------------------------------------------------------------------------
function fkg_ret_dm_st_proc_erp ( ev_cpf_cnpj_emit          in             varchar2
                                , en_dm_ind_emit            in             number
                                , en_dm_ind_oper            in             number
                                , ev_cod_part               in             varchar2
                                , ev_cod_mod                in             varchar2
                                , ev_serie                  in             varchar2
                                , en_nro_ct                 in             number
                                , en_conhectransp_id        in             number
                                , ev_obj                    in             varchar2
                                , ev_aspas                  in             varchar2
                                )
         return number
is
   --
   vn_dm_st_proc_erp number(2) := -1;
   --
begin
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_CT_ERP') = 0 then
      --
      vn_dm_st_proc_erp := null;
      --
      return vn_dm_st_proc_erp;
      --
   end if;
   --
   -- Inicia montagem da query
   gv_sql := 'SELECT distinct ';
   gv_sql := gv_sql || ev_aspas || 'DM_ST_PROC' || ev_aspas;
   gv_sql := gv_sql || ' from ' || ev_obj;
   --
   gv_sql := gv_sql || ' where ' || ev_aspas || 'CPF_CNPJ_EMIT' || ev_aspas || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || ev_aspas || 'DM_IND_OPER' || ev_aspas || ' = ' || en_dm_ind_oper;
   gv_sql := gv_sql || ' and ' || ev_aspas || 'DM_IND_EMIT' || ev_aspas || ' = ' || en_dm_ind_emit;
   --
   if en_dm_ind_emit = 1 and ev_cod_part is not null then
      --
      gv_sql := gv_sql || ' and ' || ev_aspas || 'COD_PART' || ev_aspas || ' = ' || '''' || ev_cod_part || '''';
      --
   end if;
   --
   gv_sql := gv_sql || ' and ' || ev_aspas || 'COD_MOD' || ev_aspas || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || ev_aspas || 'SERIE' || ev_aspas || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || ev_aspas || 'NRO_CT' || ev_aspas || ' = ' || en_nro_ct;
   --
   begin
      --
      execute immediate gv_sql into vn_dm_st_proc_erp;
      --
   exception
      when no_data_found then
         vn_dm_st_proc_erp := -1;
      when others then
         vn_dm_st_proc_erp := -1;
         -- não registra erro casa a view não exista
         if sqlcode in (-942, -1010) then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na fkg_ret_dm_st_proc_erp:' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                              , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                              , ev_resumo          => null
                                              , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                              , en_referencia_id   => en_conhectransp_id
                                              , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   return vn_dm_st_proc_erp;
   --
exception
   when others then
      return -1;

end fkg_ret_dm_st_proc_erp;
-------------------------------------------------------------------------------------------------------
--| Procedimento responsável por excluir os dados de resposta do CTe no ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_excluir_cte ( ev_cpf_cnpj_emit            in             varchar2
                          , en_dm_ind_emit              in             number
                          , en_dm_ind_oper              in             number
                          , ev_cod_mod                  in             varchar2
                          , ev_serie                    in             varchar2
                          , en_nro_ct                   in             number
                          , en_conhectransp_id          in             number
                          , ev_obj                      in             varchar2
                          , ev_aspas                    in             varchar2
                          )
is
   --
   vn_fase number := 0;
   PRAGMA  AUTONOMOUS_TRANSACTION;
   --
begin
   --
   vn_fase := 1;
   --
   gv_sql := 'delete from ' || ev_obj;
   --
   vn_fase := 1.1;
   --
   gv_sql := gv_sql || ' where ' || ev_aspas || 'CPF_CNPJ_EMIT' || ev_aspas || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
   gv_sql := gv_sql || ' and ' || ev_aspas || 'DM_IND_OPER' || ev_aspas || ' = ' || en_dm_ind_oper;
   gv_sql := gv_sql || ' and ' || ev_aspas || 'DM_IND_EMIT' || ev_aspas || ' = ' || en_dm_ind_emit;
   --
   gv_sql := gv_sql || ' and ' || ev_aspas || 'COD_MOD' || ev_aspas || ' = ' || '''' || ev_cod_mod || '''';
   gv_sql := gv_sql || ' and ' || ev_aspas || 'SERIE' || ev_aspas || ' = ' || '''' || ev_serie || '''';
   gv_sql := gv_sql || ' and ' || ev_aspas || 'NRO_CT' || ev_aspas || ' = ' || en_nro_ct;
   --
   vn_fase := 2;
   --
   begin
      --
      execute immediate gv_sql;
      --
   exception
      when others then
         -- não registra erro caso a view não exista
         if sqlcode in (-942, -1010, -02063, -25800, -01010) then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na Erro na pk_integr_view_ct.pkb_excluir_cte fase(' || vn_fase || '):' || sqlerrm;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => null
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => en_conhectransp_id
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   commit;
   --
end pkb_excluir_cte;
-------------------------------------------------------------------------------------------------------
--| Procedimento integra informações no ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_int_infor_erp ( ev_cpf_cnpj_emit   in varchar2
                            , en_conhectransp_id in conhec_transp.id%type default 0 )
is
   --
   PRAGMA AUTONOMOUS_TRANSACTION;
   --
   vn_fase                  number := 0;
   vn_conhectransp_id       conhec_transp.id%type;
   vn_dm_st_proc_erp        conhec_transp.dm_st_proc%type;
   vv_obj                   varchar2(4000) := null;
   vn_erro                  number := 0;
   vn_empresa_id            empresa.id%type := null;
   vv_cod_part              pessoa.cod_part%type;
   vv_sitdocto_cd           sit_docto.cd%type;
   vv_sistorig_sigla        sist_orig.sigla%type;
   vv_unidorg_cd            unid_org.cd%type;
   vv_cod_mod               mod_fiscal.cod_mod%type;
   vd_dt_canc               conhec_transp_canc.dt_hr_recbto%type;
   vn_nro_protocolo_canc    conhec_transp_canc.nro_protocolo%type;
   vv_owner_obj             empresa_integr_banco.owner_obj%type;
   vv_nome_dblink           empresa_integr_banco.nome_dblink%type;
   vn_dm_util_aspa          empresa_integr_banco.dm_util_aspa%type;
   vn_dm_ret_infor_integr   empresa_integr_banco.dm_ret_infor_integr%type;
   vv_aspas                 char(1) := null;
   vv_formato_dt_erp        empresa_integr_banco.formato_dt_erp%type;
   vn_dm_form_dt_erp        empresa_integr_banco.dm_form_dt_erp%type;
   --
   cursor c_ct (en_empresa_id number) is
     select ct.empresa_id
          , ct.dm_ind_oper
     	  , ct.dm_ind_emit
     	  , ct.pessoa_id
     	  , ct.modfiscal_id
     	  , ct.serie
     	  , ct.nro_ct
     	  , ct.sitdocto_id
     	  , ct.dm_st_proc
     	  , ct.dt_st_proc
     	  , ct.dm_forma_emiss
     	  , ct.dm_impressa
     	  , ct.dm_st_email
     	  , ct.dm_tp_amb
     	  , ct.nro_chave_cte
     	  , ct.dig_verif_chave
          , ct.dm_aut_sefaz
     	  , ct.dt_aut_sefaz
     	  , ct.nro_protocolo
     	  , ct.id                 conhectransp_id
     	  , ct.dt_hr_emissao
     	  , ct.dm_st_integra
     	  , ct.sistorig_id
     	  , ct.unidorg_id
     	  , ct.empresaintegrbanco_id
       from conhec_transp ct
      where (nvl(en_conhectransp_id,0) = 0 or ct.id = en_conhectransp_id)
        and ct.empresa_id              = en_empresa_id
        and ct.dm_st_proc              > 0
    	and ct.dm_ind_emit             = 0
    	and ct.dm_st_integra           = 7;
   --
begin
   --
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_CT_ERP') = 0 then
      --
      return;
      --
   end if;
   --
   vn_fase := 2;
   --
   vn_empresa_id := pk_csf.fkg_empresa_id_pelo_cpf_cnpj ( en_multorg_id => gn_multorg_id
                                                        , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
   --
   vn_fase := 3;
   --
   for rec in c_ct(vn_empresa_id) loop
      exit when c_ct%notfound or (c_ct%notfound) is null;
      --
      vn_fase := 4;
      --
      if nvl(rec.empresaintegrbanco_id,0) > 0
         and nvl(rec.empresaintegrbanco_id,0) <> nvl(gn_empresaintegrbanco_id,0)
         then
         --
         vn_fase := 4.1;
         --
         begin
            --
            select ei.owner_obj
                 , ei.nome_dblink
                 , ei.dm_util_aspa
                 , ei.dm_ret_infor_integr
                 , ei.formato_dt_erp
                 , ei.dm_form_dt_erp
              into vv_owner_obj
                 , vv_nome_dblink
                 , vn_dm_util_aspa
                 , vn_dm_ret_infor_integr
                 , vv_formato_dt_erp
                 , vn_dm_form_dt_erp
              from empresa_integr_banco ei
             where ei.id = rec.empresaintegrbanco_id;
            --
         exception
            when others then
               null;
         end;
         --
         vn_fase := 4.2;
         --
         if nvl(vn_dm_form_dt_erp,0) = 0
            or trim(vv_formato_dt_erp) is null then
            --
            vv_formato_dt_erp := gv_formato_data;
            --
         end if;
         --
         if nvl(vn_dm_util_aspa,0) = 1 then
            --
            vv_aspas := '"';
            --
         end if;
         --
         vn_fase := 4.3;
         --
      else
         --
         vv_owner_obj           := GV_OWNER_OBJ;
         vv_nome_dblink         := GV_NOME_DBLINK;
         vv_aspas               := GV_ASPAS;
         vn_dm_ret_infor_integr := 1;
         vv_formato_dt_erp      := gv_formato_dt_erp;
         --
      end if;
      --
      vv_obj := pk_csf.fkg_monta_obj ( ev_obj         => 'VW_CSF_RESP_CT_ERP'
                                     , ev_aspas       => vv_aspas
                                     , ev_owner_obj   => vv_owner_obj
                                     , ev_nome_dblink => vv_nome_dblink
                                     );
      --
      vn_fase := 4.4;
      --
      if nvl(vn_dm_ret_infor_integr,0) = 1 then
         --
         vn_fase := 5;
         --
         vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => rec.pessoa_id );
         --
         vn_fase := 5.1;
         --
         vv_sitdocto_cd := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec.sitdocto_id );
         --
         vn_fase := 5.2;
         --
         vv_sistorig_sigla := pk_csf.fkg_sist_orig_sigla ( en_sistorig_id => rec.sistorig_id );
         --
         vn_fase := 5.3;
         --
         vv_unidorg_cd := pk_csf.fkg_unig_org_cd ( en_unidorg_id => rec.unidorg_id );
         --
         vn_fase := 5.4;
         --
         vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
         --
         vn_fase := 5.6;
         --
         begin
            select ctc.dt_hr_recbto
                 , ctc.nro_protocolo
              into vd_dt_canc
                 , vn_nro_protocolo_canc
              from conhec_transp_canc ctc
             where ctc.conhectransp_id = rec.conhectransp_id;
         exception
            when others then
               vd_dt_canc            := null;
               vn_nro_protocolo_canc := null;
         end;
         --
         vn_fase := 8;
         --
         --| Verifica se existe o registro
         vn_dm_st_proc_erp := fkg_ret_dm_st_proc_erp ( ev_cpf_cnpj_emit   => ev_cpf_cnpj_emit
                                                     , en_dm_ind_emit     => rec.dm_ind_emit
                                                     , en_dm_ind_oper     => rec.dm_ind_oper
                                                     , ev_cod_part        => vv_cod_part
                                                     , ev_cod_mod         => vv_cod_mod
                                                     , ev_serie           => rec.serie
                                                     , en_nro_ct          => rec.nro_ct
                                                     , en_conhectransp_id => rec.conhectransp_id
                                                     , ev_obj             => vv_obj
                                                     , ev_aspas           => vv_aspas
                                                     );
         --
         vn_fase := 9;
         -- se não encontrou informa o registro
         if nvl(vn_dm_st_proc_erp,-1) = -1 then
            --
            vn_fase := 10;
            --
            vn_conhectransp_id := rec.conhectransp_id;
            --
            vn_fase := 11;
            --
            gv_sql := 'insert into ';
            --
            vn_fase := 12;
            --
            gv_sql := gv_sql || vv_obj || '(';
            --
            gv_sql := gv_sql || vv_aspas || 'CPF_CNPJ_EMIT' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_IND_OPER' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_IND_EMIT' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'COD_PART' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'COD_MOD' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'SERIE' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_CT' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'SIT_DOCTO' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_PROC' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_ST_PROC' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_FORMA_EMISS' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_IMPRESSA' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_EMAIL' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_TP_AMB' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_CHAVE_CTE' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DIG_VERIF_CHAVE' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_AUT_SEFAZ' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_AUT_SEFAZ' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_PROTOCOLO' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_CANC' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_PROTOCOLO_CANC' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'CONHECTRANSP_ID' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_EMISS' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_LEITURA' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'SIST_ORIG' || vv_aspas;
            gv_sql := gv_sql || ', ' || vv_aspas || 'UNID_ORG' || vv_aspas;
            --
            vn_fase := 13;
            --
            gv_sql := gv_sql || ') values (';
            --
            gv_sql := gv_sql || '''' || ev_cpf_cnpj_emit || '''';
            gv_sql := gv_sql || ', ' || rec.DM_IND_OPER;
            gv_sql := gv_sql || ', ' || rec.DM_IND_EMIT;
            --
            gv_sql := gv_sql || ', ' || case when trim(vv_cod_part) is not null then '''' || vv_cod_part || '''' else '''' || ' ' || '''' end;
            --
            gv_sql := gv_sql || ', ' || '''' || vv_cod_mod || '''';
            gv_sql := gv_sql || ', ' || '''' || rec.SERIE || '''';
            gv_sql := gv_sql || ', ' || rec.NRO_CT;
            gv_sql := gv_sql || ', ' || '''' || vv_sitdocto_cd || '''';
            gv_sql := gv_sql || ', ' || case when rec.DM_ST_PROC = 0 then 1 else rec.DM_ST_PROC end;
            gv_sql := gv_sql || ', ' || 'to_date(' || '''' || to_char(nvl(rec.DT_ST_PROC, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            gv_sql := gv_sql || ', ' || rec.DM_FORMA_EMISS;
            gv_sql := gv_sql || ', ' || rec.DM_IMPRESSA;
            gv_sql := gv_sql || ', ' || rec.DM_ST_EMAIL;
            gv_sql := gv_sql || ', ' || rec.DM_TP_AMB;
            gv_sql := gv_sql || ', ' || '''' || rec.NRO_CHAVE_CTE || '''';
            --
            vn_fase := 14;
            --
            gv_sql := gv_sql || ', ' || nvl(rec.DIG_VERIF_CHAVE,0);
            --
            vn_fase := 15;
            --
            gv_sql := gv_sql || ', ' || nvl(rec.DM_AUT_SEFAZ,0);
            --
            vn_fase := 16;
            --
            if rec.DT_AUT_SEFAZ is not null then
               gv_sql := gv_sql || ', ' || 'to_date(' || '''' || to_char(nvl(rec.DT_AUT_SEFAZ, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            else
               gv_sql := gv_sql || ', null';
            end if;
            --
            vn_fase := 17;
            --
            gv_sql := gv_sql || ', ' || nvl(rec.NRO_PROTOCOLO,0);
            --
            vn_fase := 18;
            --
            if vd_dt_canc is not null then
               gv_sql := gv_sql || ', ' || 'to_date(' || '''' || to_char(nvl(vd_dt_canc, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            else
               gv_sql := gv_sql || ', null';
            end if;
            --
            vn_fase := 19;
            --
            gv_sql := gv_sql || ', ' || nvl(vn_nro_protocolo_canc,0);
            gv_sql := gv_sql || ', ' || rec.CONHECTRANSP_ID;
            --
            vn_fase := 20;
            --
            if rec.dt_hr_emissao is not null then
               gv_sql := gv_sql || ', ' || 'to_date(' || '''' || to_char(nvl(rec.dt_hr_emissao, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            else
               gv_sql := gv_sql || ', null';
            end if;
            --
            vn_fase := 21;
            --
            gv_sql := gv_sql || ', 0'; -- DM_LEITURA
            gv_sql := gv_sql || ', ' ||  case when vv_sistorig_sigla is null then '''' || ' ' || '''' else '''' || vv_sistorig_sigla || '''' end;
            gv_sql := gv_sql || ', ' ||  case when vv_unidorg_cd is null then '''' || ' ' || '''' else '''' || vv_unidorg_cd || '''' end;
            --
            vn_fase := 22;
            --
            gv_sql := gv_sql || ')';
            --
            vn_fase := 23;
            --
            vn_erro := 0;
            --
            begin
               --
               execute immediate gv_sql;
               --
            exception
               when others then
                 vn_erro := 1;
                 -- não registra erro caso a view não exista
                  if sqlcode in (-942, -1, -28500, -01010, -02063) then
                     null;
                  else
                     --
                     pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_int_infor_erp fase(' || vn_fase || '):' || sqlerrm;
                     --
                     declare
                        vn_loggenerico_id  log_generico_ct.id%TYPE;
                     begin
                        --
                        pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                       , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                       , ev_resumo          => null
                                                       , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                       , en_referencia_id   => en_conhectransp_id
                                                       , ev_obj_referencia  => 'CONHEC_TRANSP' );
                        --
                     exception
                        when others then
                           null;
                     end;
                     --
                  end if;
            end;
            --
            vn_fase := 24;
            --
            begin
               -- grava informações de erro para o erp
               pkb_ret_infor_erro_ct_erp ( en_conhectransp_id => rec.conhectransp_id );
               --
            exception
               when others then
                  vn_erro := 1;
            end;
            --
            vn_fase := 25;
            --
            if nvl(vn_erro,0) = 0 then
               --
               vn_fase := 26;
               --
               if rec.dm_st_proc not in (4, 6, 7, 8) then
                  --
                  vn_fase := 27;
                  --
                  pkb_alter_sit_integra_cte ( en_conhectransp_id  => rec.conhectransp_id
                                            , en_dm_st_integra    => 8 
                                            , en_empresa_id       => rec.empresa_id );
                  --
               else
                  --
                  vn_fase := 28;
                  --
                  pkb_alter_sit_integra_cte ( en_conhectransp_id  => rec.conhectransp_id
                                            , en_dm_st_integra    => 9 
                                            , en_empresa_id       => rec.empresa_id );
                  --
               end if;
               --
            end if;
            --
         else
            --
            vn_fase := 29;
            --
            pkb_alter_sit_integra_cte ( en_conhectransp_id  => rec.conhectransp_id
                                      , en_dm_st_integra    => 8 
                                      , en_empresa_id       => rec.empresa_id );                                      
            --
         end if;
         --
         vn_fase := 30;
         --
         commit;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_int_infor_erp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.erro_de_sistema
                                        , en_referencia_id   => vn_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_int_infor_erp;
-------------------------------------------------------------------------------------------------------
--| Procedimento retorna a informação para o ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_ret_infor_erp ( ev_cpf_cnpj_emit in varchar2 )
is
   --
   vn_fase                  number := 0;
   vn_conhectransp_id       conhec_transp.id%type;
   vn_dm_st_integra         conhec_transp.dm_st_integra%type;
   vn_dm_st_proc_erp        number(2) := null;
   vv_obj                   varchar2(4000) := null;
   vv_sql_where             varchar2(4000) := null;
   vn_qtde                  number := 0;
   vn_erro                  number := 0;
   vn_empresa_id            empresa.id%type := null;
   vv_cod_part              pessoa.cod_part%type;
   vv_sitdocto_cd           sit_docto.cd%type;
   vv_sistorig_sigla        sist_orig.sigla%type;
   vv_unidorg_cd            unid_org.cd%type;
   vv_cod_mod               mod_fiscal.cod_mod%type;
   vv_owner_obj             empresa_integr_banco.owner_obj%type;
   vv_nome_dblink           empresa_integr_banco.nome_dblink%type;
   vn_dm_util_aspa          empresa_integr_banco.dm_util_aspa%type;
   vn_dm_ret_infor_integr   empresa_integr_banco.dm_ret_infor_integr%type;
   vv_aspas                 char(1) := null;
   vv_formato_dt_erp        empresa_integr_banco.formato_dt_erp%type;
   vn_dm_form_dt_erp        empresa_integr_banco.dm_form_dt_erp%type;
   --
   -- Recupera os conhecimentos de transporte que foram inseridos na tabela de resposta do ERP
   cursor c_ct (en_empresa_id number) is
   select ct.empresa_id
        , ct.dm_ind_oper
     	, ct.dm_ind_emit
     	, ct.serie
     	, ct.nro_ct
     	, ct.dm_st_proc
     	, ct.dt_st_proc
     	, ct.dm_forma_emiss
     	, ct.dm_impressa
     	, ct.dm_st_email
     	, ct.dm_tp_amb
     	, ct.nro_chave_cte
     	, ct.dig_verif_chave
     	, ct.dm_aut_sefaz
     	, ct.dt_aut_sefaz
     	, ct.nro_protocolo
     	, ct.id                 conhectransp_id
     	, ct.dt_hr_emissao
     	, ct.dm_st_integra
     	, ct.pessoa_id
     	, ct.sitdocto_id
     	, ct.sistorig_id
     	, ct.unidorg_id
     	, ct.modfiscal_id
     	, ct.empresaintegrbanco_id
     from Conhec_transp ct
    where ct.empresa_id    = en_empresa_id
      and ct.dm_st_proc    > 0
      and ct.dm_ind_emit   = 0 -- emissao pr¢pria
      and ct.dm_st_integra = 8;
   --
begin
   -- Atualiza informações
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_CT_ERP') = 0 then
      --
      return;
      --
   end if;
   --
   vn_fase := 2;
   --
   vn_empresa_id := pk_csf.fkg_empresa_id_cpf_cnpj ( en_multorg_id => gn_multorg_id
                                                   , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
   --
   vn_fase := 3;
   --
   for rec in c_ct(vn_empresa_id) loop
      exit when c_ct%notfound or (c_ct%notfound) is null;
      --
      vn_fase := 4;
      --
      if nvl(rec.empresaintegrbanco_id,0) > 0
         and nvl(rec.empresaintegrbanco_id,0) <> nvl(gn_empresaintegrbanco_id,0)
         then
         --
         vn_fase := 4.1;
         --
         begin
            --
            select ei.owner_obj
                 , ei.nome_dblink
                 , ei.dm_util_aspa
                 , ei.dm_ret_infor_integr
                 , ei.formato_dt_erp
                 , ei.dm_form_dt_erp
              into vv_owner_obj
                 , vv_nome_dblink
                 , vn_dm_util_aspa
                 , vn_dm_ret_infor_integr
                 , vv_formato_dt_erp
                 , vn_dm_form_dt_erp
              from empresa_integr_banco ei
             where ei.id = rec.empresaintegrbanco_id;
            --
         exception
            when others then
               null;
         end;
         --
         vn_fase := 4.2;
         --
         if nvl(vn_dm_form_dt_erp,0) = 0
            or trim(vv_formato_dt_erp) is null then
            --
            vv_formato_dt_erp := gv_formato_data;
            --
         end if;
         --
         if nvl(vn_dm_util_aspa,0) = 1 then
            --
            vv_aspas := '"';
            --
         end if;
         --
         vn_fase := 4.3;
         --
      else
         --
         vv_owner_obj           := GV_OWNER_OBJ;
         vv_nome_dblink         := GV_NOME_DBLINK;
         vv_aspas               := GV_ASPAS;
         vn_dm_ret_infor_integr := 1;
         vv_formato_dt_erp      := gv_formato_dt_erp;
         --
      end if;
      --
      vv_obj := pk_csf.fkg_monta_obj ( ev_obj         => 'VW_CSF_RESP_CT_ERP'
                                     , ev_aspas       => vv_aspas
                                     , ev_owner_obj   => vv_owner_obj
                                     , ev_nome_dblink => vv_nome_dblink
                                     );
      --
      vn_fase := 4.4;
      --
      if nvl(vn_dm_ret_infor_integr,0) = 1 then
         --
         vn_fase := 5;
         --
         vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => rec.pessoa_id );
         --
         vn_fase := 5.1;
         --
         vv_sitdocto_cd := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec.sitdocto_id );
         --
         vn_fase := 5.2;
         --
         vv_sistorig_sigla := pk_csf.fkg_sist_orig_sigla ( en_sistorig_id => rec.sistorig_id );
         --
         vn_fase := 5.3;
         --
         vv_unidorg_cd := pk_csf.fkg_unig_org_cd ( en_unidorg_id => rec.unidorg_id );
         --
         vn_fase := 5.4;
         --
         vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
         --
         vn_fase := 5.5;
         --
         vn_dm_st_proc_erp := fkg_ret_dm_st_proc_erp ( ev_cpf_cnpj_emit   => ev_cpf_cnpj_emit
                                                     , en_dm_ind_emit     => rec.dm_ind_emit
                                                     , en_dm_ind_oper     => rec.dm_ind_oper
                                                     , ev_cod_part        => vv_cod_part
                                                     , ev_cod_mod         => vv_cod_mod
                                                     , ev_serie           => rec.serie
                                                     , en_nro_ct          => rec.nro_ct
                                                     , en_conhectransp_id => rec.conhectransp_id
                                                     , ev_obj             => vv_obj
                                                     , ev_aspas           => vv_aspas
                                                     );
         --
         vn_fase := 6;
         -- Verifica se a situação da CTe no ERP é diferente de zero e diferetente da Situação da CTe no Compliance
         if nvl(vn_dm_st_proc_erp,0) <> 0 and nvl(vn_dm_st_proc_erp,0) <> nvl(rec.dm_st_proc,0) then
            --
            vn_fase := 7;
            -- Inicia montagem do update de atualização da resposta do ERP
            gv_sql := 'update ';
            vv_sql_where := null;
            --
            vn_fase := 8;
            --
            gv_sql := gv_sql || vv_obj || ' set ' || vv_aspas || 'SIT_DOCTO' || vv_aspas || ' = ' || '''' || vv_sitdocto_cd || '''';
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_PROC' || vv_aspas || ' = ' || rec.dm_st_proc;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_ST_PROC' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(rec.dt_st_proc, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_FORMA_EMISS' || vv_aspas || ' = ' || rec.dm_forma_emiss;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_IMPRESSA' || vv_aspas || ' = ' || rec.dm_impressa;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_EMAIL' || vv_aspas || ' = ' || rec.dm_st_email;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_TP_AMB' || vv_aspas || ' = ' || rec.dm_tp_amb;
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_CHAVE_CTE' || vv_aspas || ' = ' || '''' || rec.nro_chave_cte || '''';
            --
            if nvl(rec.dig_verif_chave,0) > 0 then
               gv_sql := gv_sql || ', ' || vv_aspas || 'DIG_VERIF_CHAVE' || vv_aspas || ' = ' || nvl(rec.dig_verif_chave,0);
            end if;
            --
            if nvl(rec.dm_aut_sefaz,0) > 0 then
               gv_sql := gv_sql || ', ' || vv_aspas || 'DM_AUT_SEFAZ' || vv_aspas || ' = ' || nvl(rec.dm_aut_sefaz,0);
            end if;
            --
            if rec.dt_aut_sefaz is not null then
               gv_sql := gv_sql || ', ' || vv_aspas || 'DT_AUT_SEFAZ' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(rec.dt_aut_sefaz, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            end if;
            --
            if nvl(rec.nro_protocolo,0) > 0 then
               gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_PROTOCOLO' || vv_aspas || ' = ' || nvl(rec.nro_protocolo,0);
            end if;
            --
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_LEITURA' || vv_aspas || ' = 0';
            --
            if trim(vv_sistorig_sigla) is not null then
               gv_sql := gv_sql || ', ' || vv_aspas || 'SIST_ORIG' || vv_aspas || ' = ' || '''' || vv_sistorig_sigla || '''';
            end if;
            --
            if trim(vv_unidorg_cd) is not null then
               gv_sql := gv_sql || ', ' || vv_aspas || 'UNID_ORG' || vv_aspas || ' = ' || '''' || vv_unidorg_cd || '''';
            end if;
            --
            vn_fase := 9;
            -- monta o where em uma variavel a parte
            vv_sql_where := vv_sql_where || ' where ' || vv_aspas || 'CPF_CNPJ_EMIT' || vv_aspas || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'DM_IND_OPER' || vv_aspas || ' = ' || rec.dm_ind_oper;
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'DM_IND_EMIT' || vv_aspas || ' = ' || rec.dm_ind_emit;
            --
            if rec.dm_ind_emit = 1 and vv_cod_part is not null then
               --
               vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'COD_PART' || vv_aspas || ' = ' || '''' || vv_cod_part || '''';
               --
            end if;
            --
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'COD_MOD' || vv_aspas || ' = ' || '''' || vv_cod_mod || '''';
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'SERIE' || vv_aspas || ' = ' || '''' || rec.serie || '''';
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'NRO_CT' || vv_aspas || ' = ' || rec.nro_ct;
            --
            vn_fase := 10;
            --
            gv_sql := gv_sql || vv_sql_where;
            --
            vn_fase := 11;
            --
            begin
               --
               execute immediate ('select count(1) from ' || vv_obj || ' ' || vv_sql_where) into vn_qtde;
               --
            exception
               when others then
                  vn_qtde := 0;
            end;
            --
            vn_fase := 12;
            --
            if nvl(vn_qtde,0) > 0 then
               --
               vn_fase := 13;
               --
               vn_erro := 0;
               --
               begin
                  --
                  execute immediate gv_sql;
                  --
               exception
                  when others then
                     --
                     vn_erro := 1;
                     --
                     pk_csf_api_ct.gv_mensagem_log := 'Erro na pkb_ret_infor_erp fase(' || vn_fase || ' ' || gv_sql || '):' || sqlerrm;
                     --
                     declare
                        vn_loggenerico_id  log_generico_ct.id%TYPE;
                     begin
                        --
                        pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                       , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                       , ev_resumo          => null
                                                       , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                       , en_referencia_id   => rec.conhectransp_id
                                                       , ev_obj_referencia  => 'CONHEC_TRANSP' );
                        --
                     exception
                        when others then
                           null;
                     end;
                     --
               end;
               --
               vn_fase := 14;
               --
               if vn_erro = 0 then
                  --
                  vn_fase := 15;
                  --
                  vn_dm_st_integra := case when rec.dm_st_proc in (4, 7, 8) then 9 else 8 end;
                  --
                  pkb_alter_sit_integra_cte ( en_conhectransp_id  => rec.conhectransp_id
                                            , en_dm_st_integra    => vn_dm_st_integra 
                                            , en_empresa_id       => rec.empresa_id );
                  --
                  vn_fase := 16;
                  --
                  commit;
                  --
                  vn_fase := 17;
                  -- grava informações de log para o erp
                  pkb_ret_infor_erro_ct_erp ( en_conhectransp_id => rec.conhectransp_id );
                  --
               end if;
               --
            end if;
            --
         else
            -- encerra processo
            vn_fase := 18;
            --
            vn_dm_st_integra := case when rec.dm_st_proc in (4, 7, 8) then 9 else 8 end;
            --
            pkb_alter_sit_integra_cte ( en_conhectransp_id  => rec.conhectransp_id
                                      , en_dm_st_integra    => vn_dm_st_integra 
                                      , en_empresa_id       => rec.empresa_id );
            --
            vn_fase := 19;
            --
            commit;
            --
         end if;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ret_infor_erp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.erro_de_sistema
                                        , en_referencia_id   => vn_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ret_infor_erp;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento retorna a informação de Resposta para o ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_ret_infor_resp_erp ( ev_cpf_cnpj_emit in varchar2 )
is
   --
   vn_fase                  number := 0;
   vn_conhectransp_id       conhec_transp.id%type;
   vn_dm_st_integra         conhec_transp.dm_st_integra%type;
   vn_dm_st_proc_erp        number(2) := null;
   vv_obj                   varchar2(4000) := null;
   vv_sql_where             varchar2(4000) := null;
   vn_qtde                  number := 0;
   vn_erro                  number := 0;
   vn_empresa_id            empresa.id%type := null;
   vv_cod_part              pessoa.cod_part%type;
   vv_sitdocto_cd           sit_docto.cd%type;
   vv_sistorig_sigla        sist_orig.sigla%type;
   vv_unidorg_cd            unid_org.cd%type;
   vv_cod_mod               mod_fiscal.cod_mod%type;
   vv_owner_obj             empresa_integr_banco.owner_obj%type;
   vv_nome_dblink           empresa_integr_banco.nome_dblink%type;
   vn_dm_util_aspa          empresa_integr_banco.dm_util_aspa%type;
   vn_dm_ret_infor_integr   empresa_integr_banco.dm_ret_infor_integr%type;
   vv_aspas                 char(1) := null;
   vv_formato_dt_erp        empresa_integr_banco.formato_dt_erp%type;
   vn_dm_form_dt_erp        empresa_integr_banco.dm_form_dt_erp%type;
   --
   -- Recupera os conhecimentos que foram inseridos na tabela de resposta do ERP
   cursor c_ct (en_empresa_id number) is
   select ct.empresa_id
        , ct.dm_ind_oper
     	, ct.dm_ind_emit
     	, ct.serie
     	, ct.nro_ct
     	, ct.dm_st_proc
     	, ct.dt_st_proc
     	, ct.dm_forma_emiss
     	, ct.dm_impressa
     	, ct.dm_st_email
     	, ct.dm_tp_amb
     	, ct.nro_chave_cte
     	, ct.dig_verif_chave
     	, ct.dm_aut_sefaz
     	, ct.dt_aut_sefaz
     	, ct.nro_protocolo
     	, ct.id                 conhectransp_id
     	, ct.dt_hr_emissao
     	, ct.dm_st_integra
     	, ct.pessoa_id
     	, ct.sitdocto_id
     	, ct.sistorig_id
     	, ct.unidorg_id
     	, ct.modfiscal_id
     	, ct.empresaintegrbanco_id
     from conhec_transp ct
    where ct.empresa_id    = en_empresa_id
      and ct.dm_st_proc    > 0
      and ct.dt_st_proc    >= trunc(sysdate - 1)
      and ct.dm_ind_emit   = 0 -- emissao pr¢pria
      and ct.dm_st_integra = 9;
   --
begin
   -- Atualiza informações
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_CT_ERP') = 0 then
      --
      return;
      --
   end if;
   --
   vn_fase := 2;
   --
   vn_empresa_id := pk_csf.fkg_empresa_id_cpf_cnpj ( en_multorg_id => gn_multorg_id
                                                   , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
   --
   vn_fase := 3;
   --
   for rec in c_ct(vn_empresa_id) loop
      exit when c_ct%notfound or (c_ct%notfound) is null;
      --
      vn_fase := 4;
      --
      if nvl(rec.empresaintegrbanco_id,0) > 0
         and nvl(rec.empresaintegrbanco_id,0) <> nvl(gn_empresaintegrbanco_id,0)
         then
         --
         vn_fase := 4.1;
         --
         begin
            --
            select ei.owner_obj
                 , ei.nome_dblink
                 , ei.dm_util_aspa
                 , ei.dm_ret_infor_integr
                 , ei.formato_dt_erp
                 , ei.dm_form_dt_erp
              into vv_owner_obj
                 , vv_nome_dblink
                 , vn_dm_util_aspa
                 , vn_dm_ret_infor_integr
                 , vv_formato_dt_erp
                 , vn_dm_form_dt_erp
              from empresa_integr_banco ei
             where ei.id = rec.empresaintegrbanco_id;
            --
         exception
            when others then
               null;
         end;
         --
         vn_fase := 4.2;
         --
         if nvl(vn_dm_form_dt_erp,0) = 0
            or trim(vv_formato_dt_erp) is null then
            --
            vv_formato_dt_erp := gv_formato_data;
            --
         end if;
         --
         if nvl(vn_dm_util_aspa,0) = 1 then
            --
            vv_aspas := '"';
            --
         end if;
         --
         vn_fase := 4.3;
         --
      else
         --
         vv_owner_obj           := GV_OWNER_OBJ;
         vv_nome_dblink         := GV_NOME_DBLINK;
         vv_aspas               := GV_ASPAS;
         vn_dm_ret_infor_integr := 1;
         vv_formato_dt_erp      := gv_formato_dt_erp;
         --
      end if;
      --
      vv_obj := pk_csf.fkg_monta_obj ( ev_obj         => 'VW_CSF_RESP_CT_ERP'
                                     , ev_aspas       => vv_aspas
                                     , ev_owner_obj   => vv_owner_obj
                                     , ev_nome_dblink => vv_nome_dblink
                                     );
      --
      vn_fase := 4.4;
      --
      if nvl(vn_dm_ret_infor_integr,0) = 1 then
         --
         vn_fase := 4.5;
         --
         vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => rec.pessoa_id );
         --
         vn_fase := 4.6;
         --
         vv_sitdocto_cd := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec.sitdocto_id );
         --
         vn_fase := 4.7;
         --
         vv_sistorig_sigla := pk_csf.fkg_sist_orig_sigla ( en_sistorig_id => rec.sistorig_id );
         --
         vn_fase := 4.8;
         --
         vv_unidorg_cd := pk_csf.fkg_unig_org_cd ( en_unidorg_id => rec.unidorg_id );
         --
         vn_fase := 4.9;
         --
         vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
         --
         vn_fase := 5;
         --
         vn_dm_st_proc_erp := fkg_ret_dm_st_proc_erp ( ev_cpf_cnpj_emit   => ev_cpf_cnpj_emit
                                                     , en_dm_ind_emit     => rec.dm_ind_emit
                                                     , en_dm_ind_oper     => rec.dm_ind_oper
                                                     , ev_cod_part        => vv_cod_part
                                                     , ev_cod_mod         => vv_cod_mod
                                                     , ev_serie           => rec.serie
                                                     , en_nro_ct          => rec.nro_ct
                                                     , en_conhectransp_id => rec.conhectransp_id
                                                     , ev_obj             => vv_obj
                                                     , ev_aspas           => vv_aspas
                                                     );
         --
         vn_fase := 6;
         -- Verifica se a situação da CTe no ERP é diferente de zero e diferetente da Situação da CTe no Compliance
         if nvl(vn_dm_st_proc_erp,0) <> 0 and nvl(vn_dm_st_proc_erp,0) <> nvl(rec.dm_st_proc,0) then
            --
            vn_fase := 7;
            -- Inicia montagem do update de atualização da resposta do ERP
            gv_sql := 'update ';
            vv_sql_where := null;
            --
            vn_fase := 8;
            --
            gv_sql := gv_sql || vv_obj || ' set ' || vv_aspas || 'SIT_DOCTO' || vv_aspas || ' = ' || '''' || vv_sitdocto_cd || '''';
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_PROC' || vv_aspas || ' = ' || rec.dm_st_proc;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_ST_PROC' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(rec.dt_st_proc, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_FORMA_EMISS' || vv_aspas || ' = ' || rec.dm_forma_emiss;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_IMPRESSA' || vv_aspas || ' = ' || rec.dm_impressa;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_EMAIL' || vv_aspas || ' = ' || rec.dm_st_email;
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_TP_AMB' || vv_aspas || ' = ' || rec.dm_tp_amb;
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_CHAVE_CTE' || vv_aspas || ' = ' || '''' || rec.nro_chave_cte || '''';
            --
            vn_fase := 9;
            --
            if nvl(rec.dig_verif_chave,0) > 0 then
               gv_sql := gv_sql || ', ' || vv_aspas || 'DIG_VERIF_CHAVE' || vv_aspas || ' = ' || nvl(rec.dig_verif_chave,0);
            end if;
            --
            if nvl(rec.dm_aut_sefaz,0) > 0 then
               gv_sql := gv_sql || ', ' || vv_aspas || 'DM_AUT_SEFAZ' || vv_aspas || ' = ' || nvl(rec.dm_aut_sefaz,0);
            end if;
            --
            if rec.dt_aut_sefaz is not null then
               gv_sql := gv_sql || ', ' || vv_aspas || 'DT_AUT_SEFAZ' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(rec.dt_aut_sefaz, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
            end if;
            --
            if nvl(rec.nro_protocolo,0) > 0 then
               gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_PROTOCOLO' || vv_aspas || ' = ' || nvl(rec.nro_protocolo,0);
            end if;
            --
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_LEITURA' || vv_aspas || ' = 0';
            --
            if trim(vv_sistorig_sigla) is not null then
               gv_sql := gv_sql || ', ' || vv_aspas || 'SIST_ORIG' || vv_aspas || ' = ' || '''' || vv_sistorig_sigla || '''';
            end if;
            --
            if trim(vv_unidorg_cd) is not null then
               gv_sql := gv_sql || ', ' || vv_aspas || 'UNID_ORG' || vv_aspas || ' = ' || '''' || vv_unidorg_cd || '''';
            end if;
            --
            vn_fase := 10;
            -- monta o where em uma variavel a parte
            vv_sql_where := vv_sql_where || ' where ' || vv_aspas || 'CPF_CNPJ_EMIT' || vv_aspas || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'DM_IND_OPER' || vv_aspas || ' = ' || rec.dm_ind_oper;
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'DM_IND_EMIT' || vv_aspas || ' = ' || rec.dm_ind_emit;
            --
            if rec.dm_ind_emit = 1 and vv_cod_part is not null then
               --
               vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'COD_PART' || vv_aspas || ' = ' || '''' || vv_cod_part || '''';
               --
            end if;
            --
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'COD_MOD' || vv_aspas || ' = ' || '''' || vv_cod_mod || '''';
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'SERIE' || vv_aspas || ' = ' || '''' || rec.serie || '''';
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'NRO_CT' || vv_aspas || ' = ' || rec.nro_ct;
            --
            gv_sql := gv_sql || vv_sql_where;
            --
            vn_fase := 11;
            --
            begin
               --
               execute immediate ('select count(1) from ' || vv_obj || ' ' || vv_sql_where) into vn_qtde;
               --
            exception
               when others then
                  vn_qtde := 0;
            end;
            --
            vn_fase := 12;
            --
            if nvl(vn_qtde,0) > 0 then
               --
               vn_fase := 13;
               --
               vn_erro := 0;
               --
               begin
                  --
                  execute immediate gv_sql;
                  --
               exception
                  when others then
                     --
                     vn_erro := 1;
                     --
                     pk_csf_api_ct.gv_mensagem_log := 'Erro na pkb_ret_infor_resp_erp fase(' || vn_fase || ' ' || gv_sql || '):' || sqlerrm;
                     --
                     declare
                        vn_loggenerico_id  log_generico_ct.id%TYPE;
                     begin
                        --
                        pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id => vn_loggenerico_id
                                                       , ev_mensagem       => pk_csf_api_ct.gv_mensagem_log
                                                       , ev_resumo         => null
                                                       , en_tipo_log       => pk_csf_api_ct.erro_de_sistema
                                                       , en_referencia_id  => rec.conhectransp_id
                                                       , ev_obj_referencia => 'CONHEC_TRANSP' );
                        --
                     exception
                        when others then
                           null;
                     end;
                     --
               end;
               --
               vn_fase := 14;
               --
               if vn_erro = 0 then
                  --
                  vn_fase := 15;
                  --
                  vn_dm_st_integra := case when rec.dm_st_proc in (4, 7, 8) then 9 else 8 end;
                  --
                  pkb_alter_sit_integra_cte ( en_conhectransp_id => rec.conhectransp_id
                                            , en_dm_st_integra   => vn_dm_st_integra 
                                            , en_empresa_id      => rec.empresa_id );
                  --
                  vn_fase := 16;
                  --
                  commit;
                  --
                  vn_fase := 17;
                  -- grava informações de log para o erp
                  pkb_ret_infor_erro_ct_erp ( en_conhectransp_id => rec.conhectransp_id );
                  --
               end if;
               --
            end if;
            --
         else
            -- encerra processo
            vn_fase := 18;
            --
            vn_dm_st_integra := case when rec.dm_st_proc in (4, 7, 8) then 9 else 8 end;
            --
            pkb_alter_sit_integra_cte ( en_conhectransp_id => rec.conhectransp_id
                                      , en_dm_st_integra   => vn_dm_st_integra 
                                      , en_empresa_id      => rec.empresa_id );
            --
            vn_fase := 19;
            --
            commit;
            --
         end if;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ret_infor_resp_erp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id => vn_loggenerico_id
                                        , ev_mensagem       => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo         => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log       => pk_csf_api_ct.erro_de_sistema
                                        , en_referencia_id  => vn_conhectransp_id
                                        , ev_obj_referencia => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ret_infor_resp_erp;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento retorna informação de cancelamento para o ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_ret_infor_canc_erp ( ev_cpf_cnpj_emit in varchar2 )
is
   --
   vn_fase                  number := 0;
   vn_conhectransp_id       conhec_transp.id%type;
   vn_dm_st_integra         conhec_transp.dm_st_integra%type;
   vn_dm_st_proc_erp        number(2) := null;
   vv_obj                   varchar2(4000) := null;
   vv_sql_where             varchar2(4000) := null;
   vn_qtde                  number := 0;
   vn_erro                  number := 0;
   vn_empresa_id            empresa.id%type := null;
   vv_cod_part              pessoa.cod_part%type;
   vv_sitdocto_cd           sit_docto.cd%type;
   vv_sistorig_sigla        sist_orig.sigla%type;
   vv_unidorg_cd            unid_org.cd%type;
   vv_cod_mod               mod_fiscal.cod_mod%type;
   vd_dt_canc               conhec_transp_canc.dt_hr_recbto%type;
   vn_nro_protocolo_canc    conhec_transp_canc.nro_protocolo%type;
   vv_owner_obj             empresa_integr_banco.owner_obj%type;
   vv_nome_dblink           empresa_integr_banco.nome_dblink%type;
   vn_dm_util_aspa          empresa_integr_banco.dm_util_aspa%type;
   vn_dm_ret_infor_integr   empresa_integr_banco.dm_ret_infor_integr%type;
   vv_aspas                 char(1) := null;
   vv_formato_dt_erp        empresa_integr_banco.formato_dt_erp%type;
   vn_dm_form_dt_erp        empresa_integr_banco.dm_form_dt_erp%type;
   --
   cursor c_ct (en_empresa_id number) is
     select ct.empresa_id
          , ct.dm_ind_oper
     	  , ct.dm_ind_emit
     	  , ct.serie
     	  , ct.nro_ct
     	  , ct.dm_st_proc
     	  , ct.dt_st_proc
     	  , ct.dm_forma_emiss
     	  , ct.dm_impressa
     	  , ct.dm_st_email
     	  , ct.dm_tp_amb
     	  , ct.nro_chave_cte
     	  , ct.dig_verif_chave
 	  , ct.dm_aut_sefaz
     	  , ct.dt_aut_sefaz
     	  , ct.nro_protocolo
     	  , ct.id                 conhectransp_id
     	  , ct.dt_hr_emissao
     	  , ct.pessoa_id
     	  , ct.sitdocto_id
     	  , ct.sistorig_id
     	  , ct.unidorg_id
     	  , ct.modfiscal_id
          , ct.empresaintegrbanco_id
     	  , ctc.dt_hr_recbto dt_canc
          , ctc.nro_protocolo nro_protocolo_canc
       from conhec_transp      ct
          , conhec_transp_canc ctc
 	where ct.empresa_id       = en_empresa_id
          and ct.dm_ind_emit      = 0 -- emissao pr¢pria
   	  and ct.dm_st_proc      <> 0
   	  and ctc.conhectransp_id = ct.id
          and ctc.dm_st_integra  in (5, 7, 8);
   --
begin
   -- Atualiza informações
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_RESP_CT_ERP') = 0 then
      --
      return;
      --
   end if;
   --
   vn_fase := 2;
   --
   vn_empresa_id := pk_csf.fkg_empresa_id_cpf_cnpj ( en_multorg_id => gn_multorg_id
                                                   , ev_cpf_cnpj   => ev_cpf_cnpj_emit );
   --
   vn_fase := 3;
   --
   for rec in c_ct(vn_empresa_id) loop
      exit when c_ct%notfound or (c_ct%notfound) is null;
      --
      vn_fase := 4;
      --
      if nvl(rec.empresaintegrbanco_id,0) > 0
         and nvl(rec.empresaintegrbanco_id,0) <> nvl(gn_empresaintegrbanco_id,0)
         then
         --
         vn_fase := 4.1;
         --
         begin
            --
            select ei.owner_obj
                 , ei.nome_dblink
                 , ei.dm_util_aspa
                 , ei.dm_ret_infor_integr
                 , ei.formato_dt_erp
                 , ei.dm_form_dt_erp
              into vv_owner_obj
                 , vv_nome_dblink
                 , vn_dm_util_aspa
                 , vn_dm_ret_infor_integr
                 , vv_formato_dt_erp
                 , vn_dm_form_dt_erp
              from empresa_integr_banco ei
             where ei.id = rec.empresaintegrbanco_id;
            --
         exception
            when others then
               null;
         end;
         --
         vn_fase := 4.2;
         --
         if nvl(vn_dm_form_dt_erp,0) = 0
            or trim(vv_formato_dt_erp) is null then
            --
            vv_formato_dt_erp := gv_formato_data;
            --
         end if;
         --
         if nvl(vn_dm_util_aspa,0) = 1 then
            --
            vv_aspas := '"';
            --
         end if;
         --
         vn_fase := 4.3;
         --
      else
         --
         vv_owner_obj           := GV_OWNER_OBJ;
         vv_nome_dblink         := GV_NOME_DBLINK;
         vv_aspas               := GV_ASPAS;
         vn_dm_ret_infor_integr := 1;
         vv_formato_dt_erp      := gv_formato_dt_erp;
         --
      end if;
      --
      vv_obj := pk_csf.fkg_monta_obj ( ev_obj         => 'VW_CSF_RESP_CT_ERP'
                                     , ev_aspas       => vv_aspas
                                     , ev_owner_obj   => vv_owner_obj
                                     , ev_nome_dblink => vv_nome_dblink
                                     );
      --
      vn_fase := 4.4;
      --
      vv_cod_part := pk_csf.fkg_pessoa_cod_part ( en_pessoa_id => rec.pessoa_id );
      --
      vn_fase := 4.5;
      --
      vv_sitdocto_cd := pk_csf.fkg_Sit_Docto_cd ( en_sitdoc_id => rec.sitdocto_id );
      --
      vn_fase := 4.6;
      --
      vv_sistorig_sigla := pk_csf.fkg_sist_orig_sigla ( en_sistorig_id => rec.sistorig_id );
      --
      vn_fase := 4.7;
      --
      vv_unidorg_cd := pk_csf.fkg_unig_org_cd ( en_unidorg_id => rec.unidorg_id );
      --
      vn_fase := 4.8;
      --
      vv_cod_mod := pk_csf.fkg_cod_mod_id ( en_modfiscal_id => rec.modfiscal_id );
      --
      vn_fase := 4.9;
      --
      vd_dt_canc            := rec.dt_canc;
      vn_nro_protocolo_canc := rec.nro_protocolo_canc;
      --
      vn_fase := 5;
      --
      vn_dm_st_proc_erp := fkg_ret_dm_st_proc_erp ( ev_cpf_cnpj_emit   => ev_cpf_cnpj_emit
                                                  , en_dm_ind_emit     => rec.dm_ind_emit
                                                  , en_dm_ind_oper     => rec.dm_ind_oper
                                                  , ev_cod_part        => vv_cod_part
                                                  , ev_cod_mod         => vv_cod_mod
                                                  , ev_serie           => rec.serie
                                                  , en_nro_ct          => rec.nro_ct
                                                  , en_conhectransp_id => rec.conhectransp_id
                                                  , ev_obj             => vv_obj
                                                  , ev_aspas           => vv_aspas
                                                  );
      --
      vn_fase := 6;
      -- Verifica se a situação da CTe no ERP é diferente de zero e diferente da Situação da CTe no Compliance
      if nvl(vn_dm_st_proc_erp,0) <> 0 and nvl(vn_dm_st_proc_erp,0) <> nvl(rec.dm_st_proc,0) then
         --
         vn_fase := 7;
         -- Inicia montagem do update de atualização da resposta do ERP
         gv_sql := 'update ';
         --
         vn_fase := 8;
         --
         gv_sql := gv_sql || vv_obj || ' set ' || vv_aspas || 'SIT_DOCTO' || vv_aspas || ' = ' || '''' || vv_sitdocto_cd || '''';
         gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_PROC' || vv_aspas || ' = ' || rec.dm_st_proc;
         gv_sql := gv_sql || ', ' || vv_aspas || 'DT_ST_PROC' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(rec.dt_st_proc, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
         gv_sql := gv_sql || ', ' || vv_aspas || 'DM_FORMA_EMISS' || vv_aspas || ' = ' || rec.dm_forma_emiss;
         gv_sql := gv_sql || ', ' || vv_aspas || 'DM_IMPRESSA' || vv_aspas || ' = ' || rec.dm_impressa;
         gv_sql := gv_sql || ', ' || vv_aspas || 'DM_ST_EMAIL' || vv_aspas || ' = ' || rec.dm_st_email;
         gv_sql := gv_sql || ', ' || vv_aspas || 'DM_TP_AMB' || vv_aspas || ' = ' || rec.dm_tp_amb;
         gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_CHAVE_CTE' || vv_aspas || ' = ' || '''' || rec.nro_chave_cte || '''';
         gv_sql := gv_sql || ', ' || vv_aspas || 'DIG_VERIF_CHAVE' || vv_aspas || ' = ' || nvl(rec.dig_verif_chave,0);
         --
         vn_fase := 9;
         --
         if nvl(rec.dm_aut_sefaz,0) > 0 then
            gv_sql := gv_sql || ', ' || vv_aspas || 'DM_AUT_SEFAZ' || vv_aspas || ' = ' || rec.dm_aut_sefaz;
         end if;
         --
         if rec.dt_aut_sefaz is not null then
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_AUT_SEFAZ' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(rec.dt_aut_sefaz, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
         end if;
         --
         if nvl(rec.nro_protocolo,0) > 0 then
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_PROTOCOLO' || vv_aspas || ' = ' || rec.nro_protocolo;
         end if;
         --
         if vd_dt_canc is not null then
            gv_sql := gv_sql || ', ' || vv_aspas || 'DT_CANC' || vv_aspas || ' = ' || 'to_date(' || '''' || to_char(nvl(vd_dt_canc, sysdate), vv_formato_dt_erp) || '''' || ', ' || '''' || vv_formato_dt_erp || '''' || ')';
         end if;
         --
         if nvl(vn_nro_protocolo_canc,0) > 0 then
            gv_sql := gv_sql || ', ' || vv_aspas || 'NRO_PROTOCOLO_CANC' || vv_aspas || ' = ' || vn_nro_protocolo_canc;
         end if;
         --
         gv_sql := gv_sql || ', ' || vv_aspas || 'DM_LEITURA' || vv_aspas || ' = 0';
         --
         if trim(vv_sistorig_sigla) is not null then
            gv_sql := gv_sql || ', ' || vv_aspas || 'SIST_ORIG' || vv_aspas || ' = ' || '''' || vv_sistorig_sigla || '''';
         end if;
         --
         if trim(vv_unidorg_cd) is not null then
            gv_sql := gv_sql || ', ' || vv_aspas || 'UNID_ORG' || vv_aspas || ' = ' || '''' || vv_unidorg_cd || '''';
         end if;
         --
         vv_sql_where := ' where ' || vv_aspas || 'CPF_CNPJ_EMIT' || vv_aspas || ' = ' || '''' || ev_cpf_cnpj_emit || '''';
         vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'DM_IND_OPER' || vv_aspas || ' = ' || rec.dm_ind_oper;
         vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'DM_IND_EMIT' || vv_aspas || ' = ' || rec.dm_ind_emit;
         --
         if rec.dm_ind_emit = 1 and  vv_cod_part is not null then
            --
            vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'COD_PART' || vv_aspas || ' = ' || '''' || vv_cod_part || '''';
            --
         end if;
         --
         vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'COD_MOD' || vv_aspas || ' = ' || '''' || vv_cod_mod || '''';
         vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'SERIE' || vv_aspas || ' = ' || '''' || rec.serie || '''';
         vv_sql_where := vv_sql_where || ' and ' || vv_aspas || 'NRO_CT' || vv_aspas || ' = ' || rec.nro_ct;
         --
         gv_sql := gv_sql || vv_sql_where;
         --
         vn_fase := 10;
         --
         vn_erro := 0;
         --
         begin
            --
            execute immediate ('select count(1) from ' || vv_obj || ' ' || vv_sql_where) into vn_qtde;
            --
         exception
            when others then
               vn_qtde := 0;
         end;
         --
         vn_fase := 11;
         --
         if nvl(vn_qtde,0) > 0 then
            --
            begin
               --
               execute immediate gv_sql;
               --
            exception
               when others then
                  --
                  vn_erro := 1;
                  -- não registra erro caso a view não exista
                  if sqlcode in (-942, -1010, -02063) then
                     null;
                  else
                     --
                     pk_csf_api_ct.gv_mensagem_log := 'Erro na pkb_ret_infor_canc_erp fase(' || vn_fase || '):' || sqlerrm;
                     --
                     declare
                        vn_loggenerico_id  log_generico_ct.id%TYPE;
                     begin
                        --
                        pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                       , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                                       , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                                       , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                       , en_referencia_id   => rec.conhectransp_id
                                                       , ev_obj_referencia  => 'CONHEC_TRANSP' );
                        --
                     exception
                        when others then
                           null;
                     end;
                     --
                  end if;
            end;
            --
            vn_fase := 12;
            --
            commit;
            --
            vn_fase := 13;
            --
            if nvl(vn_erro,0) = 0 then
               --
               vn_fase := 14;
               --
               vn_dm_st_integra := case when rec.dm_st_proc in (7, 8) then 9 else 8 end;
               --
               pkb_alter_sit_integra_cte_canc ( en_conhectransp_id  => rec.conhectransp_id
                                              , en_dm_st_integra    => vn_dm_st_integra 
                                              , en_empresa_id       => rec.empresa_id);
               --
               vn_fase := 15;
               --
               -- grava informações de log para o erp
               pkb_ret_infor_erro_ct_erp ( en_conhectransp_id => rec.conhectransp_id );
               --
            end if;
            --
         end if;
         --
      end if;
      --
   end loop;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_ret_infor_canc_erp fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                        , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                        , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                        , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                        , en_referencia_id   => vn_conhectransp_id
                                        , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_ret_infor_canc_erp;
-------------------------------------------------------------------------------------------------------
-- procedimento seta "where" para pesquisa de CTe de emissão própria
-------------------------------------------------------------------------------------------------------
procedure pkb_seta_where_emissao_propria ( ed_dt_ini  in  date
                                         , ed_dt_fin  in  date )
is
   --
   vn_fase number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   gv_where := null;
   gv_where :=             ' and ' || GV_ASPAS || 'DM_IND_EMIT' || GV_ASPAS || ' = 0';
   gv_where := gv_where || ' and ' || GV_ASPAS || 'COD_MOD'     || GV_ASPAS || ' in (' || '''' || '57' || ''''||' , '|| '''' || '67' || ''''||') ';  --Atualização CTe 3.0
   --
   vn_fase := 2;
   --
   /*
   if ed_dt_ini is not null and ed_dt_fin is not null then
      gv_where := gv_where ||
                  ' and ((dm_ind_emit = 0 and (dt_hr_emissao >= ' || '''' || to_char(ed_dt_ini, gv_formato_dt_erp) || '''' ||
                                        ' and  dt_hr_emissao <= ' || '''' || to_char(ed_dt_fin, gv_formato_dt_erp) || '''' ||
                  ')) or (dm_ind_emit = 1 and (dt_sai_ent    >= ' || '''' || to_char(ed_dt_ini, gv_formato_dt_erp) || '''' ||
                                        ' and  dt_sai_ent    <= ' || '''' || to_char(ed_dt_fin, gv_formato_dt_erp) || '''' || ')))';
   end if;
   */
   if ed_dt_ini is not null and ed_dt_fin is not null then
      gv_where := gv_where ||
                  ' and dt_hr_emissao >= ' || '''' || to_char(ed_dt_ini, gv_formato_dt_erp) || '''' ||
                  ' and dt_hr_emissao <= ' || '''' || to_char(ed_dt_fin, gv_formato_dt_erp) || '''';
   end if;
   --
   vn_fase := 3;
   --
   -- Regra1: No caso de integração de documentos fiscais ao Portal do Compliance com a Finalidade de emitir o conhecimento de
   -- transporte perante a Sefaz, os campos DM_ST_PROC e DM_LEGADO devem receber o valor 0.
   --
   -- Regra2: No caso de integração de documentos fiscais cuja emissão é própria ao Portal do Compliance com a finalidade escrituração
   -- fiscal, ou seja, os documentos fiscais não serão transmitidos a Sefaz considerar o de-para abaixo:
   -- Nota Fiscal Aprovada:   DM_ST_PROC = 4 DM_LEGADO = 1
   -- Nota Fiscal Denegada    DM_ST_PROC = 6 DM_LEGADO = 2
   -- Nota Fiscal Cancelada   DM_ST_PROC = 7 DM_LEGADO = 3
   -- Nota Fiscal Inutilizada DM_ST_PROC = 8 DM_LEGADO = 4
   --
   -- Foi comentado o codigo abaixo para somente integrar pela pkb_integr_multorg os CTEs de EMISSAO PROPRIA, NAO LEGADO
   --gv_where := gv_where || ' and (';
   --gv_where := gv_where ||     ' ( ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS || ' = 0 )';
   --gv_where := gv_where ||  ' or ( ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS || ' = 4 and ' ||  GV_ASPAS || 'DM_LEGADO' || GV_ASPAS || ' = 1)';
   --gv_where := gv_where ||  ' or ( ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS || ' = 6 and ' ||  GV_ASPAS || 'DM_LEGADO' || GV_ASPAS || ' = 2)';
   --gv_where := gv_where ||  ' or ( ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS || ' = 7 and ' ||  GV_ASPAS || 'DM_LEGADO' || GV_ASPAS || ' = 3)';
   --gv_where := gv_where ||  ' or ( ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS || ' = 8 and ' ||  GV_ASPAS || 'DM_LEGADO' || GV_ASPAS || ' = 4)';
   --gv_where := gv_where ||      ' )';
   --
   gv_where := gv_where || ' and ' || GV_ASPAS || 'DM_ST_PROC' || GV_ASPAS || ' = 0 ';
   --
   gn_rel_part := 0;
   --
   vn_fase := 4;
   --
   if GV_SIST_ORIG is not null then
      --
      gv_where := gv_where || ' and ' || GV_ASPAS || 'SIST_ORIG' || GV_ASPAS || ' = ' || '''' || GV_SIST_ORIG || '''';
      --
   end if;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_seta_where_emissao_propria fase(' || vn_fase || '): ' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => null
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_seta_where_emissao_propria;
--
-------------------------------------------------------------------------------------------------------
-- Procedimento integra as consultas de CTe com o ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_seta_integr_erp_ct_cs ( en_ctconssit_id in ct_cons_sit.id%type
                                    , en_empresa_id   in ct_cons_sit.empresa_id%type ) is
   --
   PRAGMA AUTONOMOUS_TRANSACTION;
   --
begin
   --
   -- Chama rotina que atualiza a tabela ct_cons_sit
   pk_csf_api_cons_sit.gt_row_ct_cons_sit               := null;
   pk_csf_api_cons_sit.gt_row_ct_cons_sit.empresa_id    := en_empresa_id;
   pk_csf_api_cons_sit.gt_row_ct_cons_sit.id            := en_ctconssit_id;
   pk_csf_api_cons_sit.gt_row_ct_cons_sit.DM_INTEGR_ERP := 1;
   --
   pk_csf_api_cons_sit.pkb_ins_atu_ct_cons_sit ( est_row_ct_cons_sit => pk_csf_api_cons_sit.gt_row_ct_cons_sit
                                               , ev_campo_atu        => 'DM_INTEGR_ERP'
                                               , en_tp_rotina        => 0 -- atualização
                                               , ev_rotina_orig      => 'pk_integr_view_ct.pkb_seta_integr_erp_ct_cs'
                                               );
   --
   commit;
   --
exception
   when others then
      null;
end pkb_seta_integr_erp_ct_cs;
--
-------------------------------------------------------------------------------------------------------
-- Função verificar se existe registro de consulta integrado
-- 0 --> não existe
-- 1 --> existe registro
-------------------------------------------------------------------------------------------------------
function fkg_verif_int_ct_cons_sit ( ev_nro_chave_cte in conhec_transp.nro_chave_cte%type ) return number is
   --
   vn_fase          number := 0;
   vn_qtde          number := 0;
   vn_dummy         number := 0;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_CONS_SIT') = 0 then
      --
      vn_dummy := 0;
      --
      return vn_dummy;
      --
   end if;
   --
   vn_fase := 1.1;
   --
   gv_sql := 'SELECT count(1) ';
   --
   gv_sql := gv_sql || fkg_monta_from ( ev_obj => 'VW_CSF_CT_CONS_SIT');
   --
   gv_sql := gv_sql || ' where ' || GV_ASPAS || 'NRO_CHAVE_CTE' || GV_ASPAS || ' = ' || '''' || trim(ev_nro_chave_cte) || '''';
   --
   vn_fase := 2;
   --
   begin
      --
      execute immediate gv_sql into vn_qtde;
      --
   exception
      when no_data_found then
         vn_qtde := 0;
      when others then
         vn_qtde := 0;
         -- não registra erro caso a view não exista
         if sqlcode in (-942, -1010) then
            null;
         else
            --
            pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.fkg_verif_int_ct_cons_sit:' || sqlerrm || ' - ' || gv_sql;
            --
            declare
               vn_loggenerico_id  log_generico_ct.id%TYPE;
            begin
               --
               pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                 , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                 , ev_resumo          => null
                                                 , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                 , en_referencia_id   => null
                                                 , ev_obj_referencia  => 'CONHEC_TRANSP'
                                                 );
               --
            exception
               when others then
                  null;
            end;
            --
         end if;
   end;
   --
   commit;
   --
   vn_fase := 3;
   --
   if nvl(vn_qtde,0) <= 0 then
      --
      vn_dummy := 0;
      --
   else
      --
      vn_dummy := 1;
      --
   end if;
   --
   return vn_dummy;
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.fkg_verif_int_ct_cons_sit fase(' || vn_fase || '):' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => null
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA );
         --
      exception
         when others then
            null;
      end;
      --
end fkg_verif_int_ct_cons_sit;
--
-------------------------------------------------------------------------------------------------------
-- Procedimento integra as consultas de CTe com o ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_int_ct_cons_sit ( en_empresa_id in empresa.id%type )
is
   --
   vn_fase                    number := 0;
   vn_erro                    number := 0;
   vn_existe_registro         number := 0;
   vv_obj                     varchar2(100) := null;
   vv_uf                      estado.sigla_estado%type;
   vn_dm_ret_cons_cte_sem_xml empresa.dm_ret_cons_cte_sem_xml%type;
   --
   cursor c_cons is
   select *
     from ct_cons_sit
    where empresa_id     = en_empresa_id
      and dm_situacao    not in (1,5,7)
      and dm_integr_erp  = 0
      and nvl(conhectransp_id,0) > 0
    order by id;
   --
begin
   --
   vn_fase := 1;
   --
   if pk_csf.fkg_existe_obj_util_integr ( ev_obj_name => 'VW_CSF_CT_CONS_SIT') = 0 then
      --
      return;
      --
   end if;
   --
   vn_fase := 1.1;
   --
   vn_dm_ret_cons_cte_sem_xml := pk_csf.fkg_ret_cons_cte_sem_xml ( en_empresa_id => en_empresa_id );
   --
   vn_fase := 1.2;
   --
   for rec in c_cons loop
      exit when c_cons%notfound or (c_cons%notfound) is null;
      --
      vn_fase := 2;
      --
      if vn_dm_ret_cons_cte_sem_xml = 0
         and nvl(rec.conhectransp_id,0) <= 0 then
         --
         goto proximo_cons;
         --
      end if;
      --
      vn_fase := 2.01;
      --
      vn_existe_registro := fkg_verif_int_ct_cons_sit ( ev_nro_chave_cte => rec.NRO_CHAVE_CTE );
      --
      if nvl(vn_existe_registro,0) = 0 then
         --
         gv_sql := 'insert into ';
         --
         vn_fase := 2.1;
         --
         if GV_NOME_DBLINK is not null then
            --
            vv_obj := GV_ASPAS || 'VW_CSF_CT_CONS_SIT' || GV_ASPAS || '@' || GV_NOME_DBLINK;
            --
         else
            --
            vv_obj := GV_ASPAS || 'VW_CSF_CT_CONS_SIT' || GV_ASPAS;
            --
         end if;
         --
         if trim(GV_OWNER_OBJ) is not null then
            vv_obj := trim(GV_OWNER_OBJ) || '.' || vv_obj;
         else
            vv_obj := vv_obj;
         end if;
         --
         vn_fase := 2.2;
         --
         gv_sql := gv_sql || vv_obj || ' (';
         --
         gv_sql := gv_sql ||         GV_ASPAS || 'NRO_CHAVE_CTE' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'COD_UF_IBGE' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'UF' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'ANO_MES_EMISSAO' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ_EMIT' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'NUMERO' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_DHEMI' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_REF_CTE' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_VT_PREST' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_CST' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_P_ICMS' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_V_ICMS' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_V_BC' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_SITUACAO' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_SITUACAO' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_CONS' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_TP_CONS' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DHRECBTO' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'NPROT' || GV_ASPAS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_LEITURA' || GV_ASPAS;
         --
         gv_sql := gv_sql || ') values (';
         gv_sql := gv_sql || '''' || rec.NRO_CHAVE_CTE || '''';
         --
         vn_fase := 2.3;
         -- Trata COD_UF_IBGE e UF
         if trim(rec.cuf) is not null then
            --
            gv_sql := gv_sql || ', ' || '''' || trim(rec.cuf) || '''';
            --
            begin
               --
               select est.sigla_estado
                 into vv_uf
                 from estado est
                where est.ibge_estado = trim(rec.cuf);
               --
            exception
               when others then
                  vv_uf := null;
            end;
            --
            if trim(vv_uf) is not null then
               gv_sql := gv_sql || ', ' || '''' || trim(vv_uf) || '''';
            else
               gv_sql := gv_sql || ', null';
            end if;
            --
         else
            --
            gv_sql := gv_sql || ', null';
            gv_sql := gv_sql || ', null';
            --
         end if;
         --
         vn_fase := 2.4;
         -- Trata ANO_MES_EMISSAO
         if nvl(rec.C_DHEMI, rec.DHRECBTO) is not null then
            --
            gv_sql := gv_sql || ', ' || '''' || to_char(nvl(rec.C_DHEMI, rec.DHRECBTO), 'RRMM') || '''';
            --
         else
            --
            gv_sql := gv_sql || ', null';
            --
         end if;
         --
         vn_fase := 2.5;
         -- Trata CNPJ_EMIT
         gv_sql := gv_sql || ', ' || '''' || trim(rec.C_CNPJ_EMIT) || '''';
         --
         vn_fase := 2.6;
         -- Trata SERIE
         gv_sql := gv_sql || ', ' || '''' || trim(rec.C_SERIE) || '''';
         -- Trata NUMERO
         if nvl(rec.C_NCT,0) > 0 then
            gv_sql := gv_sql || ', ' || nvl(rec.C_NCT,0);
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         vn_fase := 2.7;
         -- Trata C_DHEMI
            gv_sql := gv_sql || ', ' || '''' || to_char(nvl(rec.C_DHEMI, rec.DHRECBTO), GV_FORMATO_DT_ERP) || '''';
         --
         vn_fase := 2.8;
         -- Trata C_REF_CTE
         gv_sql := gv_sql || ', ' || '''' || trim(rec.C_REF_CTE) || '''';
         --
         vn_fase := 2.9;
         -- Trata C_VT_PREST
         if nvl(rec.C_VT_PREST,0) > 0 then
            gv_sql := gv_sql || ', ' || replace(nvl(rec.C_VT_PREST,0), ',', '.');
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         vn_fase := 2.10;
         -- Trata C_CST
         if nvl(rec.C_CST,0) > 0 then
            gv_sql := gv_sql || ', ' || nvl(rec.C_CST,0);
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         vn_fase := 2.11;
         -- Trata C_P_ICMS
         if nvl(rec.C_P_ICMS,0) > 0 then
            gv_sql := gv_sql || ', ' || replace(nvl(rec.C_P_ICMS,0), ',', '.');
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         vn_fase := 2.12;
         --
         if nvl(rec.C_V_ICMS,0) > 0 then
            gv_sql := gv_sql || ', ' || replace(nvl(rec.C_V_ICMS,0), ',', '.');
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         vn_fase := 2.13;
         -- Trata C_V_BC
         if nvl(rec.C_V_BC,0) > 0 then
            gv_sql := gv_sql || ', ' || replace(nvl(rec.C_V_BC,0), ',', '.');
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         vn_fase := 2.14;
         gv_sql := gv_sql || ', ' || rec.DM_SITUACAO;
         gv_sql := gv_sql || ', ' || '''' || SUBSTR(PK_CSF.FKG_DOMINIO('CT_CONS_SIT.DM_SITUACAO', rec.DM_SITUACAO), 1, 50) || '''';
         --
         vn_fase := 2.15;
         gv_sql := gv_sql || ', ' || rec.DM_TP_CONS;
         gv_sql := gv_sql || ', ' || '''' || SUBSTR(PK_CSF.FKG_DOMINIO('CT_CONS_SIT.DM_TP_CONS', rec.DM_TP_CONS), 1, 50) || '''';
         --
         vn_fase := 2.16;
         --
         if rec.DHRECBTO is not null then
            --
            gv_sql := gv_sql || ', ' || '''' || to_char(rec.DHRECBTO, GV_FORMATO_DT_ERP) || '''';
            --
         else
            --
            gv_sql := gv_sql || ', null';
            --
         end if;
         --
         vn_fase := 2.17;
         -- Trata NPROT
         if nvl(rec.NPROT,0) > 0 then
            gv_sql := gv_sql || ', ' || nvl(rec.NPROT,0);
         else
            gv_sql := gv_sql || ', null';
         end if;
         --
         -- Trata DM_LEITURA
         gv_sql := gv_sql || ', 0)';
         --
         vn_fase := 3;
         --
         vn_erro := 0;
         --
         begin
            --
            execute immediate gv_sql;
            --
         exception
            when others then
               -- não registra erro caso a view não exista
               if sqlcode in (-942, -1, -28500, -01010, -02063) then
                  vn_erro := 0;
                  null;
               else
                  vn_erro := 1;
                  --
                  pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_int_ct_cons_sit (insere) fase(' || vn_fase || ') (' || gv_sql || '):' || sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_ct.id%TYPE;
                  begin
                     --
                     pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                    , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                    , ev_resumo          => null
                                                    , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                    , en_referencia_id   => null
                                                    , ev_obj_referencia  => 'CONHEC_TRANSP'
                                                    );
                     --
                  exception
                     when others then
                        null;
                  end;
                  --
               end if;
         end;
      else
         --
         vn_fase := 4;
         -- atualiza a situação da consulta
         --
         gv_sql := 'update ';
         --
         vn_fase := 4.1;
         --
         if GV_NOME_DBLINK is not null then
            --
            vv_obj := GV_ASPAS || 'VW_CSF_CT_CONS_SIT' || GV_ASPAS || '@' || GV_NOME_DBLINK;
            --
         else
            --
            vv_obj := GV_ASPAS || 'VW_CSF_CT_CONS_SIT' || GV_ASPAS;
            --
         end if;
         --
         if trim(GV_OWNER_OBJ) is not null then
            vv_obj := trim(GV_OWNER_OBJ) || '.' || vv_obj;
         else
            vv_obj := vv_obj;
         end if;
         --
         vn_fase := 4.2;
         --
         gv_sql := gv_sql || vv_obj || ' set ';
         gv_sql := gv_sql || GV_ASPAS || 'DM_SITUACAO' || GV_ASPAS || ' = ' || rec.DM_SITUACAO;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_SITUACAO' || GV_ASPAS || ' = ' || '''' || SUBSTR(PK_CSF.FKG_DOMINIO('CT_CONS_SIT.DM_SITUACAO', rec.DM_SITUACAO), 1, 50) || '''';
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_TP_CONS' || GV_ASPAS || ' = ' || rec.DM_TP_CONS;
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DESCR_TP_CONS' || GV_ASPAS || ' = ' || '''' || SUBSTR(PK_CSF.FKG_DOMINIO('CT_CONS_SIT.DM_TP_CONS', rec.DM_TP_CONS), 1, 50) || '''';
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DHRECBTO' || GV_ASPAS || ' = ' || '''' || to_char(rec.DHRECBTO, GV_FORMATO_DT_ERP) || '''';
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'NPROT' || GV_ASPAS || ' = ' || nvl(rec.NPROT,0);
         gv_sql := gv_sql || ', ' || GV_ASPAS || 'DM_LEITURA' || GV_ASPAS || ' = 0 ';
         --
         if trim(rec.C_CNPJ_EMIT) is not null then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'CNPJ_EMIT' || GV_ASPAS || ' = ' || '''' || trim(rec.C_CNPJ_EMIT) || '''';
         end if;
         --
         if trim(rec.C_SERIE) is not null then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'SERIE' || GV_ASPAS || ' = ' || '''' || trim(rec.C_SERIE) || '''';
         end if;
         --
         if nvl(rec.C_NCT,0) > 0 then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'NUMERO' || GV_ASPAS || ' = ' || nvl(rec.C_NCT,0);
         end if;
         --
         if rec.C_DHEMI is not null then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_DHEMI' || GV_ASPAS || ' = ' || '''' || to_char(nvl(rec.C_DHEMI, rec.DHRECBTO), GV_FORMATO_DT_ERP) || '''';
         end if;
         --
         if trim(rec.C_REF_CTE) is not null then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_REF_CTE' || GV_ASPAS || ' = ' || '''' || trim(rec.C_REF_CTE) || '''';
         end if;
         --
         if nvl(rec.C_VT_PREST,0) > 0 then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_VT_PREST' || GV_ASPAS || ' = ' || replace(nvl(rec.C_VT_PREST,0), ',', '.');
         end if;
         --
         if nvl(rec.C_CST,0) > 0 then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_CST' || GV_ASPAS || ' = ' || nvl(rec.C_CST,0);
         end if;
         --
         if nvl(rec.C_P_ICMS,0) > 0 then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_P_ICMS' || GV_ASPAS || ' = ' || replace(nvl(rec.C_P_ICMS,0), ',', '.');
         end if;
         --
         if nvl(rec.C_V_ICMS,0) > 0 then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_V_ICMS' || GV_ASPAS || ' = ' || replace(nvl(rec.C_V_ICMS,0), ',', '.');
         end if;
         --
         if nvl(rec.C_V_BC,0) > 0 then
            gv_sql := gv_sql || ', ' || GV_ASPAS || 'C_V_BC' || GV_ASPAS || ' = ' || replace(nvl(rec.C_V_BC,0), ',', '.');
         end if;
         --
         gv_sql := gv_sql || ' WHERE ';
         gv_sql := gv_sql || GV_ASPAS || 'NRO_CHAVE_CTE' || GV_ASPAS || ' = ' || '''' || trim(rec.NRO_CHAVE_CTE) || '''';
         --
         vn_erro := 0;
         --
         begin
            --
            execute immediate gv_sql;
            --
         exception
            when others then
              vn_erro := 1;
               -- não registra erro caso a view não exista
               if sqlcode in (-942, -1, -28500, -01010, -02063) then
                  null;
               else
                  --
                  pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_int_ct_cons_sit(atualiza) fase(' || vn_fase || ') (' || gv_sql || '):' || sqlerrm;
                  --
                  declare
                     vn_loggenerico_id  log_generico_ct.id%TYPE;
                  begin
                     --
                     pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                                    , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                                    , ev_resumo          => null
                                                    , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                                    , en_referencia_id   => null
                                                    , ev_obj_referencia  => 'CONHEC_TRANSP'
                                                    );
                     --
                  exception
                     when others then
                        null;
                  end;
                  --
               end if;
         end;
         --
      end if;
      --
      commit;
      --
      vn_fase := 5;
      -- retira a consulta da fila
      if nvl(vn_erro,0) = 0 then
         --
         pkb_seta_integr_erp_ct_cs ( en_ctconssit_id => rec.id 
                                   , en_empresa_id   => rec.empresa_id );
         --
      end if;
      --
      <<proximo_cons>>
      --
      vn_fase := 6;
      --
   end loop;
   --
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_int_ct_cons_sit fase(' || vn_fase || '):' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => null
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_int_ct_cons_sit;
--
-------------------------------------------------------------------------------------------------------
-- procedimento seta "where" para pesquisa por período
-------------------------------------------------------------------------------------------------------
procedure pkb_seta_where_periodo ( ed_dt_ini  in  date
                                 , ed_dt_fin  in  date )
is
begin
   --
   gv_where := null;
   gv_where := ' AND ((DM_IND_EMIT = 0 AND (DT_HR_EMISSAO >= ' || '''' || to_char(ed_dt_ini, GV_FORMATO_DT_ERP) || '''' ||
                                         ' AND DT_HR_EMISSAO <= ' || '''' || to_char(ed_dt_fin, GV_FORMATO_DT_ERP) || '''' ||
               ')) OR (DM_IND_EMIT = 1 AND (DT_SAI_ENT >= ' || '''' || to_char(ed_dt_ini, GV_FORMATO_DT_ERP) || '''' ||
                                              ' AND DT_SAI_ENT <= ' || '''' || to_char(ed_dt_fin, GV_FORMATO_DT_ERP) || '''' || ')))';
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_seta_where_periodo: '||sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_cabec_log
                                           , ev_resumo          => pk_csf_api_ct.gv_mensagem_log
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA
                                           , en_referencia_id   => null
                                           , ev_obj_referencia  => 'CONHEC_TRANSP' );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_seta_where_periodo;
--
--------------------------------------------------------------------------------------------------------------------------
--| Procedimento que inicia a integração dos Conhecimentos de Transportes de Emissão Própria por meio de leitura de views
--------------------------------------------------------------------------------------------------------------------------
procedure pkb_integracao ( en_empresa_id  in empresa.id%type
                         , ed_dt_ini      in date
                         , ed_dt_fin      in date )
is
   --
   vn_fase          number := 0;
   vv_cpf_cnpj_emit varchar2(14) := null;
   --
   cursor c_empr is
   select e.id empresa_id
        , e.dt_ini_integr
        , eib.id empresaintegrbanco_id
        , eib.owner_obj
        , eib.nome_dblink
        , eib.dm_util_aspa
        , eib.dm_ret_infor_integr
        , eib.formato_dt_erp
        , eib.dm_form_dt_erp
        , e.multorg_id
     from empresa e
        , empresa_integr_banco eib
    where e.id             = en_empresa_id
      and e.dm_tipo_integr in (3, 4) -- Integração por view
      and e.dm_situacao    = 1 -- Ativa
      and eib.empresa_id   = e.id
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   -- seta o tipo de integração que será feito
   -- 0 - Somente valida os dados e registra o Log de ocorrência
   -- 1 - Valida os dados e registra o Log de ocorrência e insere a informação
   -- Todos os procedimentos de integração fazem referência a ele
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => 1 );
   --
   vn_fase := 2;
   --
   pk_csf_api_ct.pkb_seta_obj_ref ( ev_objeto => 'CONHEC_TRANSP' );
   --
   for rec in c_empr loop
      exit when c_empr%notfound or (c_empr%notfound) is null;
      --
      vn_fase := 3;
      --
      vv_cpf_cnpj_emit := pk_csf.fkg_cnpj_ou_cpf_empresa(rec.empresa_id);
      gn_multorg_id    := rec.multorg_id;
      --
      vn_fase := 3.1;
      -- Seta o DBLink
      gn_empresaintegrbanco_id   := rec.empresaintegrbanco_id;
      gv_nome_dblink             := rec.nome_dblink;
      gd_dt_ini_integr           := trunc(rec.dt_ini_integr);
      gv_owner_obj               := rec.owner_obj;
      --
      if nvl(rec.dm_form_dt_erp,0) = 1
         and trim(rec.formato_dt_erp) is not null then
         gv_formato_dt_erp := rec.formato_dt_erp;
      else
         gv_formato_dt_erp := gv_formato_data;
      end if;
      --
      vn_fase := 4;
      -- Verifica se utiliza GV_ASPAS dupla
      if rec.dm_util_aspa = 1 then
         --
         gv_aspas := '"';
         --
      else
         --
         gv_aspas := null;
         --
      end if;
      --
      vn_fase := 5;
      -- seta "where" para pesquisa do CTe de emissão própria
      --pkb_seta_where_emissao_propria ( ed_dt_ini  => ed_dt_ini
      --                               , ed_dt_fin  => ed_dt_fin );
      pkb_seta_where_periodo ( ed_dt_ini  => ed_dt_ini
                             , ed_dt_fin  => ed_dt_fin );
      --
      vn_fase := 6;
      -- leitura dos Conhecimentos de Transportes
      pkb_ler_Conhec_Transp( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 7;
      -- leitura dos Conhecimentos de Transportes cancelados
      pkb_ler_Conhec_Transp_Canc( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 8;
      -- Verifica se retorna a informação para o ERP
      if rec.dm_ret_infor_integr = 1 then
         --
         vn_fase := 9;
         -- Integra a informação para o ERP
         pkb_int_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 10;
         -- retorna a informação para o ERP
         pkb_ret_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 11;
         -- Retorna informação do cancelamento
         pkb_ret_infor_canc_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 12;
         --
         pkb_ret_infor_resp_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
      end if;
      --
      vn_fase := 13;
      --
      -- Procedimento integra as consultas de CTe com o ERP
      pkb_int_ct_cons_sit ( en_empresa_id => rec.empresa_id );
      --
   end loop;
   --
   vn_fase := 14;
   --
   -- Finaliza o log genérico para a integração dos Conhecimentos de Transporte no CSF
   pk_csf_api_ct.pkb_finaliza_log_generico_ct;
   --
   vn_fase := 15;
   --
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => null );
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_integracao fase(' || vn_fase || '):' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => null
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_integracao;
--
-------------------------------------------------------------------------------------------------------------------
--| Procedimento que inicia a integração de Conhecimento de Transporte Emissão através do Mult-Org.
--| Esse processo estará sendo executado por JOB SCHEDULER, especifícamente para Ambiente Amazon.
--| A rotina deverá executar o mesmo procedimento da rotina pkb_integracao, porém com a identificação da mult-org.
-------------------------------------------------------------------------------------------------------------------
procedure pkb_integr_multorg ( en_multorg_id in mult_org.id%type )
is
   --
   vn_fase          number := 0;
   vv_cpf_cnpj_emit varchar2(14) := null;
   --
   cursor c_empr ( en_multorg_id in mult_org.id%type ) is
   select e.id empresa_id
        , e.dt_ini_integr
        , eib.id empresaintegrbanco_id
        , eib.owner_obj
        , eib.nome_dblink
        , eib.dm_util_aspa
        , eib.dm_ret_infor_integr
        , eib.formato_dt_erp
        , eib.dm_form_dt_erp
        , e.multorg_id
     from empresa e
        , empresa_integr_banco eib
    where e.multorg_id      = en_multorg_id
      and e.dm_tipo_integr in (3, 4) -- Integração por view
      and e.dm_situacao    = 1 -- Ativa
      and eib.empresa_id   = e.id
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   -- seta o tipo de integração que será feito
   -- 0 - Somente valida os dados e registra o Log de ocorrência
   -- 1 - Valida os dados e registra o Log de ocorrência e insere a informação
   -- Todos os procedimentos de integração fazem referência a ele
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => 1 );
   --
   vn_fase := 2;
   --
   pk_csf_api_ct.pkb_seta_obj_ref ( ev_objeto => 'CONHEC_TRANSP' );
   --
   for rec in c_empr ( en_multorg_id => en_multorg_id )
   loop
      --
      exit when c_empr%notfound or (c_empr%notfound) is null;
      --
      vn_fase := 3;
      --
      vv_cpf_cnpj_emit := pk_csf.fkg_cnpj_ou_cpf_empresa(rec.empresa_id);
      gn_multorg_id    := rec.multorg_id;
      --
      vn_fase := 3.1;
      -- Seta o DBLink
      gn_empresaintegrbanco_id   := rec.empresaintegrbanco_id;
      gv_nome_dblink             := rec.nome_dblink;
      gd_dt_ini_integr           := trunc(rec.dt_ini_integr);
      gv_owner_obj               := rec.owner_obj;
      --
      if nvl(rec.dm_form_dt_erp,0) = 1
         and trim(rec.formato_dt_erp) is not null then
         gv_formato_dt_erp := rec.formato_dt_erp;
      else
         gv_formato_dt_erp := gv_formato_data;
      end if;
      --
      vn_fase := 4;
      -- Verifica se utiliza GV_ASPAS dupla
      if rec.dm_util_aspa = 1 then
         --
         gv_aspas := '"';
         --
      else
         --
         gv_aspas := null;
         --
      end if;
      --
      vn_fase := 5;
      -- seta "where" para pesquisa do CTe de emissão própria
      pkb_seta_where_emissao_propria ( ed_dt_ini  => null
                                     , ed_dt_fin  => null );
      --
      vn_fase := 6;
      -- leitura dos Conhecimentos de Transportes
      pkb_ler_Conhec_Transp( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 7;
      -- leitura dos Conhecimentos de Transportes cancelados
      pkb_ler_Conhec_Transp_Canc( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 8;
      -- Verifica se retorna a informação para o ERP
      if rec.dm_ret_infor_integr = 1 then
         --
         vn_fase := 9;
         -- Integra a informação para o ERP
         pkb_int_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 10;
         -- retorna a informação para o ERP
         pkb_ret_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 11;
         -- Retorna informação do cancelamento
         pkb_ret_infor_canc_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 12;
         --
         pkb_ret_infor_resp_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
      end if;
      --
      vn_fase := 13;
      --
      -- Procedimento integra as consultas de CTe com o ERP
      pkb_int_ct_cons_sit ( en_empresa_id => rec.empresa_id );
      --
   end loop;
   --
   vn_fase := 14;
   --
   -- Finaliza o log genérico para a integração dos Conhecimentos de Transporte no CSF
   pk_csf_api_ct.pkb_finaliza_log_generico_ct;
   --
   vn_fase := 15;
   --
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => null );
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_integr_multorg fase(' || vn_fase || '):' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => null
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_integr_multorg;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento que inicia a integração de Conhecimentos de Transporte por empresa e período
-------------------------------------------------------------------------------------------------------
procedure pkb_integr_periodo ( en_multorg_id   in mult_org.id%type
                             , ed_dt_ini       in  date
                             , ed_dt_fin       in  date
                             )
is
   --
   vn_fase          number := 0;
   vv_cpf_cnpj_emit varchar2(14) := null;
   --
   cursor c_empr is
   select e.id empresa_id
        , e.dt_ini_integr
        , eib.id empresaintegrbanco_id
        , eib.owner_obj
        , eib.nome_dblink
        , eib.dm_util_aspa
        , eib.dm_ret_infor_integr
        , eib.formato_dt_erp
        , eib.dm_form_dt_erp
        , e.multorg_id
     from empresa e
        , empresa_integr_banco eib
    where  e.multorg_id      = en_multorg_id
      and e.dm_tipo_integr in (3, 4) -- Integração por view
      and e.dm_situacao    = 1 -- Ativa
      and eib.empresa_id   = e.id
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   -- seta o tipo de integração que será feito
   -- 0 - Somente valida os dados e registra o Log de ocorrência
   -- 1 - Valida os dados e registra o Log de ocorrência e insere a informação
   -- Todos os procedimentos de integração fazem referência a ele
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => 1 );
   --
   vn_fase := 1.1;
   --
   pk_csf_api_ct.pkb_seta_obj_ref ( ev_objeto => 'CONHEC_TRANSP' );
   --
   for rec in c_empr loop
     exit when c_empr%notfound or (c_empr%notfound) is null;
      --
      vn_fase := 2;
      --
      vv_cpf_cnpj_emit := pk_csf.fkg_cnpj_ou_cpf_empresa ( en_empresa_id => rec.empresa_id );
      --
      -- Seta mult-org
      gn_multorg_id    := rec.multorg_id;
      --      
      -- Seta o DBLink
      gn_empresaintegrbanco_id := rec.empresaintegrbanco_id;
      gv_nome_dblink           := rec.nome_dblink;
      gd_dt_ini_integr         := trunc(rec.dt_ini_integr);
      gv_owner_obj             := rec.owner_obj;
      --
      if nvl(rec.dm_form_dt_erp,0) = 1
         and trim(rec.formato_dt_erp) is not null then
         gv_formato_dt_erp := rec.formato_dt_erp;
      else
         gv_formato_dt_erp := gv_formato_data;
      end if;
      --
      vn_fase := 3;
      -- Verifica se utiliza GV_ASPAS dupla
      if rec.dm_util_aspa = 1 then
         --
         gv_aspas := '"';
         --
      else
         --
         gv_aspas := null;
         --
      end if;
      --
      vn_fase := 4;
      -- seta "where" para pesquisa por período
      pkb_seta_where_periodo ( ed_dt_ini  => ed_dt_ini
                             , ed_dt_fin  => ed_dt_fin );
      --
      vn_fase := 5;
      --
      -- leitura dos Conhecimentos de Transportes
      pkb_ler_Conhec_Transp( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 6;
      -- leitura dos Conhecimentos de Transportes cancelados
      pkb_ler_Conhec_Transp_Canc( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 7;
      -- Verifica se retorna a informação para o ERP
      if rec.dm_ret_infor_integr = 1 then
         --
         vn_fase := 8;
         -- Integra a informação para o ERP
         pkb_int_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 9;
         -- retorna a informação para o ERP
         pkb_ret_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 10;
         -- Retorna informação do cancelamento
         pkb_ret_infor_canc_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
         vn_fase := 11;
         --
         pkb_ret_infor_resp_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
         --
      end if;
      --
      vn_fase := 12;
      --
      -- Procedimento integra as consultas de CTe com o ERP
      pkb_int_ct_cons_sit ( en_empresa_id => rec.empresa_id );
      --
   end loop;
   --
   vn_fase := 13;
   --
   -- Finaliza o log genérico para a integração dos Conhecimentos de Transporte no CSF
   pk_csf_api_ct.pkb_finaliza_log_generico_ct;
   --
   vn_fase := 14;
   --
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => null );
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_integr_periodo fase(' || vn_fase || '):' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id => vn_loggenerico_id
                                           , ev_mensagem       => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo         => null
                                           , en_tipo_log       => pk_csf_api_ct.erro_de_sistema );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_integr_periodo;
--
-------------------------------------------------------------------------------------------------------
--| Procedimento Gera o Retorno para o ERP
-------------------------------------------------------------------------------------------------------
procedure pkb_gera_retorno ( ev_sist_orig in varchar2 default null )
is
   --
   vn_fase          number := 0;
   vv_cpf_cnpj_emit varchar2(14) := null;
   --
   cursor c_empr is
   select e.id empresa_id
        , e.dt_ini_integr
        , eib.id empresaintegrbanco_id
        , eib.owner_obj
        , eib.nome_dblink
        , eib.dm_util_aspa
        , eib.dm_ret_infor_integr
        , eib.formato_dt_erp
        , eib.dm_form_dt_erp
        , e.multorg_id
     from empresa e
        , empresa_integr_banco eib
    where e.dm_tipo_integr      in (3, 4) -- Integração por view
      and e.dm_situacao         = 1 -- Ativa
      and eib.empresa_id        = e.id
      and eib.dm_ret_infor_integr = 1 -- retorna a informação para o ERP
    order by 1;
   --
begin
   --
   vn_fase := 1;
   --
   gv_formato_data := pk_csf.fkg_param_global_csf_form_data;
   --
   -- seta o tipo de integração que será feito
   -- 0 - Somente válida os dados e registra o Log de ocorrência
   -- 1 - Valida os dados e registra o Log de ocorrência e insere a informação
   -- Todos os procedimentos de integração fazem referência a ele
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => 1 );
   --
   GV_SIST_ORIG := trim(ev_sist_orig);
   --
   vn_fase := 2;
   --
   pk_csf_api_ct.pkb_seta_obj_ref ( ev_objeto => 'CONHEC_TRANSP' );
   --
   for rec in c_empr loop
      --
      vn_fase := 3;
      --
      vv_cpf_cnpj_emit := pk_csf.fkg_cnpj_ou_cpf_empresa(rec.empresa_id);
      gn_multorg_id    := rec.multorg_id;
      --
      vn_fase := 3.1;
      -- Seta o DBLink
      GN_EMPRESAINTEGRBANCO_ID := rec.empresaintegrbanco_id;
      GV_NOME_DBLINK           := rec.nome_dblink;
      GV_OWNER_OBJ             := rec.owner_obj;
      --
      if nvl(rec.dm_form_dt_erp,0) = 1
         and trim(rec.formato_dt_erp) is not null then
         GV_FORMATO_DT_ERP := rec.formato_dt_erp;
      else
         GV_FORMATO_DT_ERP := gv_formato_data;
      end if;
      --
      --
      vn_fase := 4;
      -- Verifica se utiliza GV_ASPAS dupla
      if rec.dm_util_aspa = 1 then
         --
         GV_ASPAS := '"';
         --
      else
         --
         GV_ASPAS := null;
         --
      end if;
      --
      vn_fase := 5;
      --
      -- Integra a informação para o ERP
      pkb_int_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 6;
      -- retorna a informação para o ERP
      pkb_ret_infor_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
      vn_fase := 7;
      -- Retorna informação do cancelamento
      pkb_ret_infor_canc_erp ( ev_cpf_cnpj_emit => vv_cpf_cnpj_emit );
      --
   end loop;
   --
   vn_fase := 8;
   -- Finaliza o log genérico para a integração dos Conhecimentos de Transportes no CSF
   pk_csf_api_ct.pkb_finaliza_log_generico_ct;
   --
   vn_fase := 9;
   --
   pk_csf_api_ct.pkb_seta_tipo_integr ( en_tipo_integr => null );
   --
exception
   when others then
      --
      pk_csf_api_ct.gv_mensagem_log := 'Erro na pk_integr_view_ct.pkb_gera_retorno fase(' || vn_fase || '):' || sqlerrm;
      --
      declare
         vn_loggenerico_id  log_generico_ct.id%TYPE;
      begin
         --
         pk_csf_api_ct.pkb_log_generico_ct ( sn_loggenerico_id  => vn_loggenerico_id
                                           , ev_mensagem        => pk_csf_api_ct.gv_mensagem_log
                                           , ev_resumo          => null
                                           , en_tipo_log        => pk_csf_api_ct.ERRO_DE_SISTEMA );
         --
      exception
         when others then
            null;
      end;
      --
end pkb_gera_retorno;
--
-- ==================================================================================================================================== --
--
end pk_integr_view_ct;
/
